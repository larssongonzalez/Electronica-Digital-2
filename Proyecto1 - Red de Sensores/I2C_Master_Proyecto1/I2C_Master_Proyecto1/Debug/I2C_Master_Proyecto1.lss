
I2C_Master_Proyecto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000cb0  00000d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080011e  0080011e  00000d62  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f67  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000938  00000000  00000000  00001e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a14  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  0000318c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000896  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000414e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 02 	call	0x524	; 0x524 <main>
  9e:	0c 94 56 06 	jmp	0xcac	; 0xcac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Config_MASTER>:
	
	address <<= 1;  //Ubica la dirección y
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
	TWAR = address;
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 7c       	andi	r24, 0xCF	; 207
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	74 e2       	ldi	r23, 0x24	; 36
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 3c 03 	call	0x678	; 0x678 <__udivmodsi4>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	60 51       	subi	r22, 0x10	; 16
  c6:	71 09       	sbc	r23, r1
  c8:	81 09       	sbc	r24, r1
  ca:	91 09       	sbc	r25, r1
  cc:	2c 2f       	mov	r18, r28
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	03 2e       	mov	r0, r19
  d6:	00 0c       	add	r0, r0
  d8:	44 0b       	sbc	r20, r20
  da:	55 0b       	sbc	r21, r21
  dc:	0e 94 3c 03 	call	0x678	; 0x678 <__udivmodsi4>
  e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  e4:	c4 30       	cpi	r28, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <I2C_Config_MASTER+0x60>
  e8:	18 f4       	brcc	.+6      	; 0xf0 <I2C_Config_MASTER+0x4a>
  ea:	c1 30       	cpi	r28, 0x01	; 1
  ec:	31 f0       	breq	.+12     	; 0xfa <I2C_Config_MASTER+0x54>
  ee:	23 c0       	rjmp	.+70     	; 0x136 <I2C_Config_MASTER+0x90>
  f0:	c0 31       	cpi	r28, 0x10	; 16
  f2:	91 f0       	breq	.+36     	; 0x118 <I2C_Config_MASTER+0x72>
  f4:	c0 34       	cpi	r28, 0x40	; 64
  f6:	c9 f0       	breq	.+50     	; 0x12a <I2C_Config_MASTER+0x84>
  f8:	1e c0       	rjmp	.+60     	; 0x136 <I2C_Config_MASTER+0x90>
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	80 83       	st	Z, r24
 104:	1d c0       	rjmp	.+58     	; 0x140 <I2C_Config_MASTER+0x9a>
 106:	e9 eb       	ldi	r30, 0xB9	; 185
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	14 c0       	rjmp	.+40     	; 0x140 <I2C_Config_MASTER+0x9a>
 118:	e9 eb       	ldi	r30, 0xB9	; 185
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	80 83       	st	Z, r24
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	0b c0       	rjmp	.+22     	; 0x140 <I2C_Config_MASTER+0x9a>
 12a:	e9 eb       	ldi	r30, 0xB9	; 185
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 6f       	ori	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
 134:	05 c0       	rjmp	.+10     	; 0x140 <I2C_Config_MASTER+0x9a>
 136:	e9 eb       	ldi	r30, 0xB9	; 185
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <I2C_Init>:
}

// Funcion para iniciar la comunicacion I2C
uint8_t I2C_Init(){
	uint8_t state; // Variable que indica que no obtuvo el bus
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);	// Condicion de inicio
 14a:	84 ea       	ldi	r24, 0xA4	; 164
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));	// Espera la bandera TWINT
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <I2C_Init+0x6>
	state = TWSR & 0xF8;	// Obtiene el estado, 1 condicion de inicio, 2 inicio repetido
 158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15c:	88 7f       	andi	r24, 0xF8	; 248
	
	if (state == 0x08 || state == 0x10)
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	21 f0       	breq	.+8      	; 0x16a <I2C_Init+0x20>
 162:	80 31       	cpi	r24, 0x10	; 16
 164:	19 f4       	brne	.+6      	; 0x16c <I2C_Init+0x22>
	{
		return 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret
 16a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return state;
}
 16c:	08 95       	ret

0000016e <I2C_write_data>:

// Funcion para escribir un byte de datos
uint8_t I2C_write_data(uint8_t dato){
	uint8_t state;
	
	TWDR = dato;	// Carga el dato al registro de datos
 16e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);	// Inicia el envio
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!(TWCR & (1<<TWINT)));	// Espera la bandera TWINT
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <I2C_write_data+0xa>
	state = TWSR & 0xF8;	// Obtiene el estado
 180:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 184:	88 7f       	andi	r24, 0xF8	; 248
	
	// Hay 3 posibilidades de exito:
	// Transmitio una SLA + W con ACK
	// Transmitio una SLA + R con ACK
	// Transmitio un dato con ACK
	if (state == 0x18 || state == 0x28 || state == 0x40)
 186:	88 31       	cpi	r24, 0x18	; 24
 188:	31 f0       	breq	.+12     	; 0x196 <I2C_write_data+0x28>
 18a:	88 32       	cpi	r24, 0x28	; 40
 18c:	31 f0       	breq	.+12     	; 0x19a <I2C_write_data+0x2c>
 18e:	80 34       	cpi	r24, 0x40	; 64
 190:	29 f4       	brne	.+10     	; 0x19c <I2C_write_data+0x2e>
	{
		return 0x01;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
 19a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return state;	// So hay algun error
}
 19c:	08 95       	ret

0000019e <I2C_Stop>:

// Funcion para parar la comunicacion I2C
void I2C_Stop(){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Condicion de paro
 19e:	84 e9       	ldi	r24, 0x94	; 148
 1a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));	// El bit se limpia por HW
 1a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a8:	84 fd       	sbrc	r24, 4
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <I2C_Stop+0x6>
}
 1ac:	08 95       	ret

000001ae <I2C_esclavo>:
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
}

// Funcion para enviar un dato del maestro al esclavo
void I2C_esclavo(uint8_t dato, uint8_t direction){
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
	esclavo = direction;  //Dirección del esclavo
	esclavo = esclavo << 1;    //Compone la SLA+W*************************************************************************
 1b2:	66 0f       	add	r22, r22
 1b4:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <esclavo>
	
	
	aux = I2C_Init();   //Condicion de inicio
 1b8:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_Init>
 1bc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	if (aux != 0x01)  //Si no se establece la conexión
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_esclavo+0x22>
	{
		TWCR |= (1 << TWINT);  //Borrar la bandera
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	80 83       	st	Z, r24
		return;   //No continua
 1ce:	10 c0       	rjmp	.+32     	; 0x1f0 <I2C_esclavo+0x42>
	}
	
	aux = I2C_write_data(esclavo);     //Direcciona con la SLA+W
 1d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <esclavo>
 1d4:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_write_data>
 1d8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	if (aux != 0x01)   //Si hay algun error de comunicación
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f0       	breq	.+6      	; 0x1e6 <I2C_esclavo+0x38>
	{
		I2C_Stop();  //No continua, termina la comunicación y la cierra
 1e0:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
		return;
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_esclavo+0x42>
	}
	
	I2C_write_data(dato);   //Envia el dato al esclavo
 1e6:	8c 2f       	mov	r24, r28
 1e8:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_write_data>
	I2C_Stop();  //No continua, termina la comunicación y la cierra
 1ec:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
}
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <I2C_read_data>:
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Condicion de paro
	while(TWCR & (1<<TWSTO));	// El bit se limpia por HW
}

// Funcion para leer un byte de datos desde el esclavo para el maestro.
uint8_t I2C_read_data(uint8_t direccion_esclavo, uint8_t *dato){
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
	// Iniciar concdicion de START
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
 1f8:	94 ea       	ldi	r25, 0xA4	; 164
 1fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete
 1fe:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 202:	99 23       	and	r25, r25
 204:	e4 f7       	brge	.-8      	; 0x1fe <I2C_read_data+0xa>
	
	// Verifica la condicion de start
	if ((TWSR & 0xF8) != TW_START)
 206:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 20a:	98 7f       	andi	r25, 0xF8	; 248
 20c:	98 30       	cpi	r25, 0x08	; 8
 20e:	e1 f5       	brne	.+120    	; 0x288 <I2C_read_data+0x94>
	{
		return 1;	// No se pudo iniciar la condicion de start
	}
	
	// Enviar direccion del esclavo con bit de lectura
	TWDR = SLA_R(direccion_esclavo);
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);
 21c:	84 e8       	ldi	r24, 0x84	; 132
 21e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Espera a que se complete la transmision
 222:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 226:	88 23       	and	r24, r24
 228:	e4 f7       	brge	.-8      	; 0x222 <I2C_read_data+0x2e>
 22a:	eb 01       	movw	r28, r22
	
	// Verifica ACK/NACK de la direccion
	if ((TWSR & 0xF8) == TW_MR_SLA_NACK)
 22c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 230:	88 7f       	andi	r24, 0xF8	; 248
 232:	88 34       	cpi	r24, 0x48	; 72
 234:	21 f4       	brne	.+8      	; 0x23e <I2C_read_data+0x4a>
	{
		I2C_Stop();	// Detiene la transmision si es un NACK
 236:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
		return 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	26 c0       	rjmp	.+76     	; 0x28a <I2C_read_data+0x96>
	} else if ((TWSR & 0xF8) != TW_MR_SLA_ACK)
 23e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 242:	88 7f       	andi	r24, 0xF8	; 248
 244:	80 34       	cpi	r24, 0x40	; 64
 246:	21 f0       	breq	.+8      	; 0x250 <I2C_read_data+0x5c>
	{
		I2C_Stop();	// Detener si recibe otro dato erroneo
 248:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
		return 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	1d c0       	rjmp	.+58     	; 0x28a <I2C_read_data+0x96>
	}
	
	// Lee el byte del Slave
	TWCR = (1<<TWEN)|(1<<TWINT);
 250:	84 e8       	ldi	r24, 0x84	; 132
 252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete la recepcion
 256:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25a:	88 23       	and	r24, r24
 25c:	e4 f7       	brge	.-8      	; 0x256 <I2C_read_data+0x62>
	
	// Verifica la recepcion
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK && (TWSR & 0xF8) != TW_MR_DATA_ACK)
 25e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 262:	88 7f       	andi	r24, 0xF8	; 248
 264:	88 35       	cpi	r24, 0x58	; 88
 266:	49 f0       	breq	.+18     	; 0x27a <I2C_read_data+0x86>
 268:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 26c:	88 7f       	andi	r24, 0xF8	; 248
 26e:	80 35       	cpi	r24, 0x50	; 80
 270:	21 f0       	breq	.+8      	; 0x27a <I2C_read_data+0x86>
	{
		I2C_Stop();	// Detener la recepcion
 272:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
		return 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	08 c0       	rjmp	.+16     	; 0x28a <I2C_read_data+0x96>
	}
	
	// Lee dato recibido
	*dato = TWDR;
 27a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 27e:	88 83       	st	Y, r24
	
	I2C_Stop();
 280:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
	
	return *dato;
 284:	88 81       	ld	r24, Y
 286:	01 c0       	rjmp	.+2      	; 0x28a <I2C_read_data+0x96>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete
	
	// Verifica la condicion de start
	if ((TWSR & 0xF8) != TW_START)
	{
		return 1;	// No se pudo iniciar la condicion de start
 288:	81 e0       	ldi	r24, 0x01	; 1
	*dato = TWDR;
	
	I2C_Stop();
	
	return *dato;
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <I2C_read_data_16bits>:

// Funcion para leer un valor de 16 bits de datos desde el esclavo para el maestro.
uint16_t I2C_read_data_16bits(uint8_t direccion_esclavo, uint16_t *dato){
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
	// Iniciar condicion de START
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
 294:	94 ea       	ldi	r25, 0xA4	; 164
 296:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete
 29a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 29e:	99 23       	and	r25, r25
 2a0:	e4 f7       	brge	.-8      	; 0x29a <I2C_read_data_16bits+0xa>
	
	// Verifica la condicion de start
	if ((TWSR & 0xF8) != TW_START)
 2a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2a6:	98 7f       	andi	r25, 0xF8	; 248
 2a8:	98 30       	cpi	r25, 0x08	; 8
 2aa:	09 f0       	breq	.+2      	; 0x2ae <I2C_read_data_16bits+0x1e>
 2ac:	5e c0       	rjmp	.+188    	; 0x36a <I2C_read_data_16bits+0xda>
	{
		return 1;	// No se pudo iniciar la condicion de start
	}
	
	// Enviar direccion del esclavo con bit de lectura
	TWDR = SLA_R(direccion_esclavo);
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);
 2ba:	84 e8       	ldi	r24, 0x84	; 132
 2bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Espera a que se complete la transmision
 2c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c4:	88 23       	and	r24, r24
 2c6:	e4 f7       	brge	.-8      	; 0x2c0 <I2C_read_data_16bits+0x30>
 2c8:	eb 01       	movw	r28, r22
	
	// Verifica ACK/NACK de la direccion
	if ((TWSR & 0xF8) == TW_MR_SLA_NACK)
 2ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ce:	88 7f       	andi	r24, 0xF8	; 248
 2d0:	88 34       	cpi	r24, 0x48	; 72
 2d2:	29 f4       	brne	.+10     	; 0x2de <I2C_read_data_16bits+0x4e>
	{
		I2C_Stop();	// Detiene la transmision si es un NACK
 2d4:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
		return 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	48 c0       	rjmp	.+144    	; 0x36e <I2C_read_data_16bits+0xde>
	} else if ((TWSR & 0xF8) != TW_MR_SLA_ACK)
 2de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2e2:	88 7f       	andi	r24, 0xF8	; 248
 2e4:	80 34       	cpi	r24, 0x40	; 64
 2e6:	29 f0       	breq	.+10     	; 0x2f2 <I2C_read_data_16bits+0x62>
	{
		I2C_Stop();	// Detener si recibe otro dato erroneo
 2e8:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
		return 1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	3e c0       	rjmp	.+124    	; 0x36e <I2C_read_data_16bits+0xde>
	}
	
	// Lee el byte alto del Slave
	TWCR = (1<<TWEN)|(1<<TWINT);
 2f2:	84 e8       	ldi	r24, 0x84	; 132
 2f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete la recepcion
 2f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2fc:	88 23       	and	r24, r24
 2fe:	e4 f7       	brge	.-8      	; 0x2f8 <I2C_read_data_16bits+0x68>
	
	// Verifica la recepcion
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK && (TWSR & 0xF8) != TW_MR_DATA_ACK)
 300:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 304:	88 7f       	andi	r24, 0xF8	; 248
 306:	88 35       	cpi	r24, 0x58	; 88
 308:	51 f0       	breq	.+20     	; 0x31e <I2C_read_data_16bits+0x8e>
 30a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 30e:	88 7f       	andi	r24, 0xF8	; 248
 310:	80 35       	cpi	r24, 0x50	; 80
 312:	29 f0       	breq	.+10     	; 0x31e <I2C_read_data_16bits+0x8e>
	{
		I2C_Stop();	// Detener la recepcion
 314:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
		return 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	28 c0       	rjmp	.+80     	; 0x36e <I2C_read_data_16bits+0xde>
	}
	
	// Lee dato recibido (byte alto)
	uint8_t byte_alto = TWDR;
 31e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
	// Lee el byte bajo del Slave
	TWCR = (1<<TWEN)|(1<<TWINT);
 322:	84 e8       	ldi	r24, 0x84	; 132
 324:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete la recepcion
 328:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 32c:	88 23       	and	r24, r24
 32e:	e4 f7       	brge	.-8      	; 0x328 <I2C_read_data_16bits+0x98>
	
	// Verifica la recepcion
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK && (TWSR & 0xF8) != TW_MR_DATA_ACK)
 330:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 334:	88 7f       	andi	r24, 0xF8	; 248
 336:	88 35       	cpi	r24, 0x58	; 88
 338:	51 f0       	breq	.+20     	; 0x34e <I2C_read_data_16bits+0xbe>
 33a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 33e:	88 7f       	andi	r24, 0xF8	; 248
 340:	80 35       	cpi	r24, 0x50	; 80
 342:	29 f0       	breq	.+10     	; 0x34e <I2C_read_data_16bits+0xbe>
	{
		I2C_Stop();	// Detener la recepcion
 344:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
		return 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	10 c0       	rjmp	.+32     	; 0x36e <I2C_read_data_16bits+0xde>
	}
	
	// Lee dato recibido (byte bajo)
	uint8_t byte_bajo = TWDR;
 34e:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
	// Combina los bytes para formar un valor de 16 bits
	*dato = (uint16_t)byte_alto << 8 | byte_bajo;
 352:	89 2f       	mov	r24, r25
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	98 2f       	mov	r25, r24
 358:	88 27       	eor	r24, r24
 35a:	82 2b       	or	r24, r18
 35c:	99 83       	std	Y+1, r25	; 0x01
 35e:	88 83       	st	Y, r24
	
	I2C_Stop();
 360:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Stop>
	
	return *dato;
 364:	88 81       	ld	r24, Y
 366:	99 81       	ldd	r25, Y+1	; 0x01
 368:	02 c0       	rjmp	.+4      	; 0x36e <I2C_read_data_16bits+0xde>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete
	
	// Verifica la condicion de start
	if ((TWSR & 0xF8) != TW_START)
	{
		return 1;	// No se pudo iniciar la condicion de start
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
	*dato = (uint16_t)byte_alto << 8 | byte_bajo;
	
	I2C_Stop();
	
	return *dato;
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
 374:	80 ff       	sbrs	r24, 0
 376:	04 c0       	rjmp	.+8      	; 0x380 <dato_a_mostrar+0xc>
	PORTD |= (1<<0);
 378:	9b b1       	in	r25, 0x0b	; 11
 37a:	91 60       	ori	r25, 0x01	; 1
 37c:	9b b9       	out	0x0b, r25	; 11
 37e:	03 c0       	rjmp	.+6      	; 0x386 <dato_a_mostrar+0x12>
	else
	PORTD &= ~(1<<0);
 380:	9b b1       	in	r25, 0x0b	; 11
 382:	9e 7f       	andi	r25, 0xFE	; 254
 384:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
 386:	81 ff       	sbrs	r24, 1
 388:	04 c0       	rjmp	.+8      	; 0x392 <dato_a_mostrar+0x1e>
	PORTD |= (1<<1);
 38a:	9b b1       	in	r25, 0x0b	; 11
 38c:	92 60       	ori	r25, 0x02	; 2
 38e:	9b b9       	out	0x0b, r25	; 11
 390:	03 c0       	rjmp	.+6      	; 0x398 <dato_a_mostrar+0x24>
	else
	PORTD &= ~(1<<1);
 392:	9b b1       	in	r25, 0x0b	; 11
 394:	9d 7f       	andi	r25, 0xFD	; 253
 396:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 4)				//0000 0100
 398:	82 ff       	sbrs	r24, 2
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 39c:	9b b1       	in	r25, 0x0b	; 11
 39e:	94 60       	ori	r25, 0x04	; 4
 3a0:	9b b9       	out	0x0b, r25	; 11
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 3a4:	9b b1       	in	r25, 0x0b	; 11
 3a6:	9b 7f       	andi	r25, 0xFB	; 251
 3a8:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 3aa:	83 ff       	sbrs	r24, 3
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 3ae:	9b b1       	in	r25, 0x0b	; 11
 3b0:	98 60       	ori	r25, 0x08	; 8
 3b2:	9b b9       	out	0x0b, r25	; 11
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 3b6:	9b b1       	in	r25, 0x0b	; 11
 3b8:	97 7f       	andi	r25, 0xF7	; 247
 3ba:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 3bc:	84 ff       	sbrs	r24, 4
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 3c0:	9b b1       	in	r25, 0x0b	; 11
 3c2:	90 61       	ori	r25, 0x10	; 16
 3c4:	9b b9       	out	0x0b, r25	; 11
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 3c8:	9b b1       	in	r25, 0x0b	; 11
 3ca:	9f 7e       	andi	r25, 0xEF	; 239
 3cc:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 3ce:	85 ff       	sbrs	r24, 5
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 3d2:	9b b1       	in	r25, 0x0b	; 11
 3d4:	90 62       	ori	r25, 0x20	; 32
 3d6:	9b b9       	out	0x0b, r25	; 11
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 3da:	9b b1       	in	r25, 0x0b	; 11
 3dc:	9f 7d       	andi	r25, 0xDF	; 223
 3de:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 3e0:	86 ff       	sbrs	r24, 6
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 3e4:	9b b1       	in	r25, 0x0b	; 11
 3e6:	90 64       	ori	r25, 0x40	; 64
 3e8:	9b b9       	out	0x0b, r25	; 11
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 3ec:	9b b1       	in	r25, 0x0b	; 11
 3ee:	9f 7b       	andi	r25, 0xBF	; 191
 3f0:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 3f2:	88 23       	and	r24, r24
 3f4:	24 f4       	brge	.+8      	; 0x3fe <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 3f6:	8b b1       	in	r24, 0x0b	; 11
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8b b9       	out	0x0b, r24	; 11
 3fc:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 3fe:	8b b1       	in	r24, 0x0b	; 11
 400:	8f 77       	andi	r24, 0x7F	; 127
 402:	8b b9       	out	0x0b, r24	; 11
 404:	08 95       	ret

00000406 <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 406:	95 b1       	in	r25, 0x05	; 5
 408:	9e 7f       	andi	r25, 0xFE	; 254
 40a:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 40c:	0e 94 ba 01 	call	0x374	; 0x374 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 410:	85 b1       	in	r24, 0x05	; 5
 412:	82 60       	ori	r24, 0x02	; 2
 414:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 416:	8f e9       	ldi	r24, 0x9F	; 159
 418:	9f e0       	ldi	r25, 0x0F	; 15
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <inicio+0x14>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <inicio+0x1a>
 420:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 422:	85 b1       	in	r24, 0x05	; 5
 424:	8d 7f       	andi	r24, 0xFD	; 253
 426:	85 b9       	out	0x05, r24	; 5
 428:	8f e9       	ldi	r24, 0x9F	; 159
 42a:	9f e0       	ldi	r25, 0x0F	; 15
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <inicio+0x26>
 430:	00 c0       	rjmp	.+0      	; 0x432 <inicio+0x2c>
 432:	00 00       	nop
 434:	08 95       	ret

00000436 <Lcd_Init8bits>:

#include "LCD8.h"

void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 436:	85 b1       	in	r24, 0x05	; 5
 438:	8e 7f       	andi	r24, 0xFE	; 254
 43a:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 43c:	85 b1       	in	r24, 0x05	; 5
 43e:	8d 7f       	andi	r24, 0xFD	; 253
 440:	85 b9       	out	0x05, r24	; 5
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	89 ef       	ldi	r24, 0xF9	; 249
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <Lcd_Init8bits+0x12>
 450:	00 c0       	rjmp	.+0      	; 0x452 <Lcd_Init8bits+0x1c>
 452:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 454:	80 e3       	ldi	r24, 0x30	; 48
 456:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
 45a:	8f e1       	ldi	r24, 0x1F	; 31
 45c:	9e e4       	ldi	r25, 0x4E	; 78
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <Lcd_Init8bits+0x28>
 462:	00 c0       	rjmp	.+0      	; 0x464 <Lcd_Init8bits+0x2e>
 464:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 466:	80 e3       	ldi	r24, 0x30	; 48
 468:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
 46c:	8f e1       	ldi	r24, 0x1F	; 31
 46e:	9e e4       	ldi	r25, 0x4E	; 78
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <Lcd_Init8bits+0x3a>
 474:	00 c0       	rjmp	.+0      	; 0x476 <Lcd_Init8bits+0x40>
 476:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 478:	80 e3       	ldi	r24, 0x30	; 48
 47a:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
 47e:	8f e3       	ldi	r24, 0x3F	; 63
 480:	9c e9       	ldi	r25, 0x9C	; 156
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <Lcd_Init8bits+0x4c>
 486:	00 c0       	rjmp	.+0      	; 0x488 <Lcd_Init8bits+0x52>
 488:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 48a:	88 e3       	ldi	r24, 0x38	; 56
 48c:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 490:	8c e0       	ldi	r24, 0x0C	; 12
 492:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 49c:	86 e0       	ldi	r24, 0x06	; 6
 49e:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
 4a2:	08 95       	ret

000004a4 <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
 4aa:	08 95       	ret

000004ac <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 4ac:	81 11       	cpse	r24, r1
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	86 0f       	add	r24, r22
 4b4:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
 4b8:	08 95       	ret
	
	else if(a == 1)
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 4be:	80 ec       	ldi	r24, 0xC0	; 192
 4c0:	86 0f       	add	r24, r22
 4c2:	0e 94 03 02 	call	0x406	; 0x406 <inicio>
 4c6:	08 95       	ret

000004c8 <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 4c8:	95 b1       	in	r25, 0x05	; 5
 4ca:	91 60       	ori	r25, 0x01	; 1
 4cc:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 4ce:	0e 94 ba 01 	call	0x374	; 0x374 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 4d2:	85 b1       	in	r24, 0x05	; 5
 4d4:	82 60       	ori	r24, 0x02	; 2
 4d6:	85 b9       	out	0x05, r24	; 5
 4d8:	8f e9       	ldi	r24, 0x9F	; 159
 4da:	9f e0       	ldi	r25, 0x0F	; 15
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <Lcd_Write_Char+0x14>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <Lcd_Write_Char+0x1a>
 4e2:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 4e4:	85 b1       	in	r24, 0x05	; 5
 4e6:	8d 7f       	andi	r24, 0xFD	; 253
 4e8:	85 b9       	out	0x05, r24	; 5
 4ea:	8f e9       	ldi	r24, 0x9F	; 159
 4ec:	9f e0       	ldi	r25, 0x0F	; 15
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <Lcd_Write_Char+0x26>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <Lcd_Write_Char+0x2c>
 4f4:	00 00       	nop
 4f6:	08 95       	ret

000004f8 <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 502:	c0 e0       	ldi	r28, 0x00	; 0
 504:	d0 e0       	ldi	r29, 0x00	; 0
 506:	03 c0       	rjmp	.+6      	; 0x50e <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 508:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 50c:	21 96       	adiw	r28, 0x01	; 1
 50e:	f8 01       	movw	r30, r16
 510:	ec 0f       	add	r30, r28
 512:	fd 1f       	adc	r31, r29
 514:	80 81       	ld	r24, Z
 516:	81 11       	cpse	r24, r1
 518:	f7 cf       	rjmp	.-18     	; 0x508 <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <main>:



int main(void)
{
    cli();
 524:	f8 94       	cli
	
	DDRD = 0xFF;	// Puerto D como Output (LCD)
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;	// Puerto B como Output
 52a:	84 b9       	out	0x04, r24	; 4
	
	UCSR0B = 0;		// Usar los pines TX y RX como digitales
 52c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	Lcd_Clear();
 530:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Lcd_Clear>
	Lcd_Init8bits();
 534:	0e 94 1b 02 	call	0x436	; 0x436 <Lcd_Init8bits>
	Lcd_Clear();
 538:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Lcd_Clear>
	I2C_Config_MASTER(4,200000);	// Prescaler = 4 , 200kHz de comunicacion
 53c:	40 e4       	ldi	r20, 0x40	; 64
 53e:	5d e0       	ldi	r21, 0x0D	; 13
 540:	63 e0       	ldi	r22, 0x03	; 3
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Config_MASTER>
	
	sei();
 54a:	78 94       	sei
 54c:	8f e3       	ldi	r24, 0x3F	; 63
 54e:	9c e9       	ldi	r25, 0x9C	; 156
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <main+0x2c>
 554:	00 c0       	rjmp	.+0      	; 0x556 <main+0x32>
 556:	00 00       	nop
    while (1) 
    {
		_delay_ms(10);
		
		// Menu a mostrar en la LCD
		Lcd_Set_Cursor(0,0);
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	0e 94 56 02 	call	0x4ac	; 0x4ac <Lcd_Set_Cursor>
		Lcd_Write_String("S1: ");
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Lcd_Write_String>
		Lcd_Set_Cursor(0,7);
 568:	67 e0       	ldi	r22, 0x07	; 7
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 56 02 	call	0x4ac	; 0x4ac <Lcd_Set_Cursor>
		Lcd_Write_String("S2: ");
 570:	85 e0       	ldi	r24, 0x05	; 5
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Lcd_Write_String>
		Lcd_Set_Cursor(0, 13);
 578:	6d e0       	ldi	r22, 0x0D	; 13
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 56 02 	call	0x4ac	; 0x4ac <Lcd_Set_Cursor>
		Lcd_Write_String("S3: ");
 580:	8a e0       	ldi	r24, 0x0A	; 10
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Lcd_Write_String>
		
		
	
		dato1 = I2C_read_data(Slave1, &dato1); // Lee dato del Slave 1 y lo almacena en la variable
 588:	61 e2       	ldi	r22, 0x21	; 33
 58a:	71 e0       	ldi	r23, 0x01	; 1
 58c:	80 e2       	ldi	r24, 0x20	; 32
 58e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_read_data>
 592:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <dato1>
		dato2 = I2C_read_data(Slave2, &dato2);	// Lee dato del Slave 2 y lo almacena en la variable
 596:	62 e2       	ldi	r22, 0x22	; 34
 598:	71 e0       	ldi	r23, 0x01	; 1
 59a:	82 e2       	ldi	r24, 0x22	; 34
 59c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_read_data>
 5a0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dato2>
		
		// Muestra los valores en LCD del sensor de metales
		Lcd_Set_Cursor(1,8);
 5a4:	68 e0       	ldi	r22, 0x08	; 8
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	0e 94 56 02 	call	0x4ac	; 0x4ac <Lcd_Set_Cursor>
		if (dato2<THRESHOLD)
 5ac:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dato2>
 5b0:	8a 3f       	cpi	r24, 0xFA	; 250
 5b2:	28 f4       	brcc	.+10     	; 0x5be <main+0x9a>
		{
			Lcd_Write_String("1");
 5b4:	8f e0       	ldi	r24, 0x0F	; 15
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Lcd_Write_String>
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <main+0xa2>
		} else {
			Lcd_Write_String("0");
 5be:	81 e1       	ldi	r24, 0x11	; 17
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Lcd_Write_String>
		}
		
		// Muestra los valores en LCD del sensor ultrasonico en cm
		Lcd_Set_Cursor(1,0);
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 56 02 	call	0x4ac	; 0x4ac <Lcd_Set_Cursor>
		snprintf(buffer,sizeof(buffer), "%03d", dato1);	// Convierte los datos en una cadena de caracteres
 5ce:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <dato1>
 5d2:	1f 92       	push	r1
 5d4:	8f 93       	push	r24
 5d6:	83 e1       	ldi	r24, 0x13	; 19
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	9f 93       	push	r25
 5dc:	8f 93       	push	r24
 5de:	1f 92       	push	r1
 5e0:	1e e1       	ldi	r17, 0x1E	; 30
 5e2:	1f 93       	push	r17
 5e4:	c7 e2       	ldi	r28, 0x27	; 39
 5e6:	d1 e0       	ldi	r29, 0x01	; 1
 5e8:	df 93       	push	r29
 5ea:	cf 93       	push	r28
 5ec:	0e 94 5e 03 	call	0x6bc	; 0x6bc <snprintf>
		Lcd_Write_String(buffer);
 5f0:	ce 01       	movw	r24, r28
 5f2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Lcd_Write_String>
	
		
		dato3 = I2C_read_data_16bits(Slave3, &dato3);
 5f6:	65 e2       	ldi	r22, 0x25	; 37
 5f8:	71 e0       	ldi	r23, 0x01	; 1
 5fa:	88 e4       	ldi	r24, 0x48	; 72
 5fc:	0e 94 48 01 	call	0x290	; 0x290 <I2C_read_data_16bits>
 600:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <dato3>
 604:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <dato3+0x1>
		temp = dato3/256;	
 608:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <temp>
 60c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <temp+0x1>
		
		// Muestra la lectura en LCD
		Lcd_Set_Cursor(1,13);
 610:	6d e0       	ldi	r22, 0x0D	; 13
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 56 02 	call	0x4ac	; 0x4ac <Lcd_Set_Cursor>
		snprintf(buffer,sizeof(buffer), "%02d", temp);
 618:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <temp+0x1>
 61c:	8f 93       	push	r24
 61e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <temp>
 622:	8f 93       	push	r24
 624:	88 e1       	ldi	r24, 0x18	; 24
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	9f 93       	push	r25
 62a:	8f 93       	push	r24
 62c:	1f 92       	push	r1
 62e:	1f 93       	push	r17
 630:	df 93       	push	r29
 632:	cf 93       	push	r28
 634:	0e 94 5e 03 	call	0x6bc	; 0x6bc <snprintf>
		Lcd_Write_String(buffer);
 638:	ce 01       	movw	r24, r28
 63a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Lcd_Write_String>
		
		// Envia el valor de la temperatura al esclavo
		I2C_esclavo(&temp, Slave2);
 63e:	c3 e2       	ldi	r28, 0x23	; 35
 640:	d1 e0       	ldi	r29, 0x01	; 1
 642:	62 e2       	ldi	r22, 0x22	; 34
 644:	8c 2f       	mov	r24, r28
 646:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_esclavo>
		
		// Envia los tres datos de los sensores al esp32
		I2C_esclavo(dato1, Slave4);		// Envia dato de sensor ultrasonico a esp32
 64a:	68 e1       	ldi	r22, 0x18	; 24
 64c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <dato1>
 650:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_esclavo>
		I2C_esclavo(dato2, Slave4);		// Envia dato de sensor de metales a esp32
 654:	68 e1       	ldi	r22, 0x18	; 24
 656:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dato2>
 65a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_esclavo>
		I2C_esclavo(temp, Slave4);		// Envia dato de sensor de temperatura a esp32
 65e:	68 e1       	ldi	r22, 0x18	; 24
 660:	88 81       	ld	r24, Y
 662:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_esclavo>
    }
 666:	8d b7       	in	r24, 0x3d	; 61
 668:	9e b7       	in	r25, 0x3e	; 62
 66a:	40 96       	adiw	r24, 0x10	; 16
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	9e bf       	out	0x3e, r25	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	8d bf       	out	0x3d, r24	; 61
 676:	6a cf       	rjmp	.-300    	; 0x54c <main+0x28>

00000678 <__udivmodsi4>:
 678:	a1 e2       	ldi	r26, 0x21	; 33
 67a:	1a 2e       	mov	r1, r26
 67c:	aa 1b       	sub	r26, r26
 67e:	bb 1b       	sub	r27, r27
 680:	fd 01       	movw	r30, r26
 682:	0d c0       	rjmp	.+26     	; 0x69e <__udivmodsi4_ep>

00000684 <__udivmodsi4_loop>:
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	ee 1f       	adc	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	a2 17       	cp	r26, r18
 68e:	b3 07       	cpc	r27, r19
 690:	e4 07       	cpc	r30, r20
 692:	f5 07       	cpc	r31, r21
 694:	20 f0       	brcs	.+8      	; 0x69e <__udivmodsi4_ep>
 696:	a2 1b       	sub	r26, r18
 698:	b3 0b       	sbc	r27, r19
 69a:	e4 0b       	sbc	r30, r20
 69c:	f5 0b       	sbc	r31, r21

0000069e <__udivmodsi4_ep>:
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	1a 94       	dec	r1
 6a8:	69 f7       	brne	.-38     	; 0x684 <__udivmodsi4_loop>
 6aa:	60 95       	com	r22
 6ac:	70 95       	com	r23
 6ae:	80 95       	com	r24
 6b0:	90 95       	com	r25
 6b2:	9b 01       	movw	r18, r22
 6b4:	ac 01       	movw	r20, r24
 6b6:	bd 01       	movw	r22, r26
 6b8:	cf 01       	movw	r24, r30
 6ba:	08 95       	ret

000006bc <snprintf>:
 6bc:	ae e0       	ldi	r26, 0x0E	; 14
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	e4 e6       	ldi	r30, 0x64	; 100
 6c2:	f3 e0       	ldi	r31, 0x03	; 3
 6c4:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__prologue_saves__+0x1c>
 6c8:	0d 89       	ldd	r16, Y+21	; 0x15
 6ca:	1e 89       	ldd	r17, Y+22	; 0x16
 6cc:	8f 89       	ldd	r24, Y+23	; 0x17
 6ce:	98 8d       	ldd	r25, Y+24	; 0x18
 6d0:	26 e0       	ldi	r18, 0x06	; 6
 6d2:	2c 83       	std	Y+4, r18	; 0x04
 6d4:	1a 83       	std	Y+2, r17	; 0x02
 6d6:	09 83       	std	Y+1, r16	; 0x01
 6d8:	97 ff       	sbrs	r25, 7
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <snprintf+0x24>
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	90 e8       	ldi	r25, 0x80	; 128
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	9e 83       	std	Y+6, r25	; 0x06
 6e4:	8d 83       	std	Y+5, r24	; 0x05
 6e6:	ae 01       	movw	r20, r28
 6e8:	45 5e       	subi	r20, 0xE5	; 229
 6ea:	5f 4f       	sbci	r21, 0xFF	; 255
 6ec:	69 8d       	ldd	r22, Y+25	; 0x19
 6ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
 6f0:	ce 01       	movw	r24, r28
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	0e 94 8e 03 	call	0x71c	; 0x71c <vfprintf>
 6f8:	4d 81       	ldd	r20, Y+5	; 0x05
 6fa:	5e 81       	ldd	r21, Y+6	; 0x06
 6fc:	57 fd       	sbrc	r21, 7
 6fe:	0a c0       	rjmp	.+20     	; 0x714 <snprintf+0x58>
 700:	2f 81       	ldd	r18, Y+7	; 0x07
 702:	38 85       	ldd	r19, Y+8	; 0x08
 704:	42 17       	cp	r20, r18
 706:	53 07       	cpc	r21, r19
 708:	0c f4       	brge	.+2      	; 0x70c <snprintf+0x50>
 70a:	9a 01       	movw	r18, r20
 70c:	f8 01       	movw	r30, r16
 70e:	e2 0f       	add	r30, r18
 710:	f3 1f       	adc	r31, r19
 712:	10 82       	st	Z, r1
 714:	2e 96       	adiw	r28, 0x0e	; 14
 716:	e4 e0       	ldi	r30, 0x04	; 4
 718:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__epilogue_restores__+0x1c>

0000071c <vfprintf>:
 71c:	ab e0       	ldi	r26, 0x0B	; 11
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	e4 e9       	ldi	r30, 0x94	; 148
 722:	f3 e0       	ldi	r31, 0x03	; 3
 724:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__prologue_saves__>
 728:	6c 01       	movw	r12, r24
 72a:	7b 01       	movw	r14, r22
 72c:	8a 01       	movw	r16, r20
 72e:	fc 01       	movw	r30, r24
 730:	17 82       	std	Z+7, r1	; 0x07
 732:	16 82       	std	Z+6, r1	; 0x06
 734:	83 81       	ldd	r24, Z+3	; 0x03
 736:	81 ff       	sbrs	r24, 1
 738:	cc c1       	rjmp	.+920    	; 0xad2 <__stack+0x1d3>
 73a:	ce 01       	movw	r24, r28
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	3c 01       	movw	r6, r24
 740:	f6 01       	movw	r30, r12
 742:	93 81       	ldd	r25, Z+3	; 0x03
 744:	f7 01       	movw	r30, r14
 746:	93 fd       	sbrc	r25, 3
 748:	85 91       	lpm	r24, Z+
 74a:	93 ff       	sbrs	r25, 3
 74c:	81 91       	ld	r24, Z+
 74e:	7f 01       	movw	r14, r30
 750:	88 23       	and	r24, r24
 752:	09 f4       	brne	.+2      	; 0x756 <vfprintf+0x3a>
 754:	ba c1       	rjmp	.+884    	; 0xaca <__stack+0x1cb>
 756:	85 32       	cpi	r24, 0x25	; 37
 758:	39 f4       	brne	.+14     	; 0x768 <vfprintf+0x4c>
 75a:	93 fd       	sbrc	r25, 3
 75c:	85 91       	lpm	r24, Z+
 75e:	93 ff       	sbrs	r25, 3
 760:	81 91       	ld	r24, Z+
 762:	7f 01       	movw	r14, r30
 764:	85 32       	cpi	r24, 0x25	; 37
 766:	29 f4       	brne	.+10     	; 0x772 <vfprintf+0x56>
 768:	b6 01       	movw	r22, r12
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 770:	e7 cf       	rjmp	.-50     	; 0x740 <vfprintf+0x24>
 772:	91 2c       	mov	r9, r1
 774:	21 2c       	mov	r2, r1
 776:	31 2c       	mov	r3, r1
 778:	ff e1       	ldi	r31, 0x1F	; 31
 77a:	f3 15       	cp	r31, r3
 77c:	d8 f0       	brcs	.+54     	; 0x7b4 <vfprintf+0x98>
 77e:	8b 32       	cpi	r24, 0x2B	; 43
 780:	79 f0       	breq	.+30     	; 0x7a0 <vfprintf+0x84>
 782:	38 f4       	brcc	.+14     	; 0x792 <vfprintf+0x76>
 784:	80 32       	cpi	r24, 0x20	; 32
 786:	79 f0       	breq	.+30     	; 0x7a6 <vfprintf+0x8a>
 788:	83 32       	cpi	r24, 0x23	; 35
 78a:	a1 f4       	brne	.+40     	; 0x7b4 <vfprintf+0x98>
 78c:	23 2d       	mov	r18, r3
 78e:	20 61       	ori	r18, 0x10	; 16
 790:	1d c0       	rjmp	.+58     	; 0x7cc <vfprintf+0xb0>
 792:	8d 32       	cpi	r24, 0x2D	; 45
 794:	61 f0       	breq	.+24     	; 0x7ae <vfprintf+0x92>
 796:	80 33       	cpi	r24, 0x30	; 48
 798:	69 f4       	brne	.+26     	; 0x7b4 <vfprintf+0x98>
 79a:	23 2d       	mov	r18, r3
 79c:	21 60       	ori	r18, 0x01	; 1
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <vfprintf+0xb0>
 7a0:	83 2d       	mov	r24, r3
 7a2:	82 60       	ori	r24, 0x02	; 2
 7a4:	38 2e       	mov	r3, r24
 7a6:	e3 2d       	mov	r30, r3
 7a8:	e4 60       	ori	r30, 0x04	; 4
 7aa:	3e 2e       	mov	r3, r30
 7ac:	2a c0       	rjmp	.+84     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ae:	f3 2d       	mov	r31, r3
 7b0:	f8 60       	ori	r31, 0x08	; 8
 7b2:	1d c0       	rjmp	.+58     	; 0x7ee <vfprintf+0xd2>
 7b4:	37 fc       	sbrc	r3, 7
 7b6:	2d c0       	rjmp	.+90     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7b8:	20 ed       	ldi	r18, 0xD0	; 208
 7ba:	28 0f       	add	r18, r24
 7bc:	2a 30       	cpi	r18, 0x0A	; 10
 7be:	40 f0       	brcs	.+16     	; 0x7d0 <vfprintf+0xb4>
 7c0:	8e 32       	cpi	r24, 0x2E	; 46
 7c2:	b9 f4       	brne	.+46     	; 0x7f2 <vfprintf+0xd6>
 7c4:	36 fc       	sbrc	r3, 6
 7c6:	81 c1       	rjmp	.+770    	; 0xaca <__stack+0x1cb>
 7c8:	23 2d       	mov	r18, r3
 7ca:	20 64       	ori	r18, 0x40	; 64
 7cc:	32 2e       	mov	r3, r18
 7ce:	19 c0       	rjmp	.+50     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d0:	36 fe       	sbrs	r3, 6
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <vfprintf+0xc4>
 7d4:	8a e0       	ldi	r24, 0x0A	; 10
 7d6:	98 9e       	mul	r9, r24
 7d8:	20 0d       	add	r18, r0
 7da:	11 24       	eor	r1, r1
 7dc:	92 2e       	mov	r9, r18
 7de:	11 c0       	rjmp	.+34     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e0:	ea e0       	ldi	r30, 0x0A	; 10
 7e2:	2e 9e       	mul	r2, r30
 7e4:	20 0d       	add	r18, r0
 7e6:	11 24       	eor	r1, r1
 7e8:	22 2e       	mov	r2, r18
 7ea:	f3 2d       	mov	r31, r3
 7ec:	f0 62       	ori	r31, 0x20	; 32
 7ee:	3f 2e       	mov	r3, r31
 7f0:	08 c0       	rjmp	.+16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f2:	8c 36       	cpi	r24, 0x6C	; 108
 7f4:	21 f4       	brne	.+8      	; 0x7fe <vfprintf+0xe2>
 7f6:	83 2d       	mov	r24, r3
 7f8:	80 68       	ori	r24, 0x80	; 128
 7fa:	38 2e       	mov	r3, r24
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	88 36       	cpi	r24, 0x68	; 104
 800:	41 f4       	brne	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 802:	f7 01       	movw	r30, r14
 804:	93 fd       	sbrc	r25, 3
 806:	85 91       	lpm	r24, Z+
 808:	93 ff       	sbrs	r25, 3
 80a:	81 91       	ld	r24, Z+
 80c:	7f 01       	movw	r14, r30
 80e:	81 11       	cpse	r24, r1
 810:	b3 cf       	rjmp	.-154    	; 0x778 <vfprintf+0x5c>
 812:	98 2f       	mov	r25, r24
 814:	9f 7d       	andi	r25, 0xDF	; 223
 816:	95 54       	subi	r25, 0x45	; 69
 818:	93 30       	cpi	r25, 0x03	; 3
 81a:	28 f4       	brcc	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81c:	0c 5f       	subi	r16, 0xFC	; 252
 81e:	1f 4f       	sbci	r17, 0xFF	; 255
 820:	9f e3       	ldi	r25, 0x3F	; 63
 822:	99 83       	std	Y+1, r25	; 0x01
 824:	0d c0       	rjmp	.+26     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 826:	83 36       	cpi	r24, 0x63	; 99
 828:	31 f0       	breq	.+12     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82a:	83 37       	cpi	r24, 0x73	; 115
 82c:	71 f0       	breq	.+28     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 82e:	83 35       	cpi	r24, 0x53	; 83
 830:	09 f0       	breq	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	59 c0       	rjmp	.+178    	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 834:	21 c0       	rjmp	.+66     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 836:	f8 01       	movw	r30, r16
 838:	80 81       	ld	r24, Z
 83a:	89 83       	std	Y+1, r24	; 0x01
 83c:	0e 5f       	subi	r16, 0xFE	; 254
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	88 24       	eor	r8, r8
 842:	83 94       	inc	r8
 844:	91 2c       	mov	r9, r1
 846:	53 01       	movw	r10, r6
 848:	13 c0       	rjmp	.+38     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 84a:	28 01       	movw	r4, r16
 84c:	f2 e0       	ldi	r31, 0x02	; 2
 84e:	4f 0e       	add	r4, r31
 850:	51 1c       	adc	r5, r1
 852:	f8 01       	movw	r30, r16
 854:	a0 80       	ld	r10, Z
 856:	b1 80       	ldd	r11, Z+1	; 0x01
 858:	36 fe       	sbrs	r3, 6
 85a:	03 c0       	rjmp	.+6      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 85c:	69 2d       	mov	r22, r9
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	02 c0       	rjmp	.+4      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 862:	6f ef       	ldi	r22, 0xFF	; 255
 864:	7f ef       	ldi	r23, 0xFF	; 255
 866:	c5 01       	movw	r24, r10
 868:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <strnlen>
 86c:	4c 01       	movw	r8, r24
 86e:	82 01       	movw	r16, r4
 870:	f3 2d       	mov	r31, r3
 872:	ff 77       	andi	r31, 0x7F	; 127
 874:	3f 2e       	mov	r3, r31
 876:	16 c0       	rjmp	.+44     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 878:	28 01       	movw	r4, r16
 87a:	22 e0       	ldi	r18, 0x02	; 2
 87c:	42 0e       	add	r4, r18
 87e:	51 1c       	adc	r5, r1
 880:	f8 01       	movw	r30, r16
 882:	a0 80       	ld	r10, Z
 884:	b1 80       	ldd	r11, Z+1	; 0x01
 886:	36 fe       	sbrs	r3, 6
 888:	03 c0       	rjmp	.+6      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 88a:	69 2d       	mov	r22, r9
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 890:	6f ef       	ldi	r22, 0xFF	; 255
 892:	7f ef       	ldi	r23, 0xFF	; 255
 894:	c5 01       	movw	r24, r10
 896:	0e 94 6f 05 	call	0xade	; 0xade <strnlen_P>
 89a:	4c 01       	movw	r8, r24
 89c:	f3 2d       	mov	r31, r3
 89e:	f0 68       	ori	r31, 0x80	; 128
 8a0:	3f 2e       	mov	r3, r31
 8a2:	82 01       	movw	r16, r4
 8a4:	33 fc       	sbrc	r3, 3
 8a6:	1b c0       	rjmp	.+54     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8a8:	82 2d       	mov	r24, r2
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	88 16       	cp	r8, r24
 8ae:	99 06       	cpc	r9, r25
 8b0:	b0 f4       	brcc	.+44     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8b2:	b6 01       	movw	r22, r12
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 8bc:	2a 94       	dec	r2
 8be:	f4 cf       	rjmp	.-24     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8c0:	f5 01       	movw	r30, r10
 8c2:	37 fc       	sbrc	r3, 7
 8c4:	85 91       	lpm	r24, Z+
 8c6:	37 fe       	sbrs	r3, 7
 8c8:	81 91       	ld	r24, Z+
 8ca:	5f 01       	movw	r10, r30
 8cc:	b6 01       	movw	r22, r12
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 8d4:	21 10       	cpse	r2, r1
 8d6:	2a 94       	dec	r2
 8d8:	21 e0       	ldi	r18, 0x01	; 1
 8da:	82 1a       	sub	r8, r18
 8dc:	91 08       	sbc	r9, r1
 8de:	81 14       	cp	r8, r1
 8e0:	91 04       	cpc	r9, r1
 8e2:	71 f7       	brne	.-36     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8e4:	e8 c0       	rjmp	.+464    	; 0xab6 <__stack+0x1b7>
 8e6:	84 36       	cpi	r24, 0x64	; 100
 8e8:	11 f0       	breq	.+4      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8ea:	89 36       	cpi	r24, 0x69	; 105
 8ec:	41 f5       	brne	.+80     	; 0x93e <__stack+0x3f>
 8ee:	f8 01       	movw	r30, r16
 8f0:	37 fe       	sbrs	r3, 7
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <__stack+0x3>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	82 81       	ldd	r24, Z+2	; 0x02
 8fa:	93 81       	ldd	r25, Z+3	; 0x03
 8fc:	0c 5f       	subi	r16, 0xFC	; 252
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	08 c0       	rjmp	.+16     	; 0x912 <__stack+0x13>
 902:	60 81       	ld	r22, Z
 904:	71 81       	ldd	r23, Z+1	; 0x01
 906:	07 2e       	mov	r0, r23
 908:	00 0c       	add	r0, r0
 90a:	88 0b       	sbc	r24, r24
 90c:	99 0b       	sbc	r25, r25
 90e:	0e 5f       	subi	r16, 0xFE	; 254
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	f3 2d       	mov	r31, r3
 914:	ff 76       	andi	r31, 0x6F	; 111
 916:	3f 2e       	mov	r3, r31
 918:	97 ff       	sbrs	r25, 7
 91a:	09 c0       	rjmp	.+18     	; 0x92e <__stack+0x2f>
 91c:	90 95       	com	r25
 91e:	80 95       	com	r24
 920:	70 95       	com	r23
 922:	61 95       	neg	r22
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	8f 4f       	sbci	r24, 0xFF	; 255
 928:	9f 4f       	sbci	r25, 0xFF	; 255
 92a:	f0 68       	ori	r31, 0x80	; 128
 92c:	3f 2e       	mov	r3, r31
 92e:	2a e0       	ldi	r18, 0x0A	; 10
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	a3 01       	movw	r20, r6
 934:	0e 94 c1 05 	call	0xb82	; 0xb82 <__ultoa_invert>
 938:	88 2e       	mov	r8, r24
 93a:	86 18       	sub	r8, r6
 93c:	45 c0       	rjmp	.+138    	; 0x9c8 <__stack+0xc9>
 93e:	85 37       	cpi	r24, 0x75	; 117
 940:	31 f4       	brne	.+12     	; 0x94e <__stack+0x4f>
 942:	23 2d       	mov	r18, r3
 944:	2f 7e       	andi	r18, 0xEF	; 239
 946:	b2 2e       	mov	r11, r18
 948:	2a e0       	ldi	r18, 0x0A	; 10
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	25 c0       	rjmp	.+74     	; 0x998 <__stack+0x99>
 94e:	93 2d       	mov	r25, r3
 950:	99 7f       	andi	r25, 0xF9	; 249
 952:	b9 2e       	mov	r11, r25
 954:	8f 36       	cpi	r24, 0x6F	; 111
 956:	c1 f0       	breq	.+48     	; 0x988 <__stack+0x89>
 958:	18 f4       	brcc	.+6      	; 0x960 <__stack+0x61>
 95a:	88 35       	cpi	r24, 0x58	; 88
 95c:	79 f0       	breq	.+30     	; 0x97c <__stack+0x7d>
 95e:	b5 c0       	rjmp	.+362    	; 0xaca <__stack+0x1cb>
 960:	80 37       	cpi	r24, 0x70	; 112
 962:	19 f0       	breq	.+6      	; 0x96a <__stack+0x6b>
 964:	88 37       	cpi	r24, 0x78	; 120
 966:	21 f0       	breq	.+8      	; 0x970 <__stack+0x71>
 968:	b0 c0       	rjmp	.+352    	; 0xaca <__stack+0x1cb>
 96a:	e9 2f       	mov	r30, r25
 96c:	e0 61       	ori	r30, 0x10	; 16
 96e:	be 2e       	mov	r11, r30
 970:	b4 fe       	sbrs	r11, 4
 972:	0d c0       	rjmp	.+26     	; 0x98e <__stack+0x8f>
 974:	fb 2d       	mov	r31, r11
 976:	f4 60       	ori	r31, 0x04	; 4
 978:	bf 2e       	mov	r11, r31
 97a:	09 c0       	rjmp	.+18     	; 0x98e <__stack+0x8f>
 97c:	34 fe       	sbrs	r3, 4
 97e:	0a c0       	rjmp	.+20     	; 0x994 <__stack+0x95>
 980:	29 2f       	mov	r18, r25
 982:	26 60       	ori	r18, 0x06	; 6
 984:	b2 2e       	mov	r11, r18
 986:	06 c0       	rjmp	.+12     	; 0x994 <__stack+0x95>
 988:	28 e0       	ldi	r18, 0x08	; 8
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	05 c0       	rjmp	.+10     	; 0x998 <__stack+0x99>
 98e:	20 e1       	ldi	r18, 0x10	; 16
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x99>
 994:	20 e1       	ldi	r18, 0x10	; 16
 996:	32 e0       	ldi	r19, 0x02	; 2
 998:	f8 01       	movw	r30, r16
 99a:	b7 fe       	sbrs	r11, 7
 99c:	07 c0       	rjmp	.+14     	; 0x9ac <__stack+0xad>
 99e:	60 81       	ld	r22, Z
 9a0:	71 81       	ldd	r23, Z+1	; 0x01
 9a2:	82 81       	ldd	r24, Z+2	; 0x02
 9a4:	93 81       	ldd	r25, Z+3	; 0x03
 9a6:	0c 5f       	subi	r16, 0xFC	; 252
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <__stack+0xb9>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 5f       	subi	r16, 0xFE	; 254
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	a3 01       	movw	r20, r6
 9ba:	0e 94 c1 05 	call	0xb82	; 0xb82 <__ultoa_invert>
 9be:	88 2e       	mov	r8, r24
 9c0:	86 18       	sub	r8, r6
 9c2:	fb 2d       	mov	r31, r11
 9c4:	ff 77       	andi	r31, 0x7F	; 127
 9c6:	3f 2e       	mov	r3, r31
 9c8:	36 fe       	sbrs	r3, 6
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0xe7>
 9cc:	23 2d       	mov	r18, r3
 9ce:	2e 7f       	andi	r18, 0xFE	; 254
 9d0:	a2 2e       	mov	r10, r18
 9d2:	89 14       	cp	r8, r9
 9d4:	58 f4       	brcc	.+22     	; 0x9ec <__stack+0xed>
 9d6:	34 fe       	sbrs	r3, 4
 9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <__stack+0xf1>
 9da:	32 fc       	sbrc	r3, 2
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <__stack+0xf1>
 9de:	83 2d       	mov	r24, r3
 9e0:	8e 7e       	andi	r24, 0xEE	; 238
 9e2:	a8 2e       	mov	r10, r24
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__stack+0xf1>
 9e6:	b8 2c       	mov	r11, r8
 9e8:	a3 2c       	mov	r10, r3
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <__stack+0xf3>
 9ec:	b8 2c       	mov	r11, r8
 9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <__stack+0xf3>
 9f0:	b9 2c       	mov	r11, r9
 9f2:	a4 fe       	sbrs	r10, 4
 9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x115>
 9f6:	fe 01       	movw	r30, r28
 9f8:	e8 0d       	add	r30, r8
 9fa:	f1 1d       	adc	r31, r1
 9fc:	80 81       	ld	r24, Z
 9fe:	80 33       	cpi	r24, 0x30	; 48
 a00:	21 f4       	brne	.+8      	; 0xa0a <__stack+0x10b>
 a02:	9a 2d       	mov	r25, r10
 a04:	99 7e       	andi	r25, 0xE9	; 233
 a06:	a9 2e       	mov	r10, r25
 a08:	09 c0       	rjmp	.+18     	; 0xa1c <__stack+0x11d>
 a0a:	a2 fe       	sbrs	r10, 2
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <__stack+0x11b>
 a0e:	b3 94       	inc	r11
 a10:	b3 94       	inc	r11
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <__stack+0x11d>
 a14:	8a 2d       	mov	r24, r10
 a16:	86 78       	andi	r24, 0x86	; 134
 a18:	09 f0       	breq	.+2      	; 0xa1c <__stack+0x11d>
 a1a:	b3 94       	inc	r11
 a1c:	a3 fc       	sbrc	r10, 3
 a1e:	11 c0       	rjmp	.+34     	; 0xa42 <__stack+0x143>
 a20:	a0 fe       	sbrs	r10, 0
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <__stack+0x131>
 a24:	b2 14       	cp	r11, r2
 a26:	88 f4       	brcc	.+34     	; 0xa4a <__stack+0x14b>
 a28:	28 0c       	add	r2, r8
 a2a:	92 2c       	mov	r9, r2
 a2c:	9b 18       	sub	r9, r11
 a2e:	0e c0       	rjmp	.+28     	; 0xa4c <__stack+0x14d>
 a30:	b2 14       	cp	r11, r2
 a32:	60 f4       	brcc	.+24     	; 0xa4c <__stack+0x14d>
 a34:	b6 01       	movw	r22, r12
 a36:	80 e2       	ldi	r24, 0x20	; 32
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 a3e:	b3 94       	inc	r11
 a40:	f7 cf       	rjmp	.-18     	; 0xa30 <__stack+0x131>
 a42:	b2 14       	cp	r11, r2
 a44:	18 f4       	brcc	.+6      	; 0xa4c <__stack+0x14d>
 a46:	2b 18       	sub	r2, r11
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <__stack+0x14f>
 a4a:	98 2c       	mov	r9, r8
 a4c:	21 2c       	mov	r2, r1
 a4e:	a4 fe       	sbrs	r10, 4
 a50:	10 c0       	rjmp	.+32     	; 0xa72 <__stack+0x173>
 a52:	b6 01       	movw	r22, r12
 a54:	80 e3       	ldi	r24, 0x30	; 48
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 a5c:	a2 fe       	sbrs	r10, 2
 a5e:	17 c0       	rjmp	.+46     	; 0xa8e <__stack+0x18f>
 a60:	a1 fc       	sbrc	r10, 1
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <__stack+0x16b>
 a64:	88 e7       	ldi	r24, 0x78	; 120
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x16f>
 a6a:	88 e5       	ldi	r24, 0x58	; 88
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	b6 01       	movw	r22, r12
 a70:	0c c0       	rjmp	.+24     	; 0xa8a <__stack+0x18b>
 a72:	8a 2d       	mov	r24, r10
 a74:	86 78       	andi	r24, 0x86	; 134
 a76:	59 f0       	breq	.+22     	; 0xa8e <__stack+0x18f>
 a78:	a1 fe       	sbrs	r10, 1
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <__stack+0x181>
 a7c:	8b e2       	ldi	r24, 0x2B	; 43
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <__stack+0x183>
 a80:	80 e2       	ldi	r24, 0x20	; 32
 a82:	a7 fc       	sbrc	r10, 7
 a84:	8d e2       	ldi	r24, 0x2D	; 45
 a86:	b6 01       	movw	r22, r12
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 a8e:	89 14       	cp	r8, r9
 a90:	38 f4       	brcc	.+14     	; 0xaa0 <__stack+0x1a1>
 a92:	b6 01       	movw	r22, r12
 a94:	80 e3       	ldi	r24, 0x30	; 48
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 a9c:	9a 94       	dec	r9
 a9e:	f7 cf       	rjmp	.-18     	; 0xa8e <__stack+0x18f>
 aa0:	8a 94       	dec	r8
 aa2:	f3 01       	movw	r30, r6
 aa4:	e8 0d       	add	r30, r8
 aa6:	f1 1d       	adc	r31, r1
 aa8:	80 81       	ld	r24, Z
 aaa:	b6 01       	movw	r22, r12
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 ab2:	81 10       	cpse	r8, r1
 ab4:	f5 cf       	rjmp	.-22     	; 0xaa0 <__stack+0x1a1>
 ab6:	22 20       	and	r2, r2
 ab8:	09 f4       	brne	.+2      	; 0xabc <__stack+0x1bd>
 aba:	42 ce       	rjmp	.-892    	; 0x740 <vfprintf+0x24>
 abc:	b6 01       	movw	r22, r12
 abe:	80 e2       	ldi	r24, 0x20	; 32
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 85 05 	call	0xb0a	; 0xb0a <fputc>
 ac6:	2a 94       	dec	r2
 ac8:	f6 cf       	rjmp	.-20     	; 0xab6 <__stack+0x1b7>
 aca:	f6 01       	movw	r30, r12
 acc:	86 81       	ldd	r24, Z+6	; 0x06
 ace:	97 81       	ldd	r25, Z+7	; 0x07
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__stack+0x1d7>
 ad2:	8f ef       	ldi	r24, 0xFF	; 255
 ad4:	9f ef       	ldi	r25, 0xFF	; 255
 ad6:	2b 96       	adiw	r28, 0x0b	; 11
 ad8:	e2 e1       	ldi	r30, 0x12	; 18
 ada:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__epilogue_restores__>

00000ade <strnlen_P>:
 ade:	fc 01       	movw	r30, r24
 ae0:	05 90       	lpm	r0, Z+
 ae2:	61 50       	subi	r22, 0x01	; 1
 ae4:	70 40       	sbci	r23, 0x00	; 0
 ae6:	01 10       	cpse	r0, r1
 ae8:	d8 f7       	brcc	.-10     	; 0xae0 <strnlen_P+0x2>
 aea:	80 95       	com	r24
 aec:	90 95       	com	r25
 aee:	8e 0f       	add	r24, r30
 af0:	9f 1f       	adc	r25, r31
 af2:	08 95       	ret

00000af4 <strnlen>:
 af4:	fc 01       	movw	r30, r24
 af6:	61 50       	subi	r22, 0x01	; 1
 af8:	70 40       	sbci	r23, 0x00	; 0
 afa:	01 90       	ld	r0, Z+
 afc:	01 10       	cpse	r0, r1
 afe:	d8 f7       	brcc	.-10     	; 0xaf6 <strnlen+0x2>
 b00:	80 95       	com	r24
 b02:	90 95       	com	r25
 b04:	8e 0f       	add	r24, r30
 b06:	9f 1f       	adc	r25, r31
 b08:	08 95       	ret

00000b0a <fputc>:
 b0a:	0f 93       	push	r16
 b0c:	1f 93       	push	r17
 b0e:	cf 93       	push	r28
 b10:	df 93       	push	r29
 b12:	fb 01       	movw	r30, r22
 b14:	23 81       	ldd	r18, Z+3	; 0x03
 b16:	21 fd       	sbrc	r18, 1
 b18:	03 c0       	rjmp	.+6      	; 0xb20 <fputc+0x16>
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	9f ef       	ldi	r25, 0xFF	; 255
 b1e:	2c c0       	rjmp	.+88     	; 0xb78 <fputc+0x6e>
 b20:	22 ff       	sbrs	r18, 2
 b22:	16 c0       	rjmp	.+44     	; 0xb50 <fputc+0x46>
 b24:	46 81       	ldd	r20, Z+6	; 0x06
 b26:	57 81       	ldd	r21, Z+7	; 0x07
 b28:	24 81       	ldd	r18, Z+4	; 0x04
 b2a:	35 81       	ldd	r19, Z+5	; 0x05
 b2c:	42 17       	cp	r20, r18
 b2e:	53 07       	cpc	r21, r19
 b30:	44 f4       	brge	.+16     	; 0xb42 <fputc+0x38>
 b32:	a0 81       	ld	r26, Z
 b34:	b1 81       	ldd	r27, Z+1	; 0x01
 b36:	9d 01       	movw	r18, r26
 b38:	2f 5f       	subi	r18, 0xFF	; 255
 b3a:	3f 4f       	sbci	r19, 0xFF	; 255
 b3c:	31 83       	std	Z+1, r19	; 0x01
 b3e:	20 83       	st	Z, r18
 b40:	8c 93       	st	X, r24
 b42:	26 81       	ldd	r18, Z+6	; 0x06
 b44:	37 81       	ldd	r19, Z+7	; 0x07
 b46:	2f 5f       	subi	r18, 0xFF	; 255
 b48:	3f 4f       	sbci	r19, 0xFF	; 255
 b4a:	37 83       	std	Z+7, r19	; 0x07
 b4c:	26 83       	std	Z+6, r18	; 0x06
 b4e:	14 c0       	rjmp	.+40     	; 0xb78 <fputc+0x6e>
 b50:	8b 01       	movw	r16, r22
 b52:	ec 01       	movw	r28, r24
 b54:	fb 01       	movw	r30, r22
 b56:	00 84       	ldd	r0, Z+8	; 0x08
 b58:	f1 85       	ldd	r31, Z+9	; 0x09
 b5a:	e0 2d       	mov	r30, r0
 b5c:	09 95       	icall
 b5e:	89 2b       	or	r24, r25
 b60:	e1 f6       	brne	.-72     	; 0xb1a <fputc+0x10>
 b62:	d8 01       	movw	r26, r16
 b64:	16 96       	adiw	r26, 0x06	; 6
 b66:	8d 91       	ld	r24, X+
 b68:	9c 91       	ld	r25, X
 b6a:	17 97       	sbiw	r26, 0x07	; 7
 b6c:	01 96       	adiw	r24, 0x01	; 1
 b6e:	17 96       	adiw	r26, 0x07	; 7
 b70:	9c 93       	st	X, r25
 b72:	8e 93       	st	-X, r24
 b74:	16 97       	sbiw	r26, 0x06	; 6
 b76:	ce 01       	movw	r24, r28
 b78:	df 91       	pop	r29
 b7a:	cf 91       	pop	r28
 b7c:	1f 91       	pop	r17
 b7e:	0f 91       	pop	r16
 b80:	08 95       	ret

00000b82 <__ultoa_invert>:
 b82:	fa 01       	movw	r30, r20
 b84:	aa 27       	eor	r26, r26
 b86:	28 30       	cpi	r18, 0x08	; 8
 b88:	51 f1       	breq	.+84     	; 0xbde <__ultoa_invert+0x5c>
 b8a:	20 31       	cpi	r18, 0x10	; 16
 b8c:	81 f1       	breq	.+96     	; 0xbee <__ultoa_invert+0x6c>
 b8e:	e8 94       	clt
 b90:	6f 93       	push	r22
 b92:	6e 7f       	andi	r22, 0xFE	; 254
 b94:	6e 5f       	subi	r22, 0xFE	; 254
 b96:	7f 4f       	sbci	r23, 0xFF	; 255
 b98:	8f 4f       	sbci	r24, 0xFF	; 255
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	af 4f       	sbci	r26, 0xFF	; 255
 b9e:	b1 e0       	ldi	r27, 0x01	; 1
 ba0:	3e d0       	rcall	.+124    	; 0xc1e <__ultoa_invert+0x9c>
 ba2:	b4 e0       	ldi	r27, 0x04	; 4
 ba4:	3c d0       	rcall	.+120    	; 0xc1e <__ultoa_invert+0x9c>
 ba6:	67 0f       	add	r22, r23
 ba8:	78 1f       	adc	r23, r24
 baa:	89 1f       	adc	r24, r25
 bac:	9a 1f       	adc	r25, r26
 bae:	a1 1d       	adc	r26, r1
 bb0:	68 0f       	add	r22, r24
 bb2:	79 1f       	adc	r23, r25
 bb4:	8a 1f       	adc	r24, r26
 bb6:	91 1d       	adc	r25, r1
 bb8:	a1 1d       	adc	r26, r1
 bba:	6a 0f       	add	r22, r26
 bbc:	71 1d       	adc	r23, r1
 bbe:	81 1d       	adc	r24, r1
 bc0:	91 1d       	adc	r25, r1
 bc2:	a1 1d       	adc	r26, r1
 bc4:	20 d0       	rcall	.+64     	; 0xc06 <__ultoa_invert+0x84>
 bc6:	09 f4       	brne	.+2      	; 0xbca <__ultoa_invert+0x48>
 bc8:	68 94       	set
 bca:	3f 91       	pop	r19
 bcc:	2a e0       	ldi	r18, 0x0A	; 10
 bce:	26 9f       	mul	r18, r22
 bd0:	11 24       	eor	r1, r1
 bd2:	30 19       	sub	r19, r0
 bd4:	30 5d       	subi	r19, 0xD0	; 208
 bd6:	31 93       	st	Z+, r19
 bd8:	de f6       	brtc	.-74     	; 0xb90 <__ultoa_invert+0xe>
 bda:	cf 01       	movw	r24, r30
 bdc:	08 95       	ret
 bde:	46 2f       	mov	r20, r22
 be0:	47 70       	andi	r20, 0x07	; 7
 be2:	40 5d       	subi	r20, 0xD0	; 208
 be4:	41 93       	st	Z+, r20
 be6:	b3 e0       	ldi	r27, 0x03	; 3
 be8:	0f d0       	rcall	.+30     	; 0xc08 <__ultoa_invert+0x86>
 bea:	c9 f7       	brne	.-14     	; 0xbde <__ultoa_invert+0x5c>
 bec:	f6 cf       	rjmp	.-20     	; 0xbda <__ultoa_invert+0x58>
 bee:	46 2f       	mov	r20, r22
 bf0:	4f 70       	andi	r20, 0x0F	; 15
 bf2:	40 5d       	subi	r20, 0xD0	; 208
 bf4:	4a 33       	cpi	r20, 0x3A	; 58
 bf6:	18 f0       	brcs	.+6      	; 0xbfe <__ultoa_invert+0x7c>
 bf8:	49 5d       	subi	r20, 0xD9	; 217
 bfa:	31 fd       	sbrc	r19, 1
 bfc:	40 52       	subi	r20, 0x20	; 32
 bfe:	41 93       	st	Z+, r20
 c00:	02 d0       	rcall	.+4      	; 0xc06 <__ultoa_invert+0x84>
 c02:	a9 f7       	brne	.-22     	; 0xbee <__ultoa_invert+0x6c>
 c04:	ea cf       	rjmp	.-44     	; 0xbda <__ultoa_invert+0x58>
 c06:	b4 e0       	ldi	r27, 0x04	; 4
 c08:	a6 95       	lsr	r26
 c0a:	97 95       	ror	r25
 c0c:	87 95       	ror	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	ba 95       	dec	r27
 c14:	c9 f7       	brne	.-14     	; 0xc08 <__ultoa_invert+0x86>
 c16:	00 97       	sbiw	r24, 0x00	; 0
 c18:	61 05       	cpc	r22, r1
 c1a:	71 05       	cpc	r23, r1
 c1c:	08 95       	ret
 c1e:	9b 01       	movw	r18, r22
 c20:	ac 01       	movw	r20, r24
 c22:	0a 2e       	mov	r0, r26
 c24:	06 94       	lsr	r0
 c26:	57 95       	ror	r21
 c28:	47 95       	ror	r20
 c2a:	37 95       	ror	r19
 c2c:	27 95       	ror	r18
 c2e:	ba 95       	dec	r27
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__ultoa_invert+0xa2>
 c32:	62 0f       	add	r22, r18
 c34:	73 1f       	adc	r23, r19
 c36:	84 1f       	adc	r24, r20
 c38:	95 1f       	adc	r25, r21
 c3a:	a0 1d       	adc	r26, r0
 c3c:	08 95       	ret

00000c3e <__prologue_saves__>:
 c3e:	2f 92       	push	r2
 c40:	3f 92       	push	r3
 c42:	4f 92       	push	r4
 c44:	5f 92       	push	r5
 c46:	6f 92       	push	r6
 c48:	7f 92       	push	r7
 c4a:	8f 92       	push	r8
 c4c:	9f 92       	push	r9
 c4e:	af 92       	push	r10
 c50:	bf 92       	push	r11
 c52:	cf 92       	push	r12
 c54:	df 92       	push	r13
 c56:	ef 92       	push	r14
 c58:	ff 92       	push	r15
 c5a:	0f 93       	push	r16
 c5c:	1f 93       	push	r17
 c5e:	cf 93       	push	r28
 c60:	df 93       	push	r29
 c62:	cd b7       	in	r28, 0x3d	; 61
 c64:	de b7       	in	r29, 0x3e	; 62
 c66:	ca 1b       	sub	r28, r26
 c68:	db 0b       	sbc	r29, r27
 c6a:	0f b6       	in	r0, 0x3f	; 63
 c6c:	f8 94       	cli
 c6e:	de bf       	out	0x3e, r29	; 62
 c70:	0f be       	out	0x3f, r0	; 63
 c72:	cd bf       	out	0x3d, r28	; 61
 c74:	09 94       	ijmp

00000c76 <__epilogue_restores__>:
 c76:	2a 88       	ldd	r2, Y+18	; 0x12
 c78:	39 88       	ldd	r3, Y+17	; 0x11
 c7a:	48 88       	ldd	r4, Y+16	; 0x10
 c7c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c7e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c80:	7d 84       	ldd	r7, Y+13	; 0x0d
 c82:	8c 84       	ldd	r8, Y+12	; 0x0c
 c84:	9b 84       	ldd	r9, Y+11	; 0x0b
 c86:	aa 84       	ldd	r10, Y+10	; 0x0a
 c88:	b9 84       	ldd	r11, Y+9	; 0x09
 c8a:	c8 84       	ldd	r12, Y+8	; 0x08
 c8c:	df 80       	ldd	r13, Y+7	; 0x07
 c8e:	ee 80       	ldd	r14, Y+6	; 0x06
 c90:	fd 80       	ldd	r15, Y+5	; 0x05
 c92:	0c 81       	ldd	r16, Y+4	; 0x04
 c94:	1b 81       	ldd	r17, Y+3	; 0x03
 c96:	aa 81       	ldd	r26, Y+2	; 0x02
 c98:	b9 81       	ldd	r27, Y+1	; 0x01
 c9a:	ce 0f       	add	r28, r30
 c9c:	d1 1d       	adc	r29, r1
 c9e:	0f b6       	in	r0, 0x3f	; 63
 ca0:	f8 94       	cli
 ca2:	de bf       	out	0x3e, r29	; 62
 ca4:	0f be       	out	0x3f, r0	; 63
 ca6:	cd bf       	out	0x3d, r28	; 61
 ca8:	ed 01       	movw	r28, r26
 caa:	08 95       	ret

00000cac <_exit>:
 cac:	f8 94       	cli

00000cae <__stop_program>:
 cae:	ff cf       	rjmp	.-2      	; 0xcae <__stop_program>
