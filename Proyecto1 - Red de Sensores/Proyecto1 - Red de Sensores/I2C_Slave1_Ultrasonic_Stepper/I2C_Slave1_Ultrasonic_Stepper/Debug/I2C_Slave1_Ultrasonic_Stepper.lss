
I2C_Slave1_Ultrasonic_Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000664  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000006d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d56  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ea  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000739  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000508  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e4  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 23 01 	call	0x246	; 0x246 <main>
  88:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Config_SLAVE>:
	TWCR = 1 << TWEN;   //Habilita la interfaz
}

// Funcion para la configuracion del I2C Slave
void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  96:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  98:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  9a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  9e:	85 e4       	ldi	r24, 0x45	; 69
  a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a4:	08 95       	ret

000000a6 <__vector_24>:
}

/****************************************************************************************
* Interrupciones ISR
****************************************************************************************/
ISR(TWI_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	uint8_t state;
	
	// Lee el estado del bus de datos
	state = TWSR & 0xFC;
  b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  bc:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(state){
  be:	80 39       	cpi	r24, 0x90	; 144
  c0:	c9 f0       	breq	.+50     	; 0xf4 <__vector_24+0x4e>
  c2:	38 f4       	brcc	.+14     	; 0xd2 <__vector_24+0x2c>
  c4:	80 37       	cpi	r24, 0x70	; 112
  c6:	81 f0       	breq	.+32     	; 0xe8 <__vector_24+0x42>
  c8:	80 38       	cpi	r24, 0x80	; 128
  ca:	a1 f0       	breq	.+40     	; 0xf4 <__vector_24+0x4e>
  cc:	80 36       	cpi	r24, 0x60	; 96
  ce:	71 f5       	brne	.+92     	; 0x12c <__vector_24+0x86>
  d0:	0b c0       	rjmp	.+22     	; 0xe8 <__vector_24+0x42>
  d2:	88 3b       	cpi	r24, 0xB8	; 184
  d4:	c9 f0       	breq	.+50     	; 0x108 <__vector_24+0x62>
  d6:	18 f4       	brcc	.+6      	; 0xde <__vector_24+0x38>
  d8:	88 3a       	cpi	r24, 0xA8	; 168
  da:	b1 f0       	breq	.+44     	; 0x108 <__vector_24+0x62>
  dc:	27 c0       	rjmp	.+78     	; 0x12c <__vector_24+0x86>
  de:	80 3c       	cpi	r24, 0xC0	; 192
  e0:	f9 f0       	breq	.+62     	; 0x120 <__vector_24+0x7a>
  e2:	88 3c       	cpi	r24, 0xC8	; 200
  e4:	e9 f0       	breq	.+58     	; 0x120 <__vector_24+0x7a>
  e6:	22 c0       	rjmp	.+68     	; 0x12c <__vector_24+0x86>
		case 0x60:
		case 0x70:
			TWCR |= (1 << TWINT);
  e8:	ec eb       	ldi	r30, 0xBC	; 188
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
			break;
  f2:	21 c0       	rjmp	.+66     	; 0x136 <__vector_24+0x90>
		case 0x80:
		case 0x90:
			data = TWDR;  // Recibió el dato, llamada general
  f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <data>
			TWCR |= (1 << TWINT);
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
			break;
 106:	17 c0       	rjmp	.+46     	; 0x136 <__vector_24+0x90>
		case 0xA8: // SLA+R recibido, Master mode Lecture
		case 0xB8: // Dato transmitido y ACK recibido
			TWDR = distancia; // Carga el dato en el registro de datos
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <distancia>
 10c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <distancia+0x1>
 110:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA); // Listo para la próxima operación
 114:	ec eb       	ldi	r30, 0xBC	; 188
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	85 6c       	ori	r24, 0xC5	; 197
 11c:	80 83       	st	Z, r24
			break;
 11e:	0b c0       	rjmp	.+22     	; 0x136 <__vector_24+0x90>
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 120:	ec eb       	ldi	r30, 0xBC	; 188
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	84 6c       	ori	r24, 0xC4	; 196
 128:	80 83       	st	Z, r24
			break;
 12a:	05 c0       	rjmp	.+10     	; 0x136 <__vector_24+0x90>
		default: // Libera el BUS de datos
			TWCR |= (1 << TWINT) | (1 << TWSTO);
 12c:	ec eb       	ldi	r30, 0xBC	; 188
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 69       	ori	r24, 0x90	; 144
 134:	80 83       	st	Z, r24
			break;
	}
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <init_stepper>:
/****************************************************************************************
* Funciones
****************************************************************************************/
// Funcion de Inicio del motor stepper
void init_stepper(void){
	DDRB |= (1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);	// Salida IN1, IN2, IN3, IN4
 148:	84 b1       	in	r24, 0x04	; 4
 14a:	8f 60       	ori	r24, 0x0F	; 15
 14c:	84 b9       	out	0x04, r24	; 4
 14e:	08 95       	ret

00000150 <stepper_step>:
	//PORTB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));	// Inicializadas apagadas
}


void stepper_step(int steps, int direction){
	for (int i = 0; i < steps/8; i++)
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	46 c0       	rjmp	.+140    	; 0x1e2 <stepper_step+0x92>
	{
		if (direction == 1)	// Sentido Horario
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	71 05       	cpc	r23, r1
 15a:	09 f5       	brne	.+66     	; 0x19e <stepper_step+0x4e>
		{
			PORTB = (1<<PORTB0);  // Paso 1
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	ef e3       	ldi	r30, 0x3F	; 63
 162:	ff e1       	ldi	r31, 0x1F	; 31
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <stepper_step+0x14>
 168:	00 c0       	rjmp	.+0      	; 0x16a <stepper_step+0x1a>
 16a:	00 00       	nop
			_delay_ms(2);
			PORTB = (1<<PORTB1);  // Paso 2
 16c:	22 e0       	ldi	r18, 0x02	; 2
 16e:	25 b9       	out	0x05, r18	; 5
 170:	ef e3       	ldi	r30, 0x3F	; 63
 172:	ff e1       	ldi	r31, 0x1F	; 31
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <stepper_step+0x24>
 178:	00 c0       	rjmp	.+0      	; 0x17a <stepper_step+0x2a>
 17a:	00 00       	nop
			_delay_ms(2);
			PORTB = (1<<PORTB2);  // Paso 3
 17c:	24 e0       	ldi	r18, 0x04	; 4
 17e:	25 b9       	out	0x05, r18	; 5
 180:	ef e3       	ldi	r30, 0x3F	; 63
 182:	ff e1       	ldi	r31, 0x1F	; 31
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <stepper_step+0x34>
 188:	00 c0       	rjmp	.+0      	; 0x18a <stepper_step+0x3a>
 18a:	00 00       	nop
			_delay_ms(2);
			PORTB = (1<<PORTB3);  // Paso 4
 18c:	28 e0       	ldi	r18, 0x08	; 8
 18e:	25 b9       	out	0x05, r18	; 5
 190:	ef e3       	ldi	r30, 0x3F	; 63
 192:	ff e1       	ldi	r31, 0x1F	; 31
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <stepper_step+0x44>
 198:	00 c0       	rjmp	.+0      	; 0x19a <stepper_step+0x4a>
 19a:	00 00       	nop
 19c:	20 c0       	rjmp	.+64     	; 0x1de <stepper_step+0x8e>
			_delay_ms(2);
		} else {	// Sentido Antihorario
			PORTB = (1<<PORTB3);  // Paso 4
 19e:	28 e0       	ldi	r18, 0x08	; 8
 1a0:	25 b9       	out	0x05, r18	; 5
 1a2:	ef e3       	ldi	r30, 0x3F	; 63
 1a4:	ff e1       	ldi	r31, 0x1F	; 31
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <stepper_step+0x56>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <stepper_step+0x5c>
 1ac:	00 00       	nop
			_delay_ms(2);
			PORTB = (1<<PORTB2);  // Paso 3
 1ae:	24 e0       	ldi	r18, 0x04	; 4
 1b0:	25 b9       	out	0x05, r18	; 5
 1b2:	ef e3       	ldi	r30, 0x3F	; 63
 1b4:	ff e1       	ldi	r31, 0x1F	; 31
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <stepper_step+0x66>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <stepper_step+0x6c>
 1bc:	00 00       	nop
			_delay_ms(2);
			PORTB = (1<<PORTB1);  // Paso 2
 1be:	22 e0       	ldi	r18, 0x02	; 2
 1c0:	25 b9       	out	0x05, r18	; 5
 1c2:	ef e3       	ldi	r30, 0x3F	; 63
 1c4:	ff e1       	ldi	r31, 0x1F	; 31
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <stepper_step+0x76>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <stepper_step+0x7c>
 1cc:	00 00       	nop
			_delay_ms(2);
			PORTB = (1<<PORTB0);  // Paso 1
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	25 b9       	out	0x05, r18	; 5
 1d2:	ef e3       	ldi	r30, 0x3F	; 63
 1d4:	ff e1       	ldi	r31, 0x1F	; 31
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <stepper_step+0x86>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <stepper_step+0x8c>
 1dc:	00 00       	nop
	//PORTB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));	// Inicializadas apagadas
}


void stepper_step(int steps, int direction){
	for (int i = 0; i < steps/8; i++)
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	9c 01       	movw	r18, r24
 1e4:	99 23       	and	r25, r25
 1e6:	14 f4       	brge	.+4      	; 0x1ec <stepper_step+0x9c>
 1e8:	29 5f       	subi	r18, 0xF9	; 249
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	35 95       	asr	r19
 1ee:	27 95       	ror	r18
 1f0:	35 95       	asr	r19
 1f2:	27 95       	ror	r18
 1f4:	35 95       	asr	r19
 1f6:	27 95       	ror	r18
 1f8:	42 17       	cp	r20, r18
 1fa:	53 07       	cpc	r21, r19
 1fc:	0c f4       	brge	.+2      	; 0x200 <stepper_step+0xb0>
 1fe:	ab cf       	rjmp	.-170    	; 0x156 <stepper_step+0x6>
			_delay_ms(2);
			PORTB = (1<<PORTB0);  // Paso 1
			_delay_ms(2);
		}
	}
}
 200:	08 95       	ret

00000202 <stepper_rotate>:


void stepper_rotate(int angle){
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
	int direction = 1;	// Sentido horario
	if (angle < 0)
 206:	99 23       	and	r25, r25
 208:	34 f4       	brge	.+12     	; 0x216 <stepper_rotate+0x14>
	{
		angle = -angle;	// Convierte el angulo negativo en positivo
 20a:	91 95       	neg	r25
 20c:	81 95       	neg	r24
 20e:	91 09       	sbc	r25, r1
		direction = 0;
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <stepper_rotate+0x18>
	}
}


void stepper_rotate(int angle){
	int direction = 1;	// Sentido horario
 216:	c1 e0       	ldi	r28, 0x01	; 1
 218:	d0 e0       	ldi	r29, 0x00	; 0
		angle = -angle;	// Convierte el angulo negativo en positivo
		direction = 0;
	}
	
	float steps_per_degree = 64 / 5.625; // Calculate steps per degree
	int steps = (int)(angle*steps_per_degree);	// 11.25 es el angulo de paso
 21a:	bc 01       	movw	r22, r24
 21c:	99 0f       	add	r25, r25
 21e:	88 0b       	sbc	r24, r24
 220:	99 0b       	sbc	r25, r25
 222:	0e 94 37 02 	call	0x46e	; 0x46e <__floatsisf>
 226:	21 e6       	ldi	r18, 0x61	; 97
 228:	3b e0       	ldi	r19, 0x0B	; 11
 22a:	46 e3       	ldi	r20, 0x36	; 54
 22c:	51 e4       	ldi	r21, 0x41	; 65
 22e:	0e 94 c3 02 	call	0x586	; 0x586 <__mulsf3>
 232:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__fixsfsi>
 236:	dc 01       	movw	r26, r24
 238:	cb 01       	movw	r24, r22
	stepper_step(steps,direction);
 23a:	be 01       	movw	r22, r28
 23c:	0e 94 a8 00 	call	0x150	; 0x150 <stepper_step>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <main>:



int main(void)
{
    cli();
 246:	f8 94       	cli
	
	DDRD |= (1<<DDD3);	// Trigger como output
 248:	8a b1       	in	r24, 0x0a	; 10
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD2);	// Echo como input
 24e:	8a b1       	in	r24, 0x0a	; 10
 250:	8b 7f       	andi	r24, 0xFB	; 251
 252:	8a b9       	out	0x0a, r24	; 10
	
	PORTD &= ~((1<<PORTD2)|(1<<PORTD3));	// Ambos apagados
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	83 7f       	andi	r24, 0xF3	; 243
 258:	8b b9       	out	0x0b, r24	; 11
	
	TCCR1A = 0x00;
 25a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1<<CS11);	// Prescaler de 8
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	82 60       	ori	r24, 0x02	; 2
 266:	80 83       	st	Z, r24
	
	I2C_Config_SLAVE(0x20);		// Configura direccion del Slave
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Config_SLAVE>
	init_stepper();		// Configura los pines del motor stepper
 26e:	0e 94 a4 00 	call	0x148	; 0x148 <init_stepper>
	
	
	sei();
 272:	78 94       	sei
	
    while (1) 
    {
		// Generamos el pulso del TRIG
		PORTD |= (1<<PORTD3);
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	88 60       	ori	r24, 0x08	; 8
 278:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	25 e3       	ldi	r18, 0x35	; 53
 27c:	2a 95       	dec	r18
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x36>
 280:	00 00       	nop
		_delay_us(10);
		PORTD &= ~(1<<PORTD3);
 282:	8b b1       	in	r24, 0x0b	; 11
 284:	87 7f       	andi	r24, 0xF7	; 247
 286:	8b b9       	out	0x0b, r24	; 11
		
		// Esperamos la entrada en echo
		while((PIND & (1<<PIND2))==0);
 288:	4a 9b       	sbis	0x09, 2	; 9
 28a:	fe cf       	rjmp	.-4      	; 0x288 <main+0x42>
		TCNT1 = 0;
 28c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 290:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		while(PIND & (1<<PIND2));
 294:	4a 99       	sbic	0x09, 2	; 9
 296:	fe cf       	rjmp	.-4      	; 0x294 <main+0x4e>
		
		// Calculamos la distancia
		tiempo = TCNT1 * 0.5;
 298:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 29c:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 35 02 	call	0x46a	; 0x46a <__floatunsisf>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	5f e3       	ldi	r21, 0x3F	; 63
 2b0:	0e 94 c3 02 	call	0x586	; 0x586 <__mulsf3>
 2b4:	0e 94 06 02 	call	0x40c	; 0x40c <__fixunssfsi>
 2b8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2bc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
		distancia = tiempo/58.3;
 2c0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 35 02 	call	0x46a	; 0x46a <__floatunsisf>
 2d0:	23 e3       	ldi	r18, 0x33	; 51
 2d2:	33 e3       	ldi	r19, 0x33	; 51
 2d4:	49 e6       	ldi	r20, 0x69	; 105
 2d6:	52 e4       	ldi	r21, 0x42	; 66
 2d8:	0e 94 8d 01 	call	0x31a	; 0x31a <__divsf3>
 2dc:	0e 94 06 02 	call	0x40c	; 0x40c <__fixunssfsi>
 2e0:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <distancia+0x1>
 2e4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <distancia>
		
		
		if (distancia <= 8)	// Distancia menor o igual a 8cm
 2e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <distancia>
 2ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <distancia+0x1>
 2f0:	09 97       	sbiw	r24, 0x09	; 9
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <main+0xb0>
 2f4:	bf cf       	rjmp	.-130    	; 0x274 <main+0x2e>
		{
			stepper_rotate(90);		// Mueve el motor 90 grados en sentido horario
 2f6:	8a e5       	ldi	r24, 0x5A	; 90
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 01 01 	call	0x202	; 0x202 <stepper_rotate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	93 e2       	ldi	r25, 0x23	; 35
 302:	24 ef       	ldi	r18, 0xF4	; 244
 304:	81 50       	subi	r24, 0x01	; 1
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	20 40       	sbci	r18, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0xbe>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0xc8>
 30e:	00 00       	nop
			_delay_ms(5000);	// Espera 5 segundos
			stepper_rotate(-130);	// Regresa el motor stepper a su posicion inicial
 310:	8e e7       	ldi	r24, 0x7E	; 126
 312:	9f ef       	ldi	r25, 0xFF	; 255
 314:	0e 94 01 01 	call	0x202	; 0x202 <stepper_rotate>
 318:	ad cf       	rjmp	.-166    	; 0x274 <main+0x2e>

0000031a <__divsf3>:
 31a:	0e 94 a1 01 	call	0x342	; 0x342 <__divsf3x>
 31e:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_round>
 322:	0e 94 82 02 	call	0x504	; 0x504 <__fp_pscB>
 326:	58 f0       	brcs	.+22     	; 0x33e <__divsf3+0x24>
 328:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_pscA>
 32c:	40 f0       	brcs	.+16     	; 0x33e <__divsf3+0x24>
 32e:	29 f4       	brne	.+10     	; 0x33a <__divsf3+0x20>
 330:	5f 3f       	cpi	r21, 0xFF	; 255
 332:	29 f0       	breq	.+10     	; 0x33e <__divsf3+0x24>
 334:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_inf>
 338:	51 11       	cpse	r21, r1
 33a:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_szero>
 33e:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_nan>

00000342 <__divsf3x>:
 342:	0e 94 9a 02 	call	0x534	; 0x534 <__fp_split3>
 346:	68 f3       	brcs	.-38     	; 0x322 <__divsf3+0x8>

00000348 <__divsf3_pse>:
 348:	99 23       	and	r25, r25
 34a:	b1 f3       	breq	.-20     	; 0x338 <__divsf3+0x1e>
 34c:	55 23       	and	r21, r21
 34e:	91 f3       	breq	.-28     	; 0x334 <__divsf3+0x1a>
 350:	95 1b       	sub	r25, r21
 352:	55 0b       	sbc	r21, r21
 354:	bb 27       	eor	r27, r27
 356:	aa 27       	eor	r26, r26
 358:	62 17       	cp	r22, r18
 35a:	73 07       	cpc	r23, r19
 35c:	84 07       	cpc	r24, r20
 35e:	38 f0       	brcs	.+14     	; 0x36e <__divsf3_pse+0x26>
 360:	9f 5f       	subi	r25, 0xFF	; 255
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	44 1f       	adc	r20, r20
 36a:	aa 1f       	adc	r26, r26
 36c:	a9 f3       	breq	.-22     	; 0x358 <__divsf3_pse+0x10>
 36e:	35 d0       	rcall	.+106    	; 0x3da <__divsf3_pse+0x92>
 370:	0e 2e       	mov	r0, r30
 372:	3a f0       	brmi	.+14     	; 0x382 <__divsf3_pse+0x3a>
 374:	e0 e8       	ldi	r30, 0x80	; 128
 376:	32 d0       	rcall	.+100    	; 0x3dc <__divsf3_pse+0x94>
 378:	91 50       	subi	r25, 0x01	; 1
 37a:	50 40       	sbci	r21, 0x00	; 0
 37c:	e6 95       	lsr	r30
 37e:	00 1c       	adc	r0, r0
 380:	ca f7       	brpl	.-14     	; 0x374 <__divsf3_pse+0x2c>
 382:	2b d0       	rcall	.+86     	; 0x3da <__divsf3_pse+0x92>
 384:	fe 2f       	mov	r31, r30
 386:	29 d0       	rcall	.+82     	; 0x3da <__divsf3_pse+0x92>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	88 1f       	adc	r24, r24
 38e:	bb 1f       	adc	r27, r27
 390:	26 17       	cp	r18, r22
 392:	37 07       	cpc	r19, r23
 394:	48 07       	cpc	r20, r24
 396:	ab 07       	cpc	r26, r27
 398:	b0 e8       	ldi	r27, 0x80	; 128
 39a:	09 f0       	breq	.+2      	; 0x39e <__divsf3_pse+0x56>
 39c:	bb 0b       	sbc	r27, r27
 39e:	80 2d       	mov	r24, r0
 3a0:	bf 01       	movw	r22, r30
 3a2:	ff 27       	eor	r31, r31
 3a4:	93 58       	subi	r25, 0x83	; 131
 3a6:	5f 4f       	sbci	r21, 0xFF	; 255
 3a8:	3a f0       	brmi	.+14     	; 0x3b8 <__divsf3_pse+0x70>
 3aa:	9e 3f       	cpi	r25, 0xFE	; 254
 3ac:	51 05       	cpc	r21, r1
 3ae:	78 f0       	brcs	.+30     	; 0x3ce <__divsf3_pse+0x86>
 3b0:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_inf>
 3b4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_szero>
 3b8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ba:	e4 f3       	brlt	.-8      	; 0x3b4 <__divsf3_pse+0x6c>
 3bc:	98 3e       	cpi	r25, 0xE8	; 232
 3be:	d4 f3       	brlt	.-12     	; 0x3b4 <__divsf3_pse+0x6c>
 3c0:	86 95       	lsr	r24
 3c2:	77 95       	ror	r23
 3c4:	67 95       	ror	r22
 3c6:	b7 95       	ror	r27
 3c8:	f7 95       	ror	r31
 3ca:	9f 5f       	subi	r25, 0xFF	; 255
 3cc:	c9 f7       	brne	.-14     	; 0x3c0 <__divsf3_pse+0x78>
 3ce:	88 0f       	add	r24, r24
 3d0:	91 1d       	adc	r25, r1
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	97 f9       	bld	r25, 7
 3d8:	08 95       	ret
 3da:	e1 e0       	ldi	r30, 0x01	; 1
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	88 1f       	adc	r24, r24
 3e2:	bb 1f       	adc	r27, r27
 3e4:	62 17       	cp	r22, r18
 3e6:	73 07       	cpc	r23, r19
 3e8:	84 07       	cpc	r24, r20
 3ea:	ba 07       	cpc	r27, r26
 3ec:	20 f0       	brcs	.+8      	; 0x3f6 <__divsf3_pse+0xae>
 3ee:	62 1b       	sub	r22, r18
 3f0:	73 0b       	sbc	r23, r19
 3f2:	84 0b       	sbc	r24, r20
 3f4:	ba 0b       	sbc	r27, r26
 3f6:	ee 1f       	adc	r30, r30
 3f8:	88 f7       	brcc	.-30     	; 0x3dc <__divsf3_pse+0x94>
 3fa:	e0 95       	com	r30
 3fc:	08 95       	ret

000003fe <__fixsfsi>:
 3fe:	0e 94 06 02 	call	0x40c	; 0x40c <__fixunssfsi>
 402:	68 94       	set
 404:	b1 11       	cpse	r27, r1
 406:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_szero>
 40a:	08 95       	ret

0000040c <__fixunssfsi>:
 40c:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_splitA>
 410:	88 f0       	brcs	.+34     	; 0x434 <__fixunssfsi+0x28>
 412:	9f 57       	subi	r25, 0x7F	; 127
 414:	98 f0       	brcs	.+38     	; 0x43c <__fixunssfsi+0x30>
 416:	b9 2f       	mov	r27, r25
 418:	99 27       	eor	r25, r25
 41a:	b7 51       	subi	r27, 0x17	; 23
 41c:	b0 f0       	brcs	.+44     	; 0x44a <__fixunssfsi+0x3e>
 41e:	e1 f0       	breq	.+56     	; 0x458 <__fixunssfsi+0x4c>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	1a f0       	brmi	.+6      	; 0x430 <__fixunssfsi+0x24>
 42a:	ba 95       	dec	r27
 42c:	c9 f7       	brne	.-14     	; 0x420 <__fixunssfsi+0x14>
 42e:	14 c0       	rjmp	.+40     	; 0x458 <__fixunssfsi+0x4c>
 430:	b1 30       	cpi	r27, 0x01	; 1
 432:	91 f0       	breq	.+36     	; 0x458 <__fixunssfsi+0x4c>
 434:	0e 94 bc 02 	call	0x578	; 0x578 <__fp_zero>
 438:	b1 e0       	ldi	r27, 0x01	; 1
 43a:	08 95       	ret
 43c:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_zero>
 440:	67 2f       	mov	r22, r23
 442:	78 2f       	mov	r23, r24
 444:	88 27       	eor	r24, r24
 446:	b8 5f       	subi	r27, 0xF8	; 248
 448:	39 f0       	breq	.+14     	; 0x458 <__fixunssfsi+0x4c>
 44a:	b9 3f       	cpi	r27, 0xF9	; 249
 44c:	cc f3       	brlt	.-14     	; 0x440 <__fixunssfsi+0x34>
 44e:	86 95       	lsr	r24
 450:	77 95       	ror	r23
 452:	67 95       	ror	r22
 454:	b3 95       	inc	r27
 456:	d9 f7       	brne	.-10     	; 0x44e <__fixunssfsi+0x42>
 458:	3e f4       	brtc	.+14     	; 0x468 <__fixunssfsi+0x5c>
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__floatunsisf>:
 46a:	e8 94       	clt
 46c:	09 c0       	rjmp	.+18     	; 0x480 <__floatsisf+0x12>

0000046e <__floatsisf>:
 46e:	97 fb       	bst	r25, 7
 470:	3e f4       	brtc	.+14     	; 0x480 <__floatsisf+0x12>
 472:	90 95       	com	r25
 474:	80 95       	com	r24
 476:	70 95       	com	r23
 478:	61 95       	neg	r22
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	99 23       	and	r25, r25
 482:	a9 f0       	breq	.+42     	; 0x4ae <__floatsisf+0x40>
 484:	f9 2f       	mov	r31, r25
 486:	96 e9       	ldi	r25, 0x96	; 150
 488:	bb 27       	eor	r27, r27
 48a:	93 95       	inc	r25
 48c:	f6 95       	lsr	r31
 48e:	87 95       	ror	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b7 95       	ror	r27
 496:	f1 11       	cpse	r31, r1
 498:	f8 cf       	rjmp	.-16     	; 0x48a <__floatsisf+0x1c>
 49a:	fa f4       	brpl	.+62     	; 0x4da <__floatsisf+0x6c>
 49c:	bb 0f       	add	r27, r27
 49e:	11 f4       	brne	.+4      	; 0x4a4 <__floatsisf+0x36>
 4a0:	60 ff       	sbrs	r22, 0
 4a2:	1b c0       	rjmp	.+54     	; 0x4da <__floatsisf+0x6c>
 4a4:	6f 5f       	subi	r22, 0xFF	; 255
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	16 c0       	rjmp	.+44     	; 0x4da <__floatsisf+0x6c>
 4ae:	88 23       	and	r24, r24
 4b0:	11 f0       	breq	.+4      	; 0x4b6 <__floatsisf+0x48>
 4b2:	96 e9       	ldi	r25, 0x96	; 150
 4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <__floatsisf+0x6a>
 4b6:	77 23       	and	r23, r23
 4b8:	21 f0       	breq	.+8      	; 0x4c2 <__floatsisf+0x54>
 4ba:	9e e8       	ldi	r25, 0x8E	; 142
 4bc:	87 2f       	mov	r24, r23
 4be:	76 2f       	mov	r23, r22
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__floatsisf+0x5e>
 4c2:	66 23       	and	r22, r22
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <__floatsisf+0x74>
 4c6:	96 e8       	ldi	r25, 0x86	; 134
 4c8:	86 2f       	mov	r24, r22
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	2a f0       	brmi	.+10     	; 0x4da <__floatsisf+0x6c>
 4d0:	9a 95       	dec	r25
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	da f7       	brpl	.-10     	; 0x4d0 <__floatsisf+0x62>
 4da:	88 0f       	add	r24, r24
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	97 f9       	bld	r25, 7
 4e2:	08 95       	ret

000004e4 <__fp_inf>:
 4e4:	97 f9       	bld	r25, 7
 4e6:	9f 67       	ori	r25, 0x7F	; 127
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	08 95       	ret

000004f0 <__fp_nan>:
 4f0:	9f ef       	ldi	r25, 0xFF	; 255
 4f2:	80 ec       	ldi	r24, 0xC0	; 192
 4f4:	08 95       	ret

000004f6 <__fp_pscA>:
 4f6:	00 24       	eor	r0, r0
 4f8:	0a 94       	dec	r0
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	18 06       	cpc	r1, r24
 500:	09 06       	cpc	r0, r25
 502:	08 95       	ret

00000504 <__fp_pscB>:
 504:	00 24       	eor	r0, r0
 506:	0a 94       	dec	r0
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	05 06       	cpc	r0, r21
 510:	08 95       	ret

00000512 <__fp_round>:
 512:	09 2e       	mov	r0, r25
 514:	03 94       	inc	r0
 516:	00 0c       	add	r0, r0
 518:	11 f4       	brne	.+4      	; 0x51e <__fp_round+0xc>
 51a:	88 23       	and	r24, r24
 51c:	52 f0       	brmi	.+20     	; 0x532 <__fp_round+0x20>
 51e:	bb 0f       	add	r27, r27
 520:	40 f4       	brcc	.+16     	; 0x532 <__fp_round+0x20>
 522:	bf 2b       	or	r27, r31
 524:	11 f4       	brne	.+4      	; 0x52a <__fp_round+0x18>
 526:	60 ff       	sbrs	r22, 0
 528:	04 c0       	rjmp	.+8      	; 0x532 <__fp_round+0x20>
 52a:	6f 5f       	subi	r22, 0xFF	; 255
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <__fp_split3>:
 534:	57 fd       	sbrc	r21, 7
 536:	90 58       	subi	r25, 0x80	; 128
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	59 f0       	breq	.+22     	; 0x554 <__fp_splitA+0x10>
 53e:	5f 3f       	cpi	r21, 0xFF	; 255
 540:	71 f0       	breq	.+28     	; 0x55e <__fp_splitA+0x1a>
 542:	47 95       	ror	r20

00000544 <__fp_splitA>:
 544:	88 0f       	add	r24, r24
 546:	97 fb       	bst	r25, 7
 548:	99 1f       	adc	r25, r25
 54a:	61 f0       	breq	.+24     	; 0x564 <__fp_splitA+0x20>
 54c:	9f 3f       	cpi	r25, 0xFF	; 255
 54e:	79 f0       	breq	.+30     	; 0x56e <__fp_splitA+0x2a>
 550:	87 95       	ror	r24
 552:	08 95       	ret
 554:	12 16       	cp	r1, r18
 556:	13 06       	cpc	r1, r19
 558:	14 06       	cpc	r1, r20
 55a:	55 1f       	adc	r21, r21
 55c:	f2 cf       	rjmp	.-28     	; 0x542 <__fp_split3+0xe>
 55e:	46 95       	lsr	r20
 560:	f1 df       	rcall	.-30     	; 0x544 <__fp_splitA>
 562:	08 c0       	rjmp	.+16     	; 0x574 <__fp_splitA+0x30>
 564:	16 16       	cp	r1, r22
 566:	17 06       	cpc	r1, r23
 568:	18 06       	cpc	r1, r24
 56a:	99 1f       	adc	r25, r25
 56c:	f1 cf       	rjmp	.-30     	; 0x550 <__fp_splitA+0xc>
 56e:	86 95       	lsr	r24
 570:	71 05       	cpc	r23, r1
 572:	61 05       	cpc	r22, r1
 574:	08 94       	sec
 576:	08 95       	ret

00000578 <__fp_zero>:
 578:	e8 94       	clt

0000057a <__fp_szero>:
 57a:	bb 27       	eor	r27, r27
 57c:	66 27       	eor	r22, r22
 57e:	77 27       	eor	r23, r23
 580:	cb 01       	movw	r24, r22
 582:	97 f9       	bld	r25, 7
 584:	08 95       	ret

00000586 <__mulsf3>:
 586:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__mulsf3x>
 58a:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_round>
 58e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_pscA>
 592:	38 f0       	brcs	.+14     	; 0x5a2 <__mulsf3+0x1c>
 594:	0e 94 82 02 	call	0x504	; 0x504 <__fp_pscB>
 598:	20 f0       	brcs	.+8      	; 0x5a2 <__mulsf3+0x1c>
 59a:	95 23       	and	r25, r21
 59c:	11 f0       	breq	.+4      	; 0x5a2 <__mulsf3+0x1c>
 59e:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_inf>
 5a2:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_nan>
 5a6:	11 24       	eor	r1, r1
 5a8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_szero>

000005ac <__mulsf3x>:
 5ac:	0e 94 9a 02 	call	0x534	; 0x534 <__fp_split3>
 5b0:	70 f3       	brcs	.-36     	; 0x58e <__mulsf3+0x8>

000005b2 <__mulsf3_pse>:
 5b2:	95 9f       	mul	r25, r21
 5b4:	c1 f3       	breq	.-16     	; 0x5a6 <__mulsf3+0x20>
 5b6:	95 0f       	add	r25, r21
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	55 1f       	adc	r21, r21
 5bc:	62 9f       	mul	r22, r18
 5be:	f0 01       	movw	r30, r0
 5c0:	72 9f       	mul	r23, r18
 5c2:	bb 27       	eor	r27, r27
 5c4:	f0 0d       	add	r31, r0
 5c6:	b1 1d       	adc	r27, r1
 5c8:	63 9f       	mul	r22, r19
 5ca:	aa 27       	eor	r26, r26
 5cc:	f0 0d       	add	r31, r0
 5ce:	b1 1d       	adc	r27, r1
 5d0:	aa 1f       	adc	r26, r26
 5d2:	64 9f       	mul	r22, r20
 5d4:	66 27       	eor	r22, r22
 5d6:	b0 0d       	add	r27, r0
 5d8:	a1 1d       	adc	r26, r1
 5da:	66 1f       	adc	r22, r22
 5dc:	82 9f       	mul	r24, r18
 5de:	22 27       	eor	r18, r18
 5e0:	b0 0d       	add	r27, r0
 5e2:	a1 1d       	adc	r26, r1
 5e4:	62 1f       	adc	r22, r18
 5e6:	73 9f       	mul	r23, r19
 5e8:	b0 0d       	add	r27, r0
 5ea:	a1 1d       	adc	r26, r1
 5ec:	62 1f       	adc	r22, r18
 5ee:	83 9f       	mul	r24, r19
 5f0:	a0 0d       	add	r26, r0
 5f2:	61 1d       	adc	r22, r1
 5f4:	22 1f       	adc	r18, r18
 5f6:	74 9f       	mul	r23, r20
 5f8:	33 27       	eor	r19, r19
 5fa:	a0 0d       	add	r26, r0
 5fc:	61 1d       	adc	r22, r1
 5fe:	23 1f       	adc	r18, r19
 600:	84 9f       	mul	r24, r20
 602:	60 0d       	add	r22, r0
 604:	21 1d       	adc	r18, r1
 606:	82 2f       	mov	r24, r18
 608:	76 2f       	mov	r23, r22
 60a:	6a 2f       	mov	r22, r26
 60c:	11 24       	eor	r1, r1
 60e:	9f 57       	subi	r25, 0x7F	; 127
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	9a f0       	brmi	.+38     	; 0x63a <__mulsf3_pse+0x88>
 614:	f1 f0       	breq	.+60     	; 0x652 <__mulsf3_pse+0xa0>
 616:	88 23       	and	r24, r24
 618:	4a f0       	brmi	.+18     	; 0x62c <__mulsf3_pse+0x7a>
 61a:	ee 0f       	add	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	bb 1f       	adc	r27, r27
 620:	66 1f       	adc	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	88 1f       	adc	r24, r24
 626:	91 50       	subi	r25, 0x01	; 1
 628:	50 40       	sbci	r21, 0x00	; 0
 62a:	a9 f7       	brne	.-22     	; 0x616 <__mulsf3_pse+0x64>
 62c:	9e 3f       	cpi	r25, 0xFE	; 254
 62e:	51 05       	cpc	r21, r1
 630:	80 f0       	brcs	.+32     	; 0x652 <__mulsf3_pse+0xa0>
 632:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_inf>
 636:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_szero>
 63a:	5f 3f       	cpi	r21, 0xFF	; 255
 63c:	e4 f3       	brlt	.-8      	; 0x636 <__mulsf3_pse+0x84>
 63e:	98 3e       	cpi	r25, 0xE8	; 232
 640:	d4 f3       	brlt	.-12     	; 0x636 <__mulsf3_pse+0x84>
 642:	86 95       	lsr	r24
 644:	77 95       	ror	r23
 646:	67 95       	ror	r22
 648:	b7 95       	ror	r27
 64a:	f7 95       	ror	r31
 64c:	e7 95       	ror	r30
 64e:	9f 5f       	subi	r25, 0xFF	; 255
 650:	c1 f7       	brne	.-16     	; 0x642 <__mulsf3_pse+0x90>
 652:	fe 2b       	or	r31, r30
 654:	88 0f       	add	r24, r24
 656:	91 1d       	adc	r25, r1
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	97 f9       	bld	r25, 7
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
