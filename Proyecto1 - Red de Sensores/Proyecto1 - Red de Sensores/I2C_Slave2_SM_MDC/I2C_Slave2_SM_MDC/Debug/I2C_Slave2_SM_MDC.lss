
I2C_Slave2_SM_MDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aea  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000747  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004de  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c2  00000000  00000000  000024c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:

#include "ADC.h"

// Funcion de configuracion del ADC
void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	
	//Vref = AVCC = 5V
	ADMUX |= (1<<REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	
	// Justificacion hacia la izquierda
	ADMUX |= (1<<ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	// Enciende ADC
	ADCSRA |= (1<<ADEN);
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	
	// Habilitamos ISR ADC
	ADCSRA |= (1<<ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	
	//Prescaler de 128 > 16M/128 = 125kHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
	
	// Deshabilitando la entrada digital PC0, PC1
	DIDR0 |= (1<<ADC0D);
  c0:	ee e7       	ldi	r30, 0x7E	; 126
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
	DIDR1 |= (1<<ADC1D);
  ca:	ef e7       	ldi	r30, 0x7F	; 127
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <I2C_Config_SLAVE>:
	TWCR = 1 << TWEN;   //Habilita la interfaz
}

// Funcion para la configuracion del I2C Slave
void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  d6:	97 b1       	in	r25, 0x07	; 7
  d8:	9f 7c       	andi	r25, 0xCF	; 207
  da:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  dc:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  de:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  e0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  e4:	85 e4       	ldi	r24, 0x45	; 69
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	08 95       	ret

000000ec <main>:
uint8_t valordigital = 0;


int main(void)
{
    cli();
  ec:	f8 94       	cli
	
	DDRC = 0;	// Puerto C como entrada
  ee:	17 b8       	out	0x07, r1	; 7
	DDRD |= (1<<DDD2);	// Buzzer como output
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD2);	// Buzzer apagado
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= (1<<DDB0);	// Ventilador como output
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0);	// Ventilador apagado
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	85 b9       	out	0x05, r24	; 5
	
	initADC();
 108:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	I2C_Config_SLAVE(0x22);		// Direccion del Slave 2 (Sensor de Metales)
 10c:	82 e2       	ldi	r24, 0x22	; 34
 10e:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_Config_SLAVE>
	
	sei();
 112:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9c e9       	ldi	r25, 0x9C	; 156
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x2c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x32>
 11e:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(10);
		ADCSRA |= (1<<ADSC);	// inicia la conversion
 120:	ea e7       	ldi	r30, 0x7A	; 122
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 64       	ori	r24, 0x40	; 64
 128:	80 83       	st	Z, r24
		
		// Detecta metal activa un buzzer
		if (adcvalor < THRESHOLD)
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	8a 3f       	cpi	r24, 0xFA	; 250
 130:	20 f4       	brcc	.+8      	; 0x13a <main+0x4e>
		{
			PORTD |= (1<<PORTD2);
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	84 60       	ori	r24, 0x04	; 4
 136:	8b b9       	out	0x0b, r24	; 11
 138:	03 c0       	rjmp	.+6      	; 0x140 <main+0x54>
		} else {
			PORTD &= ~(1<<PORTD2);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Temperatura >= 28, activa un ventilador
		if (temperatura >= 28)
 140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temperatura>
 144:	8c 31       	cpi	r24, 0x1C	; 28
 146:	20 f0       	brcs	.+8      	; 0x150 <main+0x64>
		{
			PORTB |= (1<<PORTB0);	// Enciende ventilador
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	e2 cf       	rjmp	.-60     	; 0x114 <main+0x28>
		} else{
			PORTB &= ~(1<<PORTB0);	// Apaga ventilador
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	85 b9       	out	0x05, r24	; 5
 156:	de cf       	rjmp	.-68     	; 0x114 <main+0x28>

00000158 <__vector_21>:
}

/************************************************************************/
/* Interrupciones ISR                                                   */                  
/************************************************************************/
ISR(ADC_vect){
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	adcvalor = ADCH;	// Lectura del valor del sensor de metales
 168:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//valordigital = (adcvalor > 200) ? 1 : 0; // Actualiza valordigital en tiempo real
	ADCSRA |= (1<<ADIF);
 170:	ea e7       	ldi	r30, 0x7A	; 122
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 61       	ori	r24, 0x10	; 16
 178:	80 83       	st	Z, r24
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_24>:

ISR(TWI_vect){
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	uint8_t state;
	
	// Lee el estado del bus de datos
	state = TWSR & 0xFC;
 19a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 19e:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(state){
 1a0:	88 3a       	cpi	r24, 0xA8	; 168
 1a2:	f9 f0       	breq	.+62     	; 0x1e2 <__vector_24+0x58>
 1a4:	38 f4       	brcc	.+14     	; 0x1b4 <__vector_24+0x2a>
 1a6:	80 37       	cpi	r24, 0x70	; 112
 1a8:	61 f0       	breq	.+24     	; 0x1c2 <__vector_24+0x38>
 1aa:	80 38       	cpi	r24, 0x80	; 128
 1ac:	81 f0       	breq	.+32     	; 0x1ce <__vector_24+0x44>
 1ae:	80 36       	cpi	r24, 0x60	; 96
 1b0:	41 f5       	brne	.+80     	; 0x202 <__vector_24+0x78>
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <__vector_24+0x38>
 1b4:	80 3c       	cpi	r24, 0xC0	; 192
 1b6:	f9 f0       	breq	.+62     	; 0x1f6 <__vector_24+0x6c>
 1b8:	88 3c       	cpi	r24, 0xC8	; 200
 1ba:	e9 f0       	breq	.+58     	; 0x1f6 <__vector_24+0x6c>
 1bc:	88 3b       	cpi	r24, 0xB8	; 184
 1be:	09 f5       	brne	.+66     	; 0x202 <__vector_24+0x78>
 1c0:	10 c0       	rjmp	.+32     	; 0x1e2 <__vector_24+0x58>
		case 0x60:
		case 0x70:
			TWCR |= (1 << TWINT);
 1c2:	ec eb       	ldi	r30, 0xBC	; 188
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	80 83       	st	Z, r24
			break;
 1cc:	1f c0       	rjmp	.+62     	; 0x20c <__vector_24+0x82>
		case 0x80:
			temperatura = TWDR;  // Almacena la temperatura recibida
 1ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temperatura>
			TWCR |= (1 << TWINT);
 1d6:	ec eb       	ldi	r30, 0xBC	; 188
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	80 83       	st	Z, r24
			break;
 1e0:	15 c0       	rjmp	.+42     	; 0x20c <__vector_24+0x82>
			temperatura = TWDR;  // Almacena la temperatura recibida
			TWCR |= (1 << TWINT);
			break;*/
		case 0xA8: // SLA+R recibido, Master mode Lecture
		case 0xB8: // Dato transmitido y ACK recibido
			TWDR = adcvalor; // Carga el dato en el registro de datos
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA); // Listo para la próxima operación
 1ea:	ec eb       	ldi	r30, 0xBC	; 188
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	85 6c       	ori	r24, 0xC5	; 197
 1f2:	80 83       	st	Z, r24
			break;
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <__vector_24+0x82>
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 1f6:	ec eb       	ldi	r30, 0xBC	; 188
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	84 6c       	ori	r24, 0xC4	; 196
 1fe:	80 83       	st	Z, r24
			break;
 200:	05 c0       	rjmp	.+10     	; 0x20c <__vector_24+0x82>
		default: // Libera el BUS de datos
			TWCR |= (1 << TWINT) | (1 << TWSTO);
 202:	ec eb       	ldi	r30, 0xBC	; 188
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 69       	ori	r24, 0x90	; 144
 20a:	80 83       	st	Z, r24
			break;
	}
	
	
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
