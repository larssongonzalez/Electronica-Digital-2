
Lab06_Mando.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000869  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072b  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ac  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026d  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_3>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <inituart>:
	for (i = 0; str[i] != '\0'; i++)
	{
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = str[i];
	}
}
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	82 60       	ori	r24, 0x02	; 2
  84:	8a b9       	out	0x0a, r24	; 10
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	8a b9       	out	0x0a, r24	; 10
  8c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  90:	87 e6       	ldi	r24, 0x67	; 103
  92:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  96:	e2 ec       	ldi	r30, 0xC2	; 194
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 83       	st	Z, r24
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <main>:
  ac:	f8 94       	cli
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	8a b9       	out	0x0a, r24	; 10
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	80 7e       	andi	r24, 0xE0	; 224
  be:	84 b9       	out	0x04, r24	; 4
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8f 61       	ori	r24, 0x1F	; 31
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	e8 e6       	ldi	r30, 0x68	; 104
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	80 83       	st	Z, r24
  d0:	ab e6       	ldi	r26, 0x6B	; 107
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	8c 91       	ld	r24, X
  d6:	8f 61       	ori	r24, 0x1F	; 31
  d8:	8c 93       	st	X, r24
  da:	80 81       	ld	r24, Z
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	80 83       	st	Z, r24
  e0:	ed e6       	ldi	r30, 0x6D	; 109
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
  ea:	0e 94 40 00 	call	0x80	; 0x80 <inituart>
  ee:	78 94       	sei
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x44>

000000f2 <uart_putc>:

// Funcion de envio de caracter por UART
void uart_putc(char c){
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer esté vacío
  f2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f6:	95 ff       	sbrs	r25, 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <uart_putc>
	UDR0 = c;  // Enviar el carácter
  fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fe:	08 95       	ret

00000100 <__vector_3>:


/**************************************************************************************
* Interrupciones (ISR)
**************************************************************************************/
ISR(PCINT0_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	80 e7       	ldi	r24, 0x70	; 112
 126:	92 e0       	ldi	r25, 0x02	; 2
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <__vector_3+0x28>
 130:	00 c0       	rjmp	.+0      	; 0x132 <__vector_3+0x32>
 132:	00 00       	nop
	_delay_ms(50);
	if (!(PINB & (1<<PINB0)))	// Verifica si se presiono PB0
 134:	18 99       	sbic	0x03, 0	; 3
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_3+0x40>
	{
		uart_putc('a');		// Envia el comando 'a'
 138:	81 e6       	ldi	r24, 0x61	; 97
 13a:	0e 94 79 00 	call	0xf2	; 0xf2 <uart_putc>
 13e:	17 c0       	rjmp	.+46     	; 0x16e <__vector_3+0x6e>
	} else if (!(PINB & (1<<PINB1)))	// Verifica si se presiono PB1
 140:	19 99       	sbic	0x03, 1	; 3
 142:	04 c0       	rjmp	.+8      	; 0x14c <__vector_3+0x4c>
	{
		uart_putc('b');		// Envia el comando 'b'
 144:	82 e6       	ldi	r24, 0x62	; 98
 146:	0e 94 79 00 	call	0xf2	; 0xf2 <uart_putc>
 14a:	11 c0       	rjmp	.+34     	; 0x16e <__vector_3+0x6e>
	} else if (!(PINB & (1<<PINB2)))	// Verifica si se presiono PB2
 14c:	1a 99       	sbic	0x03, 2	; 3
 14e:	04 c0       	rjmp	.+8      	; 0x158 <__vector_3+0x58>
	{
		uart_putc('c');		// Envia el comando 'c'
 150:	83 e6       	ldi	r24, 0x63	; 99
 152:	0e 94 79 00 	call	0xf2	; 0xf2 <uart_putc>
 156:	0b c0       	rjmp	.+22     	; 0x16e <__vector_3+0x6e>
	} else if (!(PINB & (1<<PINB3)))	// Verifica si se presiono PB3
 158:	1b 99       	sbic	0x03, 3	; 3
 15a:	04 c0       	rjmp	.+8      	; 0x164 <__vector_3+0x64>
	{
		uart_putc('d');		// Envia el comando 'd'
 15c:	84 e6       	ldi	r24, 0x64	; 100
 15e:	0e 94 79 00 	call	0xf2	; 0xf2 <uart_putc>
 162:	05 c0       	rjmp	.+10     	; 0x16e <__vector_3+0x6e>
	} else if (!(PINB & (1<<PINB4)))	// Verifica si se presiono PB4
 164:	1c 99       	sbic	0x03, 4	; 3
 166:	03 c0       	rjmp	.+6      	; 0x16e <__vector_3+0x6e>
	{
		uart_putc('e');		// Envia el comando 'e'
 168:	85 e6       	ldi	r24, 0x65	; 101
 16a:	0e 94 79 00 	call	0xf2	; 0xf2 <uart_putc>
	}
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <__vector_5>:

ISR(PCINT2_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	80 e7       	ldi	r24, 0x70	; 112
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <__vector_5+0x28>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <__vector_5+0x32>
 1c2:	00 00       	nop
	_delay_ms(50);
	if (!(PIND & (1<<PIND7)))	// Verifica si se presiono PD7
 1c4:	4f 99       	sbic	0x09, 7	; 9
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <__vector_5+0x3e>
	{
		uart_putc('f');		//Envia el comando 'f'
 1c8:	86 e6       	ldi	r24, 0x66	; 102
 1ca:	0e 94 79 00 	call	0xf2	; 0xf2 <uart_putc>
	}
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
