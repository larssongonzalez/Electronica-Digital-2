
I2C_Slave1_POT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a91  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000891  00000000  00000000  00000df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e0  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a1  00000000  00000000  00002336  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000026d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
#include "ADC.h"


// Funcion de inicio de ADC
void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	
	//Vref = AVCC = 5V
	ADMUX |= (1<<REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	
	// Justificacion hacia la izquierda
	ADMUX |= (1<<ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	// Enciende ADC
	ADCSRA |= (1<<ADEN);
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	
	// Habilitamos ISR ADC
	ADCSRA |= (1<<ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	
	//Prescaler de 128 > 16M/128 = 125kHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
	
	// Deshabilitando la entrada digital PC0, PC1
	DIDR0 |= (1<<ADC0D);
  c0:	ee e7       	ldi	r30, 0x7E	; 126
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
	DIDR1 |= (1<<ADC1D);
  ca:	ef e7       	ldi	r30, 0x7F	; 127
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <I2C_Config_SLAVE>:
	TWCR = 1 << TWEN;   //Habilita la interfaz
}

// Funcion para la configuracion del I2C Slave
void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  d6:	97 b1       	in	r25, 0x07	; 7
  d8:	9f 7c       	andi	r25, 0xCF	; 207
  da:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  dc:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  de:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  e0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  e4:	85 e4       	ldi	r24, 0x45	; 69
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	08 95       	ret

000000ec <main>:



int main(void)
{
	cli();
  ec:	f8 94       	cli
	
	DDRC = 0;	// Puerto C como entrada
  ee:	17 b8       	out	0x07, r1	; 7
	initADC();
  f0:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	I2C_Config_SLAVE(0x20);
  f4:	80 e2       	ldi	r24, 0x20	; 32
  f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_Config_SLAVE>
	
	sei();
  fa:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9c e9       	ldi	r25, 0x9C	; 156
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x14>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x1a>
 106:	00 00       	nop
    
    while (1) 
    {
		_delay_ms(10);
		ADCSRA |= (1<<ADSC);	// Inicia la conversion del ADC
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
 112:	f4 cf       	rjmp	.-24     	; 0xfc <main+0x10>

00000114 <__vector_21>:
}

/**************************************************************************************
* Interrupciones (ISR)
**************************************************************************************/
ISR(ADC_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	adcval = ADCH;	// Lectura del valor del pot
 124:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADIF);	//Borra la bandera de interrupcion
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 61       	ori	r24, 0x10	; 16
 134:	80 83       	st	Z, r24
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_24>:


ISR(TWI_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	uint8_t state;
	
	state = TWSR & 0xFC;	// Lee el estado del bus de datos
 156:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15a:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(state){
 15c:	80 39       	cpi	r24, 0x90	; 144
 15e:	c9 f0       	breq	.+50     	; 0x192 <__vector_24+0x4c>
 160:	38 f4       	brcc	.+14     	; 0x170 <__vector_24+0x2a>
 162:	80 37       	cpi	r24, 0x70	; 112
 164:	81 f0       	breq	.+32     	; 0x186 <__vector_24+0x40>
 166:	80 38       	cpi	r24, 0x80	; 128
 168:	a1 f0       	breq	.+40     	; 0x192 <__vector_24+0x4c>
 16a:	80 36       	cpi	r24, 0x60	; 96
 16c:	61 f5       	brne	.+88     	; 0x1c6 <__vector_24+0x80>
 16e:	0b c0       	rjmp	.+22     	; 0x186 <__vector_24+0x40>
 170:	88 3b       	cpi	r24, 0xB8	; 184
 172:	c9 f0       	breq	.+50     	; 0x1a6 <__vector_24+0x60>
 174:	18 f4       	brcc	.+6      	; 0x17c <__vector_24+0x36>
 176:	88 3a       	cpi	r24, 0xA8	; 168
 178:	b1 f0       	breq	.+44     	; 0x1a6 <__vector_24+0x60>
 17a:	25 c0       	rjmp	.+74     	; 0x1c6 <__vector_24+0x80>
 17c:	80 3c       	cpi	r24, 0xC0	; 192
 17e:	e9 f0       	breq	.+58     	; 0x1ba <__vector_24+0x74>
 180:	88 3c       	cpi	r24, 0xC8	; 200
 182:	d9 f0       	breq	.+54     	; 0x1ba <__vector_24+0x74>
 184:	20 c0       	rjmp	.+64     	; 0x1c6 <__vector_24+0x80>
		case 0x60:
		case 0x70: // Direccionado con su dirección de esclavo
			TWCR |= (1 << TWINT);
 186:	ec eb       	ldi	r30, 0xBC	; 188
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	80 83       	st	Z, r24
			break;
 190:	1f c0       	rjmp	.+62     	; 0x1d0 <__vector_24+0x8a>
		case 0x80:
		case 0x90:
			data = TWDR;  // Recibió el dato, llamada general
 192:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 196:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data>
			TWCR |= (1 << TWINT); // Borrar la bandera TWINT
 19a:	ec eb       	ldi	r30, 0xBC	; 188
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	80 83       	st	Z, r24
			break;
 1a4:	15 c0       	rjmp	.+42     	; 0x1d0 <__vector_24+0x8a>
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
			TWDR = adcval; // Cargar el dato en el registro de datos
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA); // Listo para la próxima operación
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	85 6c       	ori	r24, 0xC5	; 197
 1b6:	80 83       	st	Z, r24
			break;
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <__vector_24+0x8a>
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la próxima operación
 1ba:	ec eb       	ldi	r30, 0xBC	; 188
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	84 6c       	ori	r24, 0xC4	; 196
 1c2:	80 83       	st	Z, r24
			break;
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <__vector_24+0x8a>
		default: // Liberar el BUS de cualquier error
			TWCR |= (1 << TWINT) | (1 << TWSTO);
 1c6:	ec eb       	ldi	r30, 0xBC	; 188
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 69       	ori	r24, 0x90	; 144
 1ce:	80 83       	st	Z, r24
			break;
	}
	
	
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
