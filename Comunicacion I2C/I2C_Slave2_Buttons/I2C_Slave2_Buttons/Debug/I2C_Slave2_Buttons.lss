
I2C_Slave2_Buttons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f5  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000837  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000638  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033f  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  88:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Config_SLAVE>:
	TWCR = 1 << TWEN;   //Habilita la interfaz
}

// Funcion para la configuracion del I2C Slave
void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  96:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  98:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  9a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  9e:	85 e4       	ldi	r24, 0x45	; 69
  a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a4:	08 95       	ret

000000a6 <main>:



int main(void)
{
    cli();
  a6:	f8 94       	cli
	
	DDRB &= ~((1<<DDB0)|(1<<DDB1));	// PB0 and PB1 how input
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	8c 7f       	andi	r24, 0xFC	; 252
  ac:	84 b9       	out	0x04, r24	; 4
	PORTB |= ((1<<PORTB0)|(1<<PORTB1));	// we activate Pull-Up
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	85 b9       	out	0x05, r24	; 5
	
	DDRD |= (1<<DDD0)|(1<<DDD1)|(1<<DDD2)|(1<<DDD3);	// LEDS outputs
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<PORTD0)|(1<<PORTD1)|(1<<PORTD2)|(1<<PORTD3));	// LEDS off
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	8b b9       	out	0x0b, r24	; 11
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
  c0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Active ISR PCINT0
	PCMSK0 |= (1<<PCINT0)|(1<<PCINT1);	// Active mask ISR the PCINT0 and PCINT1
  c4:	eb e6       	ldi	r30, 0x6B	; 107
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	// Active vector ISR the PCINT0
  ce:	e8 e6       	ldi	r30, 0x68	; 104
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
	
	I2C_Config_SLAVE(0x22); // Init I2C Slave2 and direction
  d8:	82 e2       	ldi	r24, 0x22	; 34
  da:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Config_SLAVE>
	
	sei();
  de:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e3       	ldi	r24, 0x3F	; 63
  e2:	9c e9       	ldi	r25, 0x9C	; 156
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x3e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x44>
  ea:	00 00       	nop
  ec:	f9 cf       	rjmp	.-14     	; 0xe0 <main+0x3a>

000000ee <__vector_3>:
}

/**************************************************************************************
* Interrupciones (ISR)
**************************************************************************************/
ISR(PCINT0_vect){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
	
	// Revisa el estado del boton PB0 (Incrementa)
	if (!(PINB & (1<<PINB0)) == 0)
  fa:	18 9b       	sbis	0x03, 0	; 3
  fc:	0d c0       	rjmp	.+26     	; 0x118 <__vector_3+0x2a>
	{
		
		contador++;
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (contador >= 15)	// Delimita el contador a 15
 108:	8f 30       	cpi	r24, 0x0F	; 15
 10a:	18 f0       	brcs	.+6      	; 0x112 <__vector_3+0x24>
		{
			contador = 15;
 10c:	8f e0       	ldi	r24, 0x0F	; 15
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		PORTD = contador;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	8b b9       	out	0x0b, r24	; 11
	}
	
	// Revisa el estado del boton PB1 (Decrementa)
	if (!(PINB & (1<<PINB1)) == 0)
 118:	19 9b       	sbis	0x03, 1	; 3
 11a:	0c c0       	rjmp	.+24     	; 0x134 <__vector_3+0x46>
	{
		
		contador--;
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	81 50       	subi	r24, 0x01	; 1
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (contador <= 0)
 126:	81 11       	cpse	r24, r1
 128:	02 c0       	rjmp	.+4      	; 0x12e <__vector_3+0x40>
		{
			contador = 0;
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		PORTD = contador;
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	8b b9       	out	0x0b, r24	; 11
	}
}
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_24>:

ISR(TWI_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	uint8_t estado;
	
	estado = TWSR & 0xFC;
 150:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 154:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(estado){
 156:	80 39       	cpi	r24, 0x90	; 144
 158:	c9 f0       	breq	.+50     	; 0x18c <__vector_24+0x4c>
 15a:	38 f4       	brcc	.+14     	; 0x16a <__vector_24+0x2a>
 15c:	80 37       	cpi	r24, 0x70	; 112
 15e:	81 f0       	breq	.+32     	; 0x180 <__vector_24+0x40>
 160:	80 38       	cpi	r24, 0x80	; 128
 162:	a1 f0       	breq	.+40     	; 0x18c <__vector_24+0x4c>
 164:	80 36       	cpi	r24, 0x60	; 96
 166:	61 f5       	brne	.+88     	; 0x1c0 <__vector_24+0x80>
 168:	0b c0       	rjmp	.+22     	; 0x180 <__vector_24+0x40>
 16a:	88 3b       	cpi	r24, 0xB8	; 184
 16c:	c9 f0       	breq	.+50     	; 0x1a0 <__vector_24+0x60>
 16e:	18 f4       	brcc	.+6      	; 0x176 <__vector_24+0x36>
 170:	88 3a       	cpi	r24, 0xA8	; 168
 172:	b1 f0       	breq	.+44     	; 0x1a0 <__vector_24+0x60>
 174:	25 c0       	rjmp	.+74     	; 0x1c0 <__vector_24+0x80>
 176:	80 3c       	cpi	r24, 0xC0	; 192
 178:	e9 f0       	breq	.+58     	; 0x1b4 <__vector_24+0x74>
 17a:	88 3c       	cpi	r24, 0xC8	; 200
 17c:	d9 f0       	breq	.+54     	; 0x1b4 <__vector_24+0x74>
 17e:	20 c0       	rjmp	.+64     	; 0x1c0 <__vector_24+0x80>
		case 0x60:
		case 0x70:              // Direccion del Slave2
			TWCR |= (1 << TWINT); 
 180:	ec eb       	ldi	r30, 0xBC	; 188
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 68       	ori	r24, 0x80	; 128
 188:	80 83       	st	Z, r24
			break;
 18a:	1f c0       	rjmp	.+62     	; 0x1ca <__vector_24+0x8a>
		case 0x80:
		case 0x90:
			data = TWDR;  // Recibió el dato, llamada general
 18c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 190:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data>
			TWCR |= 1 << TWINT; 
 194:	ec eb       	ldi	r30, 0xBC	; 188
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	80 83       	st	Z, r24
			break;
 19e:	15 c0       	rjmp	.+42     	; 0x1ca <__vector_24+0x8a>
		case 0xA8: // SLA+R recibido, Master mode Lecture 
		case 0xB8: // Dato transmitido y ACK recibido
			TWDR = contador; // Carga el dato en el registro de datos
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); 
 1a8:	ec eb       	ldi	r30, 0xBC	; 188
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	85 6c       	ori	r24, 0xC5	; 197
 1b0:	80 83       	st	Z, r24
			break;
 1b2:	0b c0       	rjmp	.+22     	; 0x1ca <__vector_24+0x8a>
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); 
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	84 6c       	ori	r24, 0xC4	; 196
 1bc:	80 83       	st	Z, r24
			break;
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <__vector_24+0x8a>
		default:    // Libera el BUS de datos
			TWCR |= (1 << TWINT) | (1 << TWSTO);
 1c0:	ec eb       	ldi	r30, 0xBC	; 188
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 69       	ori	r24, 0x90	; 144
 1c8:	80 83       	st	Z, r24
			break;
	}
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
