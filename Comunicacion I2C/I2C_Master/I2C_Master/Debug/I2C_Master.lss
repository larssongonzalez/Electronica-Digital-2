
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000ab6  00000b4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800114  00800114  00000b5e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8d  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000938  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090d  00000000  00000000  00002491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f5  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072b  00000000  00000000  00003445  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <main>
  9e:	0c 94 59 05 	jmp	0xab2	; 0xab2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Config_MASTER>:
		return;
	}
	
	I2C_write_data(dato);   //Envia el dato al esclavo
	I2C_Stop();  //No continua, termina la comunicación y la cierra
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 7c       	andi	r24, 0xCF	; 207
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	74 e2       	ldi	r23, 0x24	; 36
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 3f 02 	call	0x47e	; 0x47e <__udivmodsi4>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	60 51       	subi	r22, 0x10	; 16
  c6:	71 09       	sbc	r23, r1
  c8:	81 09       	sbc	r24, r1
  ca:	91 09       	sbc	r25, r1
  cc:	2c 2f       	mov	r18, r28
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	03 2e       	mov	r0, r19
  d6:	00 0c       	add	r0, r0
  d8:	44 0b       	sbc	r20, r20
  da:	55 0b       	sbc	r21, r21
  dc:	0e 94 3f 02 	call	0x47e	; 0x47e <__udivmodsi4>
  e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  e4:	c4 30       	cpi	r28, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <I2C_Config_MASTER+0x60>
  e8:	18 f4       	brcc	.+6      	; 0xf0 <I2C_Config_MASTER+0x4a>
  ea:	c1 30       	cpi	r28, 0x01	; 1
  ec:	31 f0       	breq	.+12     	; 0xfa <I2C_Config_MASTER+0x54>
  ee:	23 c0       	rjmp	.+70     	; 0x136 <I2C_Config_MASTER+0x90>
  f0:	c0 31       	cpi	r28, 0x10	; 16
  f2:	91 f0       	breq	.+36     	; 0x118 <I2C_Config_MASTER+0x72>
  f4:	c0 34       	cpi	r28, 0x40	; 64
  f6:	c9 f0       	breq	.+50     	; 0x12a <I2C_Config_MASTER+0x84>
  f8:	1e c0       	rjmp	.+60     	; 0x136 <I2C_Config_MASTER+0x90>
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	80 83       	st	Z, r24
 104:	1d c0       	rjmp	.+58     	; 0x140 <I2C_Config_MASTER+0x9a>
 106:	e9 eb       	ldi	r30, 0xB9	; 185
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	14 c0       	rjmp	.+40     	; 0x140 <I2C_Config_MASTER+0x9a>
 118:	e9 eb       	ldi	r30, 0xB9	; 185
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	80 83       	st	Z, r24
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	0b c0       	rjmp	.+22     	; 0x140 <I2C_Config_MASTER+0x9a>
 12a:	e9 eb       	ldi	r30, 0xB9	; 185
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 6f       	ori	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
 134:	05 c0       	rjmp	.+10     	; 0x140 <I2C_Config_MASTER+0x9a>
 136:	e9 eb       	ldi	r30, 0xB9	; 185
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <I2C_Stop>:
 14a:	84 e9       	ldi	r24, 0x94	; 148
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	84 fd       	sbrc	r24, 4
 156:	fc cf       	rjmp	.-8      	; 0x150 <I2C_Stop+0x6>
 158:	08 95       	ret

0000015a <I2C_read_data>:
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Condicion de paro
	while(TWCR & (1<<TWSTO));	// El bit se limpia por HW
}

// Funcion para leer un byte de datos desde el esclavo para el maestro.
uint8_t I2C_read_data(uint8_t direccion_esclavo, uint8_t *dato){
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	// Iniciar concdicion de START
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
 15e:	94 ea       	ldi	r25, 0xA4	; 164
 160:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete
 164:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 168:	99 23       	and	r25, r25
 16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_read_data+0xa>
	
	// Verifica la condicion de start
	if ((TWSR & 0xF8) != TW_START)
 16c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	98 7f       	andi	r25, 0xF8	; 248
 172:	98 30       	cpi	r25, 0x08	; 8
 174:	e1 f5       	brne	.+120    	; 0x1ee <I2C_read_data+0x94>
	{
		return 1;	// No se pudo iniciar la condicion de start
	}
	
	// Enviar direccion del esclavo con bit de lectura
	TWDR = SLA_R(direccion_esclavo);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Espera a que se complete la transmision
 188:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18c:	88 23       	and	r24, r24
 18e:	e4 f7       	brge	.-8      	; 0x188 <I2C_read_data+0x2e>
 190:	eb 01       	movw	r28, r22
	
	// Verifica ACK/NACK de la direccion
	if ((TWSR & 0xF8) == TW_MR_SLA_NACK)
 192:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 196:	88 7f       	andi	r24, 0xF8	; 248
 198:	88 34       	cpi	r24, 0x48	; 72
 19a:	21 f4       	brne	.+8      	; 0x1a4 <I2C_read_data+0x4a>
	{
		I2C_Stop();	// Detiene la transmision si es un NACK
 19c:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_Stop>
		return 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	26 c0       	rjmp	.+76     	; 0x1f0 <I2C_read_data+0x96>
	} else if ((TWSR & 0xF8) != TW_MR_SLA_ACK)
 1a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1a8:	88 7f       	andi	r24, 0xF8	; 248
 1aa:	80 34       	cpi	r24, 0x40	; 64
 1ac:	21 f0       	breq	.+8      	; 0x1b6 <I2C_read_data+0x5c>
	{
		I2C_Stop();	// Detener si recibe otro dato erroneo
 1ae:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_Stop>
		return 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <I2C_read_data+0x96>
	}
	
	// Lee el byte del Slave
	TWCR = (1<<TWEN)|(1<<TWINT);
 1b6:	84 e8       	ldi	r24, 0x84	; 132
 1b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete la recepcion
 1bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	88 23       	and	r24, r24
 1c2:	e4 f7       	brge	.-8      	; 0x1bc <I2C_read_data+0x62>
	
	// Verifica la recepcion
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK && (TWSR & 0xF8) != TW_MR_DATA_ACK)
 1c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c8:	88 7f       	andi	r24, 0xF8	; 248
 1ca:	88 35       	cpi	r24, 0x58	; 88
 1cc:	49 f0       	breq	.+18     	; 0x1e0 <I2C_read_data+0x86>
 1ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1d2:	88 7f       	andi	r24, 0xF8	; 248
 1d4:	80 35       	cpi	r24, 0x50	; 80
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <I2C_read_data+0x86>
	{
		I2C_Stop();	// Detener la recepcion
 1d8:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_Stop>
		return 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <I2C_read_data+0x96>
	}
	
	// Lee dato recibido
	*dato = TWDR;
 1e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1e4:	88 83       	st	Y, r24
	
	I2C_Stop();
 1e6:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_Stop>
	
	return *dato;
 1ea:	88 81       	ld	r24, Y
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <I2C_read_data+0x96>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete
	
	// Verifica la condicion de start
	if ((TWSR & 0xF8) != TW_START)
	{
		return 1;	// No se pudo iniciar la condicion de start
 1ee:	81 e0       	ldi	r24, 0x01	; 1
	*dato = TWDR;
	
	I2C_Stop();
	
	return *dato;
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
 1f6:	80 ff       	sbrs	r24, 0
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <dato_a_mostrar+0xc>
	PORTD |= (1<<0);
 1fa:	9b b1       	in	r25, 0x0b	; 11
 1fc:	91 60       	ori	r25, 0x01	; 1
 1fe:	9b b9       	out	0x0b, r25	; 11
 200:	03 c0       	rjmp	.+6      	; 0x208 <dato_a_mostrar+0x12>
	else
	PORTD &= ~(1<<0);
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	9e 7f       	andi	r25, 0xFE	; 254
 206:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
 208:	81 ff       	sbrs	r24, 1
 20a:	04 c0       	rjmp	.+8      	; 0x214 <dato_a_mostrar+0x1e>
	PORTD |= (1<<1);
 20c:	9b b1       	in	r25, 0x0b	; 11
 20e:	92 60       	ori	r25, 0x02	; 2
 210:	9b b9       	out	0x0b, r25	; 11
 212:	03 c0       	rjmp	.+6      	; 0x21a <dato_a_mostrar+0x24>
	else
	PORTD &= ~(1<<1);
 214:	9b b1       	in	r25, 0x0b	; 11
 216:	9d 7f       	andi	r25, 0xFD	; 253
 218:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 4)				//0000 0100
 21a:	82 ff       	sbrs	r24, 2
 21c:	04 c0       	rjmp	.+8      	; 0x226 <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 21e:	9b b1       	in	r25, 0x0b	; 11
 220:	94 60       	ori	r25, 0x04	; 4
 222:	9b b9       	out	0x0b, r25	; 11
 224:	03 c0       	rjmp	.+6      	; 0x22c <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 226:	9b b1       	in	r25, 0x0b	; 11
 228:	9b 7f       	andi	r25, 0xFB	; 251
 22a:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 22c:	83 ff       	sbrs	r24, 3
 22e:	04 c0       	rjmp	.+8      	; 0x238 <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 230:	9b b1       	in	r25, 0x0b	; 11
 232:	98 60       	ori	r25, 0x08	; 8
 234:	9b b9       	out	0x0b, r25	; 11
 236:	03 c0       	rjmp	.+6      	; 0x23e <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 238:	9b b1       	in	r25, 0x0b	; 11
 23a:	97 7f       	andi	r25, 0xF7	; 247
 23c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 23e:	84 ff       	sbrs	r24, 4
 240:	04 c0       	rjmp	.+8      	; 0x24a <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 242:	9b b1       	in	r25, 0x0b	; 11
 244:	90 61       	ori	r25, 0x10	; 16
 246:	9b b9       	out	0x0b, r25	; 11
 248:	03 c0       	rjmp	.+6      	; 0x250 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 24a:	9b b1       	in	r25, 0x0b	; 11
 24c:	9f 7e       	andi	r25, 0xEF	; 239
 24e:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 250:	85 ff       	sbrs	r24, 5
 252:	04 c0       	rjmp	.+8      	; 0x25c <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 254:	9b b1       	in	r25, 0x0b	; 11
 256:	90 62       	ori	r25, 0x20	; 32
 258:	9b b9       	out	0x0b, r25	; 11
 25a:	03 c0       	rjmp	.+6      	; 0x262 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 25c:	9b b1       	in	r25, 0x0b	; 11
 25e:	9f 7d       	andi	r25, 0xDF	; 223
 260:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 262:	86 ff       	sbrs	r24, 6
 264:	04 c0       	rjmp	.+8      	; 0x26e <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 266:	9b b1       	in	r25, 0x0b	; 11
 268:	90 64       	ori	r25, 0x40	; 64
 26a:	9b b9       	out	0x0b, r25	; 11
 26c:	03 c0       	rjmp	.+6      	; 0x274 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 26e:	9b b1       	in	r25, 0x0b	; 11
 270:	9f 7b       	andi	r25, 0xBF	; 191
 272:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 274:	88 23       	and	r24, r24
 276:	24 f4       	brge	.+8      	; 0x280 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	8b b9       	out	0x0b, r24	; 11
 27e:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	8f 77       	andi	r24, 0x7F	; 127
 284:	8b b9       	out	0x0b, r24	; 11
 286:	08 95       	ret

00000288 <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 288:	95 b1       	in	r25, 0x05	; 5
 28a:	9e 7f       	andi	r25, 0xFE	; 254
 28c:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 28e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 292:	85 b1       	in	r24, 0x05	; 5
 294:	82 60       	ori	r24, 0x02	; 2
 296:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	9f e0       	ldi	r25, 0x0F	; 15
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <inicio+0x14>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <inicio+0x1a>
 2a2:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 2a4:	85 b1       	in	r24, 0x05	; 5
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	85 b9       	out	0x05, r24	; 5
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <inicio+0x26>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <inicio+0x2c>
 2b4:	00 00       	nop
 2b6:	08 95       	ret

000002b8 <Lcd_Init8bits>:
#include "LCD8.h"


void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	8e 7f       	andi	r24, 0xFE	; 254
 2bc:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	8d 7f       	andi	r24, 0xFD	; 253
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	89 ef       	ldi	r24, 0xF9	; 249
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <Lcd_Init8bits+0x12>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <Lcd_Init8bits+0x1c>
 2d4:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 2d6:	80 e3       	ldi	r24, 0x30	; 48
 2d8:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
 2dc:	8f e1       	ldi	r24, 0x1F	; 31
 2de:	9e e4       	ldi	r25, 0x4E	; 78
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Lcd_Init8bits+0x28>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <Lcd_Init8bits+0x2e>
 2e6:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2e8:	80 e3       	ldi	r24, 0x30	; 48
 2ea:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
 2ee:	8f e1       	ldi	r24, 0x1F	; 31
 2f0:	9e e4       	ldi	r25, 0x4E	; 78
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <Lcd_Init8bits+0x3a>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <Lcd_Init8bits+0x40>
 2f8:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2fa:	80 e3       	ldi	r24, 0x30	; 48
 2fc:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
 300:	8f e3       	ldi	r24, 0x3F	; 63
 302:	9c e9       	ldi	r25, 0x9C	; 156
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <Lcd_Init8bits+0x4c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <Lcd_Init8bits+0x52>
 30a:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 30c:	88 e3       	ldi	r24, 0x38	; 56
 30e:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 312:	8c e0       	ldi	r24, 0x0C	; 12
 314:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
 324:	08 95       	ret

00000326 <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
 32c:	08 95       	ret

0000032e <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 32e:	81 11       	cpse	r24, r1
 330:	05 c0       	rjmp	.+10     	; 0x33c <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	86 0f       	add	r24, r22
 336:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
 33a:	08 95       	ret
	
	else if(a == 1)
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	21 f4       	brne	.+8      	; 0x348 <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 340:	80 ec       	ldi	r24, 0xC0	; 192
 342:	86 0f       	add	r24, r22
 344:	0e 94 44 01 	call	0x288	; 0x288 <inicio>
 348:	08 95       	ret

0000034a <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 34a:	95 b1       	in	r25, 0x05	; 5
 34c:	91 60       	ori	r25, 0x01	; 1
 34e:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 350:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 354:	85 b1       	in	r24, 0x05	; 5
 356:	82 60       	ori	r24, 0x02	; 2
 358:	85 b9       	out	0x05, r24	; 5
 35a:	8f e9       	ldi	r24, 0x9F	; 159
 35c:	9f e0       	ldi	r25, 0x0F	; 15
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <Lcd_Write_Char+0x14>
 362:	00 c0       	rjmp	.+0      	; 0x364 <Lcd_Write_Char+0x1a>
 364:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 366:	85 b1       	in	r24, 0x05	; 5
 368:	8d 7f       	andi	r24, 0xFD	; 253
 36a:	85 b9       	out	0x05, r24	; 5
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <Lcd_Write_Char+0x26>
 374:	00 c0       	rjmp	.+0      	; 0x376 <Lcd_Write_Char+0x2c>
 376:	00 00       	nop
 378:	08 95       	ret

0000037a <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 384:	c0 e0       	ldi	r28, 0x00	; 0
 386:	d0 e0       	ldi	r29, 0x00	; 0
 388:	03 c0       	rjmp	.+6      	; 0x390 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 38a:	0e 94 a5 01 	call	0x34a	; 0x34a <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 38e:	21 96       	adiw	r28, 0x01	; 1
 390:	f8 01       	movw	r30, r16
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	80 81       	ld	r24, Z
 398:	81 11       	cpse	r24, r1
 39a:	f7 cf       	rjmp	.-18     	; 0x38a <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <main>:



int main(void)
{
	cli();
 3a6:	f8 94       	cli
	
	DDRD = 0xFF;	// Puerto D como salida (LCD)
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;	// Puerto B como salida
 3ac:	84 b9       	out	0x04, r24	; 4
	
	UCSR0B = 0;  // Usar los pines TX y RX como digitales
 3ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();
 3b2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Lcd_Init8bits>
	Lcd_Clear();
 3b6:	0e 94 93 01 	call	0x326	; 0x326 <Lcd_Clear>
	I2C_Config_MASTER(4,200000);	// Prescaler = 4 , 200kHz de comunicacion
 3ba:	40 e4       	ldi	r20, 0x40	; 64
 3bc:	5d e0       	ldi	r21, 0x0D	; 13
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	84 e0       	ldi	r24, 0x04	; 4
 3c4:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Config_MASTER>
	
	
	sei();	
 3c8:	78 94       	sei
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	9c e9       	ldi	r25, 0x9C	; 156
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x28>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x2e>
 3d4:	00 00       	nop
    while (1) 
    {
		_delay_ms(10);
		
		// Menu de la LCD
		Lcd_Set_Cursor(0, 3);
 3d6:	63 e0       	ldi	r22, 0x03	; 3
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 97 01 	call	0x32e	; 0x32e <Lcd_Set_Cursor>
		Lcd_Write_String("S1: ");
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 bd 01 	call	0x37a	; 0x37a <Lcd_Write_String>
		Lcd_Set_Cursor(0, 10);
 3e6:	6a e0       	ldi	r22, 0x0A	; 10
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 97 01 	call	0x32e	; 0x32e <Lcd_Set_Cursor>
		Lcd_Write_String("S2: ");
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 bd 01 	call	0x37a	; 0x37a <Lcd_Write_String>
		
		dato1 = I2C_read_data(Slave1, &dato1);	// Lee dato del Slave 1 y lo guarda en la variable
 3f6:	64 e1       	ldi	r22, 0x14	; 20
 3f8:	71 e0       	ldi	r23, 0x01	; 1
 3fa:	80 e2       	ldi	r24, 0x20	; 32
 3fc:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_read_data>
 400:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		dato2 = I2C_read_data(Slave2, &dato2);	// Lee dato del Slave 2 y lo guarda en la variable
 404:	65 e1       	ldi	r22, 0x15	; 21
 406:	71 e0       	ldi	r23, 0x01	; 1
 408:	82 e2       	ldi	r24, 0x22	; 34
 40a:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_read_data>
 40e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <dato2>
		
		Lcd_Set_Cursor(1,3);
 412:	63 e0       	ldi	r22, 0x03	; 3
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 97 01 	call	0x32e	; 0x32e <Lcd_Set_Cursor>
		snprintf(buffer,sizeof(buffer), "%02d",dato1);	// Convierte los datos en caracteres
 41a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 41e:	1f 92       	push	r1
 420:	8f 93       	push	r24
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	9f 93       	push	r25
 428:	8f 93       	push	r24
 42a:	1f 92       	push	r1
 42c:	10 e1       	ldi	r17, 0x10	; 16
 42e:	1f 93       	push	r17
 430:	c6 e1       	ldi	r28, 0x16	; 22
 432:	d1 e0       	ldi	r29, 0x01	; 1
 434:	df 93       	push	r29
 436:	cf 93       	push	r28
 438:	0e 94 61 02 	call	0x4c2	; 0x4c2 <snprintf>
		Lcd_Write_String(buffer);
 43c:	ce 01       	movw	r24, r28
 43e:	0e 94 bd 01 	call	0x37a	; 0x37a <Lcd_Write_String>
		
		Lcd_Set_Cursor(1, 10);
 442:	6a e0       	ldi	r22, 0x0A	; 10
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 97 01 	call	0x32e	; 0x32e <Lcd_Set_Cursor>
		snprintf(buffer,sizeof(buffer), "%03d", dato2);	// Convierte los datos en caracteres
 44a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <dato2>
 44e:	1f 92       	push	r1
 450:	8f 93       	push	r24
 452:	8f e0       	ldi	r24, 0x0F	; 15
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	9f 93       	push	r25
 458:	8f 93       	push	r24
 45a:	1f 92       	push	r1
 45c:	1f 93       	push	r17
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	0e 94 61 02 	call	0x4c2	; 0x4c2 <snprintf>
		Lcd_Write_String(buffer);
 466:	ce 01       	movw	r24, r28
 468:	0e 94 bd 01 	call	0x37a	; 0x37a <Lcd_Write_String>
 46c:	8d b7       	in	r24, 0x3d	; 61
 46e:	9e b7       	in	r25, 0x3e	; 62
 470:	40 96       	adiw	r24, 0x10	; 16
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	9e bf       	out	0x3e, r25	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	8d bf       	out	0x3d, r24	; 61
 47c:	a6 cf       	rjmp	.-180    	; 0x3ca <main+0x24>

0000047e <__udivmodsi4>:
 47e:	a1 e2       	ldi	r26, 0x21	; 33
 480:	1a 2e       	mov	r1, r26
 482:	aa 1b       	sub	r26, r26
 484:	bb 1b       	sub	r27, r27
 486:	fd 01       	movw	r30, r26
 488:	0d c0       	rjmp	.+26     	; 0x4a4 <__udivmodsi4_ep>

0000048a <__udivmodsi4_loop>:
 48a:	aa 1f       	adc	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	ee 1f       	adc	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	a2 17       	cp	r26, r18
 494:	b3 07       	cpc	r27, r19
 496:	e4 07       	cpc	r30, r20
 498:	f5 07       	cpc	r31, r21
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__udivmodsi4_ep>
 49c:	a2 1b       	sub	r26, r18
 49e:	b3 0b       	sbc	r27, r19
 4a0:	e4 0b       	sbc	r30, r20
 4a2:	f5 0b       	sbc	r31, r21

000004a4 <__udivmodsi4_ep>:
 4a4:	66 1f       	adc	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	1a 94       	dec	r1
 4ae:	69 f7       	brne	.-38     	; 0x48a <__udivmodsi4_loop>
 4b0:	60 95       	com	r22
 4b2:	70 95       	com	r23
 4b4:	80 95       	com	r24
 4b6:	90 95       	com	r25
 4b8:	9b 01       	movw	r18, r22
 4ba:	ac 01       	movw	r20, r24
 4bc:	bd 01       	movw	r22, r26
 4be:	cf 01       	movw	r24, r30
 4c0:	08 95       	ret

000004c2 <snprintf>:
 4c2:	ae e0       	ldi	r26, 0x0E	; 14
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e7 e6       	ldi	r30, 0x67	; 103
 4c8:	f2 e0       	ldi	r31, 0x02	; 2
 4ca:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__prologue_saves__+0x1c>
 4ce:	0d 89       	ldd	r16, Y+21	; 0x15
 4d0:	1e 89       	ldd	r17, Y+22	; 0x16
 4d2:	8f 89       	ldd	r24, Y+23	; 0x17
 4d4:	98 8d       	ldd	r25, Y+24	; 0x18
 4d6:	26 e0       	ldi	r18, 0x06	; 6
 4d8:	2c 83       	std	Y+4, r18	; 0x04
 4da:	1a 83       	std	Y+2, r17	; 0x02
 4dc:	09 83       	std	Y+1, r16	; 0x01
 4de:	97 ff       	sbrs	r25, 7
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <snprintf+0x24>
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e8       	ldi	r25, 0x80	; 128
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	9e 83       	std	Y+6, r25	; 0x06
 4ea:	8d 83       	std	Y+5, r24	; 0x05
 4ec:	ae 01       	movw	r20, r28
 4ee:	45 5e       	subi	r20, 0xE5	; 229
 4f0:	5f 4f       	sbci	r21, 0xFF	; 255
 4f2:	69 8d       	ldd	r22, Y+25	; 0x19
 4f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	0e 94 91 02 	call	0x522	; 0x522 <vfprintf>
 4fe:	4d 81       	ldd	r20, Y+5	; 0x05
 500:	5e 81       	ldd	r21, Y+6	; 0x06
 502:	57 fd       	sbrc	r21, 7
 504:	0a c0       	rjmp	.+20     	; 0x51a <snprintf+0x58>
 506:	2f 81       	ldd	r18, Y+7	; 0x07
 508:	38 85       	ldd	r19, Y+8	; 0x08
 50a:	42 17       	cp	r20, r18
 50c:	53 07       	cpc	r21, r19
 50e:	0c f4       	brge	.+2      	; 0x512 <snprintf+0x50>
 510:	9a 01       	movw	r18, r20
 512:	f8 01       	movw	r30, r16
 514:	e2 0f       	add	r30, r18
 516:	f3 1f       	adc	r31, r19
 518:	10 82       	st	Z, r1
 51a:	2e 96       	adiw	r28, 0x0e	; 14
 51c:	e4 e0       	ldi	r30, 0x04	; 4
 51e:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__epilogue_restores__+0x1c>

00000522 <vfprintf>:
 522:	ab e0       	ldi	r26, 0x0B	; 11
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	e7 e9       	ldi	r30, 0x97	; 151
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__prologue_saves__>
 52e:	6c 01       	movw	r12, r24
 530:	7b 01       	movw	r14, r22
 532:	8a 01       	movw	r16, r20
 534:	fc 01       	movw	r30, r24
 536:	17 82       	std	Z+7, r1	; 0x07
 538:	16 82       	std	Z+6, r1	; 0x06
 53a:	83 81       	ldd	r24, Z+3	; 0x03
 53c:	81 ff       	sbrs	r24, 1
 53e:	cc c1       	rjmp	.+920    	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 540:	ce 01       	movw	r24, r28
 542:	01 96       	adiw	r24, 0x01	; 1
 544:	3c 01       	movw	r6, r24
 546:	f6 01       	movw	r30, r12
 548:	93 81       	ldd	r25, Z+3	; 0x03
 54a:	f7 01       	movw	r30, r14
 54c:	93 fd       	sbrc	r25, 3
 54e:	85 91       	lpm	r24, Z+
 550:	93 ff       	sbrs	r25, 3
 552:	81 91       	ld	r24, Z+
 554:	7f 01       	movw	r14, r30
 556:	88 23       	and	r24, r24
 558:	09 f4       	brne	.+2      	; 0x55c <vfprintf+0x3a>
 55a:	ba c1       	rjmp	.+884    	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 55c:	85 32       	cpi	r24, 0x25	; 37
 55e:	39 f4       	brne	.+14     	; 0x56e <vfprintf+0x4c>
 560:	93 fd       	sbrc	r25, 3
 562:	85 91       	lpm	r24, Z+
 564:	93 ff       	sbrs	r25, 3
 566:	81 91       	ld	r24, Z+
 568:	7f 01       	movw	r14, r30
 56a:	85 32       	cpi	r24, 0x25	; 37
 56c:	29 f4       	brne	.+10     	; 0x578 <vfprintf+0x56>
 56e:	b6 01       	movw	r22, r12
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 576:	e7 cf       	rjmp	.-50     	; 0x546 <vfprintf+0x24>
 578:	91 2c       	mov	r9, r1
 57a:	21 2c       	mov	r2, r1
 57c:	31 2c       	mov	r3, r1
 57e:	ff e1       	ldi	r31, 0x1F	; 31
 580:	f3 15       	cp	r31, r3
 582:	d8 f0       	brcs	.+54     	; 0x5ba <vfprintf+0x98>
 584:	8b 32       	cpi	r24, 0x2B	; 43
 586:	79 f0       	breq	.+30     	; 0x5a6 <vfprintf+0x84>
 588:	38 f4       	brcc	.+14     	; 0x598 <vfprintf+0x76>
 58a:	80 32       	cpi	r24, 0x20	; 32
 58c:	79 f0       	breq	.+30     	; 0x5ac <vfprintf+0x8a>
 58e:	83 32       	cpi	r24, 0x23	; 35
 590:	a1 f4       	brne	.+40     	; 0x5ba <vfprintf+0x98>
 592:	23 2d       	mov	r18, r3
 594:	20 61       	ori	r18, 0x10	; 16
 596:	1d c0       	rjmp	.+58     	; 0x5d2 <vfprintf+0xb0>
 598:	8d 32       	cpi	r24, 0x2D	; 45
 59a:	61 f0       	breq	.+24     	; 0x5b4 <vfprintf+0x92>
 59c:	80 33       	cpi	r24, 0x30	; 48
 59e:	69 f4       	brne	.+26     	; 0x5ba <vfprintf+0x98>
 5a0:	23 2d       	mov	r18, r3
 5a2:	21 60       	ori	r18, 0x01	; 1
 5a4:	16 c0       	rjmp	.+44     	; 0x5d2 <vfprintf+0xb0>
 5a6:	83 2d       	mov	r24, r3
 5a8:	82 60       	ori	r24, 0x02	; 2
 5aa:	38 2e       	mov	r3, r24
 5ac:	e3 2d       	mov	r30, r3
 5ae:	e4 60       	ori	r30, 0x04	; 4
 5b0:	3e 2e       	mov	r3, r30
 5b2:	2a c0       	rjmp	.+84     	; 0x608 <vfprintf+0xe6>
 5b4:	f3 2d       	mov	r31, r3
 5b6:	f8 60       	ori	r31, 0x08	; 8
 5b8:	1d c0       	rjmp	.+58     	; 0x5f4 <vfprintf+0xd2>
 5ba:	37 fc       	sbrc	r3, 7
 5bc:	2d c0       	rjmp	.+90     	; 0x618 <vfprintf+0xf6>
 5be:	20 ed       	ldi	r18, 0xD0	; 208
 5c0:	28 0f       	add	r18, r24
 5c2:	2a 30       	cpi	r18, 0x0A	; 10
 5c4:	40 f0       	brcs	.+16     	; 0x5d6 <vfprintf+0xb4>
 5c6:	8e 32       	cpi	r24, 0x2E	; 46
 5c8:	b9 f4       	brne	.+46     	; 0x5f8 <vfprintf+0xd6>
 5ca:	36 fc       	sbrc	r3, 6
 5cc:	81 c1       	rjmp	.+770    	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 5ce:	23 2d       	mov	r18, r3
 5d0:	20 64       	ori	r18, 0x40	; 64
 5d2:	32 2e       	mov	r3, r18
 5d4:	19 c0       	rjmp	.+50     	; 0x608 <vfprintf+0xe6>
 5d6:	36 fe       	sbrs	r3, 6
 5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <vfprintf+0xc4>
 5da:	8a e0       	ldi	r24, 0x0A	; 10
 5dc:	98 9e       	mul	r9, r24
 5de:	20 0d       	add	r18, r0
 5e0:	11 24       	eor	r1, r1
 5e2:	92 2e       	mov	r9, r18
 5e4:	11 c0       	rjmp	.+34     	; 0x608 <vfprintf+0xe6>
 5e6:	ea e0       	ldi	r30, 0x0A	; 10
 5e8:	2e 9e       	mul	r2, r30
 5ea:	20 0d       	add	r18, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	22 2e       	mov	r2, r18
 5f0:	f3 2d       	mov	r31, r3
 5f2:	f0 62       	ori	r31, 0x20	; 32
 5f4:	3f 2e       	mov	r3, r31
 5f6:	08 c0       	rjmp	.+16     	; 0x608 <vfprintf+0xe6>
 5f8:	8c 36       	cpi	r24, 0x6C	; 108
 5fa:	21 f4       	brne	.+8      	; 0x604 <vfprintf+0xe2>
 5fc:	83 2d       	mov	r24, r3
 5fe:	80 68       	ori	r24, 0x80	; 128
 600:	38 2e       	mov	r3, r24
 602:	02 c0       	rjmp	.+4      	; 0x608 <vfprintf+0xe6>
 604:	88 36       	cpi	r24, 0x68	; 104
 606:	41 f4       	brne	.+16     	; 0x618 <vfprintf+0xf6>
 608:	f7 01       	movw	r30, r14
 60a:	93 fd       	sbrc	r25, 3
 60c:	85 91       	lpm	r24, Z+
 60e:	93 ff       	sbrs	r25, 3
 610:	81 91       	ld	r24, Z+
 612:	7f 01       	movw	r14, r30
 614:	81 11       	cpse	r24, r1
 616:	b3 cf       	rjmp	.-154    	; 0x57e <vfprintf+0x5c>
 618:	98 2f       	mov	r25, r24
 61a:	9f 7d       	andi	r25, 0xDF	; 223
 61c:	95 54       	subi	r25, 0x45	; 69
 61e:	93 30       	cpi	r25, 0x03	; 3
 620:	28 f4       	brcc	.+10     	; 0x62c <vfprintf+0x10a>
 622:	0c 5f       	subi	r16, 0xFC	; 252
 624:	1f 4f       	sbci	r17, 0xFF	; 255
 626:	9f e3       	ldi	r25, 0x3F	; 63
 628:	99 83       	std	Y+1, r25	; 0x01
 62a:	0d c0       	rjmp	.+26     	; 0x646 <vfprintf+0x124>
 62c:	83 36       	cpi	r24, 0x63	; 99
 62e:	31 f0       	breq	.+12     	; 0x63c <vfprintf+0x11a>
 630:	83 37       	cpi	r24, 0x73	; 115
 632:	71 f0       	breq	.+28     	; 0x650 <vfprintf+0x12e>
 634:	83 35       	cpi	r24, 0x53	; 83
 636:	09 f0       	breq	.+2      	; 0x63a <vfprintf+0x118>
 638:	59 c0       	rjmp	.+178    	; 0x6ec <vfprintf+0x1ca>
 63a:	21 c0       	rjmp	.+66     	; 0x67e <vfprintf+0x15c>
 63c:	f8 01       	movw	r30, r16
 63e:	80 81       	ld	r24, Z
 640:	89 83       	std	Y+1, r24	; 0x01
 642:	0e 5f       	subi	r16, 0xFE	; 254
 644:	1f 4f       	sbci	r17, 0xFF	; 255
 646:	88 24       	eor	r8, r8
 648:	83 94       	inc	r8
 64a:	91 2c       	mov	r9, r1
 64c:	53 01       	movw	r10, r6
 64e:	13 c0       	rjmp	.+38     	; 0x676 <vfprintf+0x154>
 650:	28 01       	movw	r4, r16
 652:	f2 e0       	ldi	r31, 0x02	; 2
 654:	4f 0e       	add	r4, r31
 656:	51 1c       	adc	r5, r1
 658:	f8 01       	movw	r30, r16
 65a:	a0 80       	ld	r10, Z
 65c:	b1 80       	ldd	r11, Z+1	; 0x01
 65e:	36 fe       	sbrs	r3, 6
 660:	03 c0       	rjmp	.+6      	; 0x668 <vfprintf+0x146>
 662:	69 2d       	mov	r22, r9
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <vfprintf+0x14a>
 668:	6f ef       	ldi	r22, 0xFF	; 255
 66a:	7f ef       	ldi	r23, 0xFF	; 255
 66c:	c5 01       	movw	r24, r10
 66e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <strnlen>
 672:	4c 01       	movw	r8, r24
 674:	82 01       	movw	r16, r4
 676:	f3 2d       	mov	r31, r3
 678:	ff 77       	andi	r31, 0x7F	; 127
 67a:	3f 2e       	mov	r3, r31
 67c:	16 c0       	rjmp	.+44     	; 0x6aa <vfprintf+0x188>
 67e:	28 01       	movw	r4, r16
 680:	22 e0       	ldi	r18, 0x02	; 2
 682:	42 0e       	add	r4, r18
 684:	51 1c       	adc	r5, r1
 686:	f8 01       	movw	r30, r16
 688:	a0 80       	ld	r10, Z
 68a:	b1 80       	ldd	r11, Z+1	; 0x01
 68c:	36 fe       	sbrs	r3, 6
 68e:	03 c0       	rjmp	.+6      	; 0x696 <vfprintf+0x174>
 690:	69 2d       	mov	r22, r9
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <vfprintf+0x178>
 696:	6f ef       	ldi	r22, 0xFF	; 255
 698:	7f ef       	ldi	r23, 0xFF	; 255
 69a:	c5 01       	movw	r24, r10
 69c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <strnlen_P>
 6a0:	4c 01       	movw	r8, r24
 6a2:	f3 2d       	mov	r31, r3
 6a4:	f0 68       	ori	r31, 0x80	; 128
 6a6:	3f 2e       	mov	r3, r31
 6a8:	82 01       	movw	r16, r4
 6aa:	33 fc       	sbrc	r3, 3
 6ac:	1b c0       	rjmp	.+54     	; 0x6e4 <vfprintf+0x1c2>
 6ae:	82 2d       	mov	r24, r2
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	88 16       	cp	r8, r24
 6b4:	99 06       	cpc	r9, r25
 6b6:	b0 f4       	brcc	.+44     	; 0x6e4 <vfprintf+0x1c2>
 6b8:	b6 01       	movw	r22, r12
 6ba:	80 e2       	ldi	r24, 0x20	; 32
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 6c2:	2a 94       	dec	r2
 6c4:	f4 cf       	rjmp	.-24     	; 0x6ae <vfprintf+0x18c>
 6c6:	f5 01       	movw	r30, r10
 6c8:	37 fc       	sbrc	r3, 7
 6ca:	85 91       	lpm	r24, Z+
 6cc:	37 fe       	sbrs	r3, 7
 6ce:	81 91       	ld	r24, Z+
 6d0:	5f 01       	movw	r10, r30
 6d2:	b6 01       	movw	r22, r12
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 6da:	21 10       	cpse	r2, r1
 6dc:	2a 94       	dec	r2
 6de:	21 e0       	ldi	r18, 0x01	; 1
 6e0:	82 1a       	sub	r8, r18
 6e2:	91 08       	sbc	r9, r1
 6e4:	81 14       	cp	r8, r1
 6e6:	91 04       	cpc	r9, r1
 6e8:	71 f7       	brne	.-36     	; 0x6c6 <vfprintf+0x1a4>
 6ea:	e8 c0       	rjmp	.+464    	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 6ec:	84 36       	cpi	r24, 0x64	; 100
 6ee:	11 f0       	breq	.+4      	; 0x6f4 <vfprintf+0x1d2>
 6f0:	89 36       	cpi	r24, 0x69	; 105
 6f2:	41 f5       	brne	.+80     	; 0x744 <vfprintf+0x222>
 6f4:	f8 01       	movw	r30, r16
 6f6:	37 fe       	sbrs	r3, 7
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <vfprintf+0x1e6>
 6fa:	60 81       	ld	r22, Z
 6fc:	71 81       	ldd	r23, Z+1	; 0x01
 6fe:	82 81       	ldd	r24, Z+2	; 0x02
 700:	93 81       	ldd	r25, Z+3	; 0x03
 702:	0c 5f       	subi	r16, 0xFC	; 252
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	08 c0       	rjmp	.+16     	; 0x718 <vfprintf+0x1f6>
 708:	60 81       	ld	r22, Z
 70a:	71 81       	ldd	r23, Z+1	; 0x01
 70c:	07 2e       	mov	r0, r23
 70e:	00 0c       	add	r0, r0
 710:	88 0b       	sbc	r24, r24
 712:	99 0b       	sbc	r25, r25
 714:	0e 5f       	subi	r16, 0xFE	; 254
 716:	1f 4f       	sbci	r17, 0xFF	; 255
 718:	f3 2d       	mov	r31, r3
 71a:	ff 76       	andi	r31, 0x6F	; 111
 71c:	3f 2e       	mov	r3, r31
 71e:	97 ff       	sbrs	r25, 7
 720:	09 c0       	rjmp	.+18     	; 0x734 <vfprintf+0x212>
 722:	90 95       	com	r25
 724:	80 95       	com	r24
 726:	70 95       	com	r23
 728:	61 95       	neg	r22
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	f0 68       	ori	r31, 0x80	; 128
 732:	3f 2e       	mov	r3, r31
 734:	2a e0       	ldi	r18, 0x0A	; 10
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	a3 01       	movw	r20, r6
 73a:	0e 94 c4 04 	call	0x988	; 0x988 <__ultoa_invert>
 73e:	88 2e       	mov	r8, r24
 740:	86 18       	sub	r8, r6
 742:	45 c0       	rjmp	.+138    	; 0x7ce <vfprintf+0x2ac>
 744:	85 37       	cpi	r24, 0x75	; 117
 746:	31 f4       	brne	.+12     	; 0x754 <vfprintf+0x232>
 748:	23 2d       	mov	r18, r3
 74a:	2f 7e       	andi	r18, 0xEF	; 239
 74c:	b2 2e       	mov	r11, r18
 74e:	2a e0       	ldi	r18, 0x0A	; 10
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	25 c0       	rjmp	.+74     	; 0x79e <vfprintf+0x27c>
 754:	93 2d       	mov	r25, r3
 756:	99 7f       	andi	r25, 0xF9	; 249
 758:	b9 2e       	mov	r11, r25
 75a:	8f 36       	cpi	r24, 0x6F	; 111
 75c:	c1 f0       	breq	.+48     	; 0x78e <vfprintf+0x26c>
 75e:	18 f4       	brcc	.+6      	; 0x766 <vfprintf+0x244>
 760:	88 35       	cpi	r24, 0x58	; 88
 762:	79 f0       	breq	.+30     	; 0x782 <vfprintf+0x260>
 764:	b5 c0       	rjmp	.+362    	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 766:	80 37       	cpi	r24, 0x70	; 112
 768:	19 f0       	breq	.+6      	; 0x770 <vfprintf+0x24e>
 76a:	88 37       	cpi	r24, 0x78	; 120
 76c:	21 f0       	breq	.+8      	; 0x776 <vfprintf+0x254>
 76e:	b0 c0       	rjmp	.+352    	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 770:	e9 2f       	mov	r30, r25
 772:	e0 61       	ori	r30, 0x10	; 16
 774:	be 2e       	mov	r11, r30
 776:	b4 fe       	sbrs	r11, 4
 778:	0d c0       	rjmp	.+26     	; 0x794 <vfprintf+0x272>
 77a:	fb 2d       	mov	r31, r11
 77c:	f4 60       	ori	r31, 0x04	; 4
 77e:	bf 2e       	mov	r11, r31
 780:	09 c0       	rjmp	.+18     	; 0x794 <vfprintf+0x272>
 782:	34 fe       	sbrs	r3, 4
 784:	0a c0       	rjmp	.+20     	; 0x79a <vfprintf+0x278>
 786:	29 2f       	mov	r18, r25
 788:	26 60       	ori	r18, 0x06	; 6
 78a:	b2 2e       	mov	r11, r18
 78c:	06 c0       	rjmp	.+12     	; 0x79a <vfprintf+0x278>
 78e:	28 e0       	ldi	r18, 0x08	; 8
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	05 c0       	rjmp	.+10     	; 0x79e <vfprintf+0x27c>
 794:	20 e1       	ldi	r18, 0x10	; 16
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <vfprintf+0x27c>
 79a:	20 e1       	ldi	r18, 0x10	; 16
 79c:	32 e0       	ldi	r19, 0x02	; 2
 79e:	f8 01       	movw	r30, r16
 7a0:	b7 fe       	sbrs	r11, 7
 7a2:	07 c0       	rjmp	.+14     	; 0x7b2 <vfprintf+0x290>
 7a4:	60 81       	ld	r22, Z
 7a6:	71 81       	ldd	r23, Z+1	; 0x01
 7a8:	82 81       	ldd	r24, Z+2	; 0x02
 7aa:	93 81       	ldd	r25, Z+3	; 0x03
 7ac:	0c 5f       	subi	r16, 0xFC	; 252
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <vfprintf+0x29c>
 7b2:	60 81       	ld	r22, Z
 7b4:	71 81       	ldd	r23, Z+1	; 0x01
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 5f       	subi	r16, 0xFE	; 254
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	a3 01       	movw	r20, r6
 7c0:	0e 94 c4 04 	call	0x988	; 0x988 <__ultoa_invert>
 7c4:	88 2e       	mov	r8, r24
 7c6:	86 18       	sub	r8, r6
 7c8:	fb 2d       	mov	r31, r11
 7ca:	ff 77       	andi	r31, 0x7F	; 127
 7cc:	3f 2e       	mov	r3, r31
 7ce:	36 fe       	sbrs	r3, 6
 7d0:	0d c0       	rjmp	.+26     	; 0x7ec <vfprintf+0x2ca>
 7d2:	23 2d       	mov	r18, r3
 7d4:	2e 7f       	andi	r18, 0xFE	; 254
 7d6:	a2 2e       	mov	r10, r18
 7d8:	89 14       	cp	r8, r9
 7da:	58 f4       	brcc	.+22     	; 0x7f2 <vfprintf+0x2d0>
 7dc:	34 fe       	sbrs	r3, 4
 7de:	0b c0       	rjmp	.+22     	; 0x7f6 <vfprintf+0x2d4>
 7e0:	32 fc       	sbrc	r3, 2
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <vfprintf+0x2d4>
 7e4:	83 2d       	mov	r24, r3
 7e6:	8e 7e       	andi	r24, 0xEE	; 238
 7e8:	a8 2e       	mov	r10, r24
 7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <vfprintf+0x2d4>
 7ec:	b8 2c       	mov	r11, r8
 7ee:	a3 2c       	mov	r10, r3
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x2d6>
 7f2:	b8 2c       	mov	r11, r8
 7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <vfprintf+0x2d6>
 7f6:	b9 2c       	mov	r11, r9
 7f8:	a4 fe       	sbrs	r10, 4
 7fa:	0f c0       	rjmp	.+30     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7fc:	fe 01       	movw	r30, r28
 7fe:	e8 0d       	add	r30, r8
 800:	f1 1d       	adc	r31, r1
 802:	80 81       	ld	r24, Z
 804:	80 33       	cpi	r24, 0x30	; 48
 806:	21 f4       	brne	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 808:	9a 2d       	mov	r25, r10
 80a:	99 7e       	andi	r25, 0xE9	; 233
 80c:	a9 2e       	mov	r10, r25
 80e:	09 c0       	rjmp	.+18     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 810:	a2 fe       	sbrs	r10, 2
 812:	06 c0       	rjmp	.+12     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 814:	b3 94       	inc	r11
 816:	b3 94       	inc	r11
 818:	04 c0       	rjmp	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81a:	8a 2d       	mov	r24, r10
 81c:	86 78       	andi	r24, 0x86	; 134
 81e:	09 f0       	breq	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 820:	b3 94       	inc	r11
 822:	a3 fc       	sbrc	r10, 3
 824:	11 c0       	rjmp	.+34     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 826:	a0 fe       	sbrs	r10, 0
 828:	06 c0       	rjmp	.+12     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82a:	b2 14       	cp	r11, r2
 82c:	88 f4       	brcc	.+34     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 82e:	28 0c       	add	r2, r8
 830:	92 2c       	mov	r9, r2
 832:	9b 18       	sub	r9, r11
 834:	0e c0       	rjmp	.+28     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 836:	b2 14       	cp	r11, r2
 838:	60 f4       	brcc	.+24     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 83a:	b6 01       	movw	r22, r12
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 844:	b3 94       	inc	r11
 846:	f7 cf       	rjmp	.-18     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 848:	b2 14       	cp	r11, r2
 84a:	18 f4       	brcc	.+6      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84c:	2b 18       	sub	r2, r11
 84e:	02 c0       	rjmp	.+4      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 850:	98 2c       	mov	r9, r8
 852:	21 2c       	mov	r2, r1
 854:	a4 fe       	sbrs	r10, 4
 856:	10 c0       	rjmp	.+32     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 858:	b6 01       	movw	r22, r12
 85a:	80 e3       	ldi	r24, 0x30	; 48
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 862:	a2 fe       	sbrs	r10, 2
 864:	17 c0       	rjmp	.+46     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 866:	a1 fc       	sbrc	r10, 1
 868:	03 c0       	rjmp	.+6      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86a:	88 e7       	ldi	r24, 0x78	; 120
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 870:	88 e5       	ldi	r24, 0x58	; 88
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	b6 01       	movw	r22, r12
 876:	0c c0       	rjmp	.+24     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 878:	8a 2d       	mov	r24, r10
 87a:	86 78       	andi	r24, 0x86	; 134
 87c:	59 f0       	breq	.+22     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 87e:	a1 fe       	sbrs	r10, 1
 880:	02 c0       	rjmp	.+4      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 882:	8b e2       	ldi	r24, 0x2B	; 43
 884:	01 c0       	rjmp	.+2      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 886:	80 e2       	ldi	r24, 0x20	; 32
 888:	a7 fc       	sbrc	r10, 7
 88a:	8d e2       	ldi	r24, 0x2D	; 45
 88c:	b6 01       	movw	r22, r12
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 894:	89 14       	cp	r8, r9
 896:	38 f4       	brcc	.+14     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 898:	b6 01       	movw	r22, r12
 89a:	80 e3       	ldi	r24, 0x30	; 48
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 8a2:	9a 94       	dec	r9
 8a4:	f7 cf       	rjmp	.-18     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 8a6:	8a 94       	dec	r8
 8a8:	f3 01       	movw	r30, r6
 8aa:	e8 0d       	add	r30, r8
 8ac:	f1 1d       	adc	r31, r1
 8ae:	80 81       	ld	r24, Z
 8b0:	b6 01       	movw	r22, r12
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 8b8:	81 10       	cpse	r8, r1
 8ba:	f5 cf       	rjmp	.-22     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 8bc:	22 20       	and	r2, r2
 8be:	09 f4       	brne	.+2      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8c0:	42 ce       	rjmp	.-892    	; 0x546 <vfprintf+0x24>
 8c2:	b6 01       	movw	r22, r12
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 88 04 	call	0x910	; 0x910 <fputc>
 8cc:	2a 94       	dec	r2
 8ce:	f6 cf       	rjmp	.-20     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8d0:	f6 01       	movw	r30, r12
 8d2:	86 81       	ldd	r24, Z+6	; 0x06
 8d4:	97 81       	ldd	r25, Z+7	; 0x07
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	9f ef       	ldi	r25, 0xFF	; 255
 8dc:	2b 96       	adiw	r28, 0x0b	; 11
 8de:	e2 e1       	ldi	r30, 0x12	; 18
 8e0:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__epilogue_restores__>

000008e4 <strnlen_P>:
 8e4:	fc 01       	movw	r30, r24
 8e6:	05 90       	lpm	r0, Z+
 8e8:	61 50       	subi	r22, 0x01	; 1
 8ea:	70 40       	sbci	r23, 0x00	; 0
 8ec:	01 10       	cpse	r0, r1
 8ee:	d8 f7       	brcc	.-10     	; 0x8e6 <strnlen_P+0x2>
 8f0:	80 95       	com	r24
 8f2:	90 95       	com	r25
 8f4:	8e 0f       	add	r24, r30
 8f6:	9f 1f       	adc	r25, r31
 8f8:	08 95       	ret

000008fa <strnlen>:
 8fa:	fc 01       	movw	r30, r24
 8fc:	61 50       	subi	r22, 0x01	; 1
 8fe:	70 40       	sbci	r23, 0x00	; 0
 900:	01 90       	ld	r0, Z+
 902:	01 10       	cpse	r0, r1
 904:	d8 f7       	brcc	.-10     	; 0x8fc <strnlen+0x2>
 906:	80 95       	com	r24
 908:	90 95       	com	r25
 90a:	8e 0f       	add	r24, r30
 90c:	9f 1f       	adc	r25, r31
 90e:	08 95       	ret

00000910 <fputc>:
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	fb 01       	movw	r30, r22
 91a:	23 81       	ldd	r18, Z+3	; 0x03
 91c:	21 fd       	sbrc	r18, 1
 91e:	03 c0       	rjmp	.+6      	; 0x926 <fputc+0x16>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	9f ef       	ldi	r25, 0xFF	; 255
 924:	2c c0       	rjmp	.+88     	; 0x97e <fputc+0x6e>
 926:	22 ff       	sbrs	r18, 2
 928:	16 c0       	rjmp	.+44     	; 0x956 <fputc+0x46>
 92a:	46 81       	ldd	r20, Z+6	; 0x06
 92c:	57 81       	ldd	r21, Z+7	; 0x07
 92e:	24 81       	ldd	r18, Z+4	; 0x04
 930:	35 81       	ldd	r19, Z+5	; 0x05
 932:	42 17       	cp	r20, r18
 934:	53 07       	cpc	r21, r19
 936:	44 f4       	brge	.+16     	; 0x948 <fputc+0x38>
 938:	a0 81       	ld	r26, Z
 93a:	b1 81       	ldd	r27, Z+1	; 0x01
 93c:	9d 01       	movw	r18, r26
 93e:	2f 5f       	subi	r18, 0xFF	; 255
 940:	3f 4f       	sbci	r19, 0xFF	; 255
 942:	31 83       	std	Z+1, r19	; 0x01
 944:	20 83       	st	Z, r18
 946:	8c 93       	st	X, r24
 948:	26 81       	ldd	r18, Z+6	; 0x06
 94a:	37 81       	ldd	r19, Z+7	; 0x07
 94c:	2f 5f       	subi	r18, 0xFF	; 255
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	37 83       	std	Z+7, r19	; 0x07
 952:	26 83       	std	Z+6, r18	; 0x06
 954:	14 c0       	rjmp	.+40     	; 0x97e <fputc+0x6e>
 956:	8b 01       	movw	r16, r22
 958:	ec 01       	movw	r28, r24
 95a:	fb 01       	movw	r30, r22
 95c:	00 84       	ldd	r0, Z+8	; 0x08
 95e:	f1 85       	ldd	r31, Z+9	; 0x09
 960:	e0 2d       	mov	r30, r0
 962:	09 95       	icall
 964:	89 2b       	or	r24, r25
 966:	e1 f6       	brne	.-72     	; 0x920 <fputc+0x10>
 968:	d8 01       	movw	r26, r16
 96a:	16 96       	adiw	r26, 0x06	; 6
 96c:	8d 91       	ld	r24, X+
 96e:	9c 91       	ld	r25, X
 970:	17 97       	sbiw	r26, 0x07	; 7
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	17 96       	adiw	r26, 0x07	; 7
 976:	9c 93       	st	X, r25
 978:	8e 93       	st	-X, r24
 97a:	16 97       	sbiw	r26, 0x06	; 6
 97c:	ce 01       	movw	r24, r28
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	1f 91       	pop	r17
 984:	0f 91       	pop	r16
 986:	08 95       	ret

00000988 <__ultoa_invert>:
 988:	fa 01       	movw	r30, r20
 98a:	aa 27       	eor	r26, r26
 98c:	28 30       	cpi	r18, 0x08	; 8
 98e:	51 f1       	breq	.+84     	; 0x9e4 <__ultoa_invert+0x5c>
 990:	20 31       	cpi	r18, 0x10	; 16
 992:	81 f1       	breq	.+96     	; 0x9f4 <__ultoa_invert+0x6c>
 994:	e8 94       	clt
 996:	6f 93       	push	r22
 998:	6e 7f       	andi	r22, 0xFE	; 254
 99a:	6e 5f       	subi	r22, 0xFE	; 254
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	af 4f       	sbci	r26, 0xFF	; 255
 9a4:	b1 e0       	ldi	r27, 0x01	; 1
 9a6:	3e d0       	rcall	.+124    	; 0xa24 <__ultoa_invert+0x9c>
 9a8:	b4 e0       	ldi	r27, 0x04	; 4
 9aa:	3c d0       	rcall	.+120    	; 0xa24 <__ultoa_invert+0x9c>
 9ac:	67 0f       	add	r22, r23
 9ae:	78 1f       	adc	r23, r24
 9b0:	89 1f       	adc	r24, r25
 9b2:	9a 1f       	adc	r25, r26
 9b4:	a1 1d       	adc	r26, r1
 9b6:	68 0f       	add	r22, r24
 9b8:	79 1f       	adc	r23, r25
 9ba:	8a 1f       	adc	r24, r26
 9bc:	91 1d       	adc	r25, r1
 9be:	a1 1d       	adc	r26, r1
 9c0:	6a 0f       	add	r22, r26
 9c2:	71 1d       	adc	r23, r1
 9c4:	81 1d       	adc	r24, r1
 9c6:	91 1d       	adc	r25, r1
 9c8:	a1 1d       	adc	r26, r1
 9ca:	20 d0       	rcall	.+64     	; 0xa0c <__ultoa_invert+0x84>
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <__ultoa_invert+0x48>
 9ce:	68 94       	set
 9d0:	3f 91       	pop	r19
 9d2:	2a e0       	ldi	r18, 0x0A	; 10
 9d4:	26 9f       	mul	r18, r22
 9d6:	11 24       	eor	r1, r1
 9d8:	30 19       	sub	r19, r0
 9da:	30 5d       	subi	r19, 0xD0	; 208
 9dc:	31 93       	st	Z+, r19
 9de:	de f6       	brtc	.-74     	; 0x996 <__ultoa_invert+0xe>
 9e0:	cf 01       	movw	r24, r30
 9e2:	08 95       	ret
 9e4:	46 2f       	mov	r20, r22
 9e6:	47 70       	andi	r20, 0x07	; 7
 9e8:	40 5d       	subi	r20, 0xD0	; 208
 9ea:	41 93       	st	Z+, r20
 9ec:	b3 e0       	ldi	r27, 0x03	; 3
 9ee:	0f d0       	rcall	.+30     	; 0xa0e <__ultoa_invert+0x86>
 9f0:	c9 f7       	brne	.-14     	; 0x9e4 <__ultoa_invert+0x5c>
 9f2:	f6 cf       	rjmp	.-20     	; 0x9e0 <__ultoa_invert+0x58>
 9f4:	46 2f       	mov	r20, r22
 9f6:	4f 70       	andi	r20, 0x0F	; 15
 9f8:	40 5d       	subi	r20, 0xD0	; 208
 9fa:	4a 33       	cpi	r20, 0x3A	; 58
 9fc:	18 f0       	brcs	.+6      	; 0xa04 <__ultoa_invert+0x7c>
 9fe:	49 5d       	subi	r20, 0xD9	; 217
 a00:	31 fd       	sbrc	r19, 1
 a02:	40 52       	subi	r20, 0x20	; 32
 a04:	41 93       	st	Z+, r20
 a06:	02 d0       	rcall	.+4      	; 0xa0c <__ultoa_invert+0x84>
 a08:	a9 f7       	brne	.-22     	; 0x9f4 <__ultoa_invert+0x6c>
 a0a:	ea cf       	rjmp	.-44     	; 0x9e0 <__ultoa_invert+0x58>
 a0c:	b4 e0       	ldi	r27, 0x04	; 4
 a0e:	a6 95       	lsr	r26
 a10:	97 95       	ror	r25
 a12:	87 95       	ror	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	ba 95       	dec	r27
 a1a:	c9 f7       	brne	.-14     	; 0xa0e <__ultoa_invert+0x86>
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	61 05       	cpc	r22, r1
 a20:	71 05       	cpc	r23, r1
 a22:	08 95       	ret
 a24:	9b 01       	movw	r18, r22
 a26:	ac 01       	movw	r20, r24
 a28:	0a 2e       	mov	r0, r26
 a2a:	06 94       	lsr	r0
 a2c:	57 95       	ror	r21
 a2e:	47 95       	ror	r20
 a30:	37 95       	ror	r19
 a32:	27 95       	ror	r18
 a34:	ba 95       	dec	r27
 a36:	c9 f7       	brne	.-14     	; 0xa2a <__ultoa_invert+0xa2>
 a38:	62 0f       	add	r22, r18
 a3a:	73 1f       	adc	r23, r19
 a3c:	84 1f       	adc	r24, r20
 a3e:	95 1f       	adc	r25, r21
 a40:	a0 1d       	adc	r26, r0
 a42:	08 95       	ret

00000a44 <__prologue_saves__>:
 a44:	2f 92       	push	r2
 a46:	3f 92       	push	r3
 a48:	4f 92       	push	r4
 a4a:	5f 92       	push	r5
 a4c:	6f 92       	push	r6
 a4e:	7f 92       	push	r7
 a50:	8f 92       	push	r8
 a52:	9f 92       	push	r9
 a54:	af 92       	push	r10
 a56:	bf 92       	push	r11
 a58:	cf 92       	push	r12
 a5a:	df 92       	push	r13
 a5c:	ef 92       	push	r14
 a5e:	ff 92       	push	r15
 a60:	0f 93       	push	r16
 a62:	1f 93       	push	r17
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	cd b7       	in	r28, 0x3d	; 61
 a6a:	de b7       	in	r29, 0x3e	; 62
 a6c:	ca 1b       	sub	r28, r26
 a6e:	db 0b       	sbc	r29, r27
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
 a7a:	09 94       	ijmp

00000a7c <__epilogue_restores__>:
 a7c:	2a 88       	ldd	r2, Y+18	; 0x12
 a7e:	39 88       	ldd	r3, Y+17	; 0x11
 a80:	48 88       	ldd	r4, Y+16	; 0x10
 a82:	5f 84       	ldd	r5, Y+15	; 0x0f
 a84:	6e 84       	ldd	r6, Y+14	; 0x0e
 a86:	7d 84       	ldd	r7, Y+13	; 0x0d
 a88:	8c 84       	ldd	r8, Y+12	; 0x0c
 a8a:	9b 84       	ldd	r9, Y+11	; 0x0b
 a8c:	aa 84       	ldd	r10, Y+10	; 0x0a
 a8e:	b9 84       	ldd	r11, Y+9	; 0x09
 a90:	c8 84       	ldd	r12, Y+8	; 0x08
 a92:	df 80       	ldd	r13, Y+7	; 0x07
 a94:	ee 80       	ldd	r14, Y+6	; 0x06
 a96:	fd 80       	ldd	r15, Y+5	; 0x05
 a98:	0c 81       	ldd	r16, Y+4	; 0x04
 a9a:	1b 81       	ldd	r17, Y+3	; 0x03
 a9c:	aa 81       	ldd	r26, Y+2	; 0x02
 a9e:	b9 81       	ldd	r27, Y+1	; 0x01
 aa0:	ce 0f       	add	r28, r30
 aa2:	d1 1d       	adc	r29, r1
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	f8 94       	cli
 aa8:	de bf       	out	0x3e, r29	; 62
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	cd bf       	out	0x3d, r28	; 61
 aae:	ed 01       	movw	r28, r26
 ab0:	08 95       	ret

00000ab2 <_exit>:
 ab2:	f8 94       	cli

00000ab4 <__stop_program>:
 ab4:	ff cf       	rjmp	.-2      	; 0xab4 <__stop_program>
