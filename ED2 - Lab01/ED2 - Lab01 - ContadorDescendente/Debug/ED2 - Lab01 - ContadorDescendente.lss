
ED2 - Lab01 - ContadorDescendente.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f7  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048e  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b4  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_3>
  10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main(void)
{
    
	cli();
  90:	f8 94       	cli
	
	//Puerto B como salida - Leds jugador 1
	DDRB |= (1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);
  92:	84 b1       	in	r24, 0x04	; 4
  94:	8f 60       	ori	r24, 0x0F	; 15
  96:	84 b9       	out	0x04, r24	; 4
	
	//Puerto C como salida - Leds jugador 2
	DDRC |= (1<<DDC0)|(1<<DDC1)|(1<<DDC2)|(1<<DDC3);
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8f 60       	ori	r24, 0x0F	; 15
  9c:	87 b9       	out	0x07, r24	; 7
	
	// Puerto D como salida (Display)
	DDRD = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a b9       	out	0x0a, r24	; 10
	
	// PC5 como entrada (Boton) - Display
	DDRC &= ~(1<<DDC5);	//PC5 como entrada
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC5);	// activamos Pull Up
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	88 b9       	out	0x08, r24	; 8
	
	// PC5 como entrada - Boton Jugador 2
	DDRC &= ~(1<<DDC4);	//PC5 como entrada
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 7e       	andi	r24, 0xEF	; 239
  b2:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC4);	// activamos Pull Up
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	88 b9       	out	0x08, r24	; 8
	
	// PB4 como entrada - Boton Jugador 1
	DDRB &= ~(1<<DDB4); //PB4 como entrada
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	8f 7e       	andi	r24, 0xEF	; 239
  be:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB4);	// Activamos Pull Up
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	85 b9       	out	0x05, r24	; 5
	
	//Interrupcion PCINT1
	PCICR |= (1<<PCIE1);
  c6:	e8 e6       	ldi	r30, 0x68	; 104
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12)|(1<<PCINT13); // Mascara de interrupcion para PC4 - PC5
  d0:	ac e6       	ldi	r26, 0x6C	; 108
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	8c 91       	ld	r24, X
  d6:	80 63       	ori	r24, 0x30	; 48
  d8:	8c 93       	st	X, r24
	
	//Interrupcion PCINT0
	PCICR |= (1<<PCIE0);
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);	// Mascara de interrupcion para PB4
  e0:	eb e6       	ldi	r30, 0x6B	; 107
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	80 83       	st	Z, r24
	
	// Asegurarse de que todos los LEDs estén apagados al inicio
	PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b01101101;
  f6:	8d e6       	ldi	r24, 0x6D	; 109
  f8:	8b b9       	out	0x0b, r24	; 11
	
	sei();
  fa:	78 94       	sei

	
	
    while (1) 
    {
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3);  // Apaga todos los LEDs
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);  // Apaga todos los LEDs
 102:	88 b1       	in	r24, 0x08	; 8
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	88 b9       	out	0x08, r24	; 8
		
		if (contdis == 1)
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contdis>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	09 f0       	breq	.+2      	; 0x112 <main+0x82>
 110:	4f c0       	rjmp	.+158    	; 0x1b0 <main+0x120>
		{
			contbt1 = 0;
 112:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contbt1>
			contbt2 = 0;
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3);  // Apaga todos los LEDs
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8e 7f       	andi	r24, 0xFE	; 254
 11e:	85 b9       	out	0x05, r24	; 5
			PORTC &= ~(1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);  // Apaga todos los LEDs
 120:	88 b1       	in	r24, 0x08	; 8
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	88 b9       	out	0x08, r24	; 8
			PORTD = 0b01101101;	//5
 126:	8d e6       	ldi	r24, 0x6D	; 109
 128:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	83 ed       	ldi	r24, 0xD3	; 211
 12e:	90 e3       	ldi	r25, 0x30	; 48
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xa0>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xaa>
 13a:	00 00       	nop
			_delay_ms(1000);
			PORTD = 0b01100110;	//4
 13c:	86 e6       	ldi	r24, 0x66	; 102
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	83 ed       	ldi	r24, 0xD3	; 211
 144:	90 e3       	ldi	r25, 0x30	; 48
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xb6>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xc0>
 150:	00 00       	nop
			_delay_ms(1000);
			PORTD = 0b01001111;	//3
 152:	8f e4       	ldi	r24, 0x4F	; 79
 154:	8b b9       	out	0x0b, r24	; 11
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	83 ed       	ldi	r24, 0xD3	; 211
 15a:	90 e3       	ldi	r25, 0x30	; 48
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xcc>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xd6>
 166:	00 00       	nop
			_delay_ms(1000);
			PORTD = 0b01011011;	//2
 168:	8b e5       	ldi	r24, 0x5B	; 91
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	83 ed       	ldi	r24, 0xD3	; 211
 170:	90 e3       	ldi	r25, 0x30	; 48
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xe2>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xec>
 17c:	00 00       	nop
			_delay_ms(1000);
			PORTD = 0b00000110;	//1
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	8b b9       	out	0x0b, r24	; 11
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	83 ed       	ldi	r24, 0xD3	; 211
 186:	90 e3       	ldi	r25, 0x30	; 48
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0xf8>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x102>
 192:	00 00       	nop
			_delay_ms(1000);
			PORTD = 0b00111111;	//0
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	8b b9       	out	0x0b, r24	; 11
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	83 ed       	ldi	r24, 0xD3	; 211
 19c:	90 e3       	ldi	r25, 0x30	; 48
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x10e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x118>
 1a8:	00 00       	nop
			_delay_ms(1000);
			contdis = 2;
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contdis>
				
		} 
		
		// Control de LEDs del jugador 2
		PORTC &= ~(1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);  // Apaga todos los LEDs
 1b0:	88 b1       	in	r24, 0x08	; 8
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	88 b9       	out	0x08, r24	; 8
		
		switch(contbt2){
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	69 f0       	breq	.+26     	; 0x1d8 <main+0x148>
 1be:	18 f4       	brcc	.+6      	; 0x1c6 <main+0x136>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <main+0x140>
 1c4:	20 c0       	rjmp	.+64     	; 0x206 <main+0x176>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	59 f0       	breq	.+22     	; 0x1e0 <main+0x150>
 1ca:	84 30       	cpi	r24, 0x04	; 4
 1cc:	69 f0       	breq	.+26     	; 0x1e8 <main+0x158>
 1ce:	1b c0       	rjmp	.+54     	; 0x206 <main+0x176>
			case 0: break;
			case 1: PORTC |= (1<<PORTC3); break;
 1d0:	88 b1       	in	r24, 0x08	; 8
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	88 b9       	out	0x08, r24	; 8
 1d6:	17 c0       	rjmp	.+46     	; 0x206 <main+0x176>
			case 2:	PORTC |= (1<<PORTC2); break;
 1d8:	88 b1       	in	r24, 0x08	; 8
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	88 b9       	out	0x08, r24	; 8
 1de:	13 c0       	rjmp	.+38     	; 0x206 <main+0x176>
			case 3: PORTC |= (1<<PORTC1); break;
 1e0:	88 b1       	in	r24, 0x08	; 8
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	88 b9       	out	0x08, r24	; 8
 1e6:	0f c0       	rjmp	.+30     	; 0x206 <main+0x176>
			case 4: 
				PORTC |= (1<<PORTC0);
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	88 b9       	out	0x08, r24	; 8
				PORTD |= 0b00000000;	//apagado
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9f e1       	ldi	r25, 0x1F	; 31
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x166>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x16c>
 1fc:	00 00       	nop
				_delay_ms(2);
				PORTD = 0b01011011;	//2
 1fe:	8b e5       	ldi	r24, 0x5B	; 91
 200:	8b b9       	out	0x0b, r24	; 11
				contbt1 = 0;
 202:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contbt1>
			break;
			
		}
		
		// Control de LEDs del jugador 1
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3);  // Apaga todos los LEDs
 206:	85 b1       	in	r24, 0x05	; 5
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	85 b9       	out	0x05, r24	; 5
		
		switch(contbt1){
 20c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contbt1>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	69 f0       	breq	.+26     	; 0x22e <main+0x19e>
 214:	18 f4       	brcc	.+6      	; 0x21c <main+0x18c>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	31 f0       	breq	.+12     	; 0x226 <main+0x196>
 21a:	70 cf       	rjmp	.-288    	; 0xfc <main+0x6c>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	59 f0       	breq	.+22     	; 0x236 <main+0x1a6>
 220:	84 30       	cpi	r24, 0x04	; 4
 222:	69 f0       	breq	.+26     	; 0x23e <main+0x1ae>
 224:	6b cf       	rjmp	.-298    	; 0xfc <main+0x6c>
			case 0: break;
			case 1: PORTB |= (1<<PORTB0); break;
 226:	85 b1       	in	r24, 0x05	; 5
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	85 b9       	out	0x05, r24	; 5
 22c:	67 cf       	rjmp	.-306    	; 0xfc <main+0x6c>
			case 2:	PORTB |= (1<<PORTB1); break;
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	82 60       	ori	r24, 0x02	; 2
 232:	85 b9       	out	0x05, r24	; 5
 234:	63 cf       	rjmp	.-314    	; 0xfc <main+0x6c>
			case 3: PORTB |= (1<<PORTB2); break;
 236:	85 b1       	in	r24, 0x05	; 5
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	85 b9       	out	0x05, r24	; 5
 23c:	5f cf       	rjmp	.-322    	; 0xfc <main+0x6c>
			case 4:
				PORTB |= (1<<PORTB3);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	88 60       	ori	r24, 0x08	; 8
 242:	85 b9       	out	0x05, r24	; 5
				PORTD |= 0b00000000;	//apagado
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8b b9       	out	0x0b, r24	; 11
 248:	8f e3       	ldi	r24, 0x3F	; 63
 24a:	9f e1       	ldi	r25, 0x1F	; 31
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x1bc>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x1c2>
 252:	00 00       	nop
				_delay_ms(2);
				PORTD = 0b00000110;	//1
 254:	86 e0       	ldi	r24, 0x06	; 6
 256:	8b b9       	out	0x0b, r24	; 11
				contbt2 = 0;
 258:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 25c:	4f cf       	rjmp	.-354    	; 0xfc <main+0x6c>

0000025e <__vector_4>:
		
		
    }
}

ISR(PCINT1_vect){
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
	
	if ((PINC & (1<<PINC5)) == 0) // PC5 = 0?
 26a:	35 99       	sbic	0x06, 5	; 6
 26c:	1d c0       	rjmp	.+58     	; 0x2a8 <__vector_4+0x4a>
	{
		if (contdis == 0) // Primera pulsación
 26e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contdis>
 272:	81 11       	cpse	r24, r1
 274:	04 c0       	rjmp	.+8      	; 0x27e <__vector_4+0x20>
		{
			contdis = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contdis>
 27c:	15 c0       	rjmp	.+42     	; 0x2a8 <__vector_4+0x4a>
		}
		else if (contdis == 1) // Segunda pulsación
 27e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contdis>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	21 f4       	brne	.+8      	; 0x28e <__vector_4+0x30>
		{
			contdis = 2;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contdis>
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <__vector_4+0x4a>
		}
		else if (contdis == 2)	// Tercera pulsacion
 28e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contdis>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	49 f4       	brne	.+18     	; 0x2a8 <__vector_4+0x4a>
		{
			contdis = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contdis>
			// Apagar todos los LEDs
			PORTB &= ~(1<<PORTB0 | 1<<PORTB1 | 1<<PORTB2 | 1<<PORTB3);
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	85 b9       	out	0x05, r24	; 5
			PORTC &= ~(1<<PORTC0 | 1<<PORTC1 | 1<<PORTC2 | 1<<PORTC3);
 2a2:	88 b1       	in	r24, 0x08	; 8
 2a4:	80 7f       	andi	r24, 0xF0	; 240
 2a6:	88 b9       	out	0x08, r24	; 8
		}
	}

	if (contdis == 2) // Solo incrementa si contdis es 2
 2a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contdis>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	71 f4       	brne	.+28     	; 0x2cc <__vector_4+0x6e>
	{
		if ((PINC & (1<<PINC4)) == 0) // Botón del jugador 2
 2b0:	34 99       	sbic	0x06, 4	; 6
 2b2:	0c c0       	rjmp	.+24     	; 0x2cc <__vector_4+0x6e>
		{
			contbt2 = (contbt2 < 4) ? contbt2 + 1 : contbt2; // Limita a 4
 2b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b8:	84 30       	cpi	r24, 0x04	; 4
 2ba:	20 f4       	brcc	.+8      	; 0x2c4 <__vector_4+0x66>
 2bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <__vector_4+0x6a>
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 2cc:	8f 91       	pop	r24
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <__vector_3>:

ISR(PCINT0_vect){
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	8f 93       	push	r24
	if (contdis == 2) // Verifica el estado de la cuenta regresiva
 2e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contdis>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	71 f4       	brne	.+28     	; 0x308 <__vector_3+0x30>
	{
		if ((PINB & (1<<PINB4)) == 0)	//Verifica el estado del boton PB4
 2ec:	1c 99       	sbic	0x03, 4	; 3
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <__vector_3+0x30>
		{
			contbt1 = contbt1 < 4 ? contbt1 + 1 : contbt1; // Limita a 4
 2f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contbt1>
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	20 f4       	brcc	.+8      	; 0x300 <__vector_3+0x28>
 2f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contbt1>
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <__vector_3+0x2c>
 300:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contbt1>
 304:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contbt1>
		}
	}
}
 308:	8f 91       	pop	r24
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
