
Lab03_SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00000b5a  00000bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080018c  0080018c  00000c7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1e  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ae  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000867  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051f  00000000  00000000  000034b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000039d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	23 02       	muls	r18, r19
  6a:	2a 02       	muls	r18, r26
  6c:	31 02       	muls	r19, r17
  6e:	3b 02       	muls	r19, r27
  70:	45 02       	muls	r20, r21
  72:	4f 02       	muls	r20, r31
  74:	59 02       	muls	r21, r25

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ea e5       	ldi	r30, 0x5A	; 90
  8a:	fb e0       	ldi	r31, 0x0B	; 11
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 38       	cpi	r26, 0x8C	; 140
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	ac e8       	ldi	r26, 0x8C	; 140
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 3a       	cpi	r26, 0xA2	; 162
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
  ac:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <refreshPORT>:

/*******************************************************************************
* Functions
*******************************************************************************/
void refreshPORT(uint8_t valor){
	if (valor & 0b10000000)
  b4:	88 23       	and	r24, r24
  b6:	24 f4       	brge	.+8      	; 0xc0 <refreshPORT+0xc>
	{
		PORTD |= (1<<PORTD3);
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	98 60       	ori	r25, 0x08	; 8
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	03 c0       	rjmp	.+6      	; 0xc6 <refreshPORT+0x12>
	} else {
		PORTD &= ~(1<<PORTD3);
  c0:	9b b1       	in	r25, 0x0b	; 11
  c2:	97 7f       	andi	r25, 0xF7	; 247
  c4:	9b b9       	out	0x0b, r25	; 11
	}
	if (valor & 0b01000000)
  c6:	86 ff       	sbrs	r24, 6
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <refreshPORT+0x1e>
	{
		PORTD |= (1<<PORTD2);
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	94 60       	ori	r25, 0x04	; 4
  ce:	9b b9       	out	0x0b, r25	; 11
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <refreshPORT+0x24>
	} else {
		PORTD &= ~(1<<PORTD2);
  d2:	9b b1       	in	r25, 0x0b	; 11
  d4:	9b 7f       	andi	r25, 0xFB	; 251
  d6:	9b b9       	out	0x0b, r25	; 11
	}
	if (valor & 0b00100000)
  d8:	85 ff       	sbrs	r24, 5
  da:	04 c0       	rjmp	.+8      	; 0xe4 <refreshPORT+0x30>
	{
		PORTC |= (1<<PORTC5);
  dc:	98 b1       	in	r25, 0x08	; 8
  de:	90 62       	ori	r25, 0x20	; 32
  e0:	98 b9       	out	0x08, r25	; 8
  e2:	03 c0       	rjmp	.+6      	; 0xea <refreshPORT+0x36>
	} else {
		PORTC &= ~(1<<PORTC5);
  e4:	98 b1       	in	r25, 0x08	; 8
  e6:	9f 7d       	andi	r25, 0xDF	; 223
  e8:	98 b9       	out	0x08, r25	; 8
	}
	if (valor & 0b00010000)
  ea:	84 ff       	sbrs	r24, 4
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <refreshPORT+0x42>
	{
		PORTC |= (1<<PORTC4);
  ee:	98 b1       	in	r25, 0x08	; 8
  f0:	90 61       	ori	r25, 0x10	; 16
  f2:	98 b9       	out	0x08, r25	; 8
  f4:	03 c0       	rjmp	.+6      	; 0xfc <refreshPORT+0x48>
	} else {
		PORTC &= ~(1<<PORTC4);
  f6:	98 b1       	in	r25, 0x08	; 8
  f8:	9f 7e       	andi	r25, 0xEF	; 239
  fa:	98 b9       	out	0x08, r25	; 8
	}
	if (valor & 0b00001000)
  fc:	83 ff       	sbrs	r24, 3
  fe:	04 c0       	rjmp	.+8      	; 0x108 <refreshPORT+0x54>
	{
		PORTC |= (1<<PORTC3);
 100:	98 b1       	in	r25, 0x08	; 8
 102:	98 60       	ori	r25, 0x08	; 8
 104:	98 b9       	out	0x08, r25	; 8
 106:	03 c0       	rjmp	.+6      	; 0x10e <refreshPORT+0x5a>
	} else {
		PORTC &= ~(1<<PORTC3);
 108:	98 b1       	in	r25, 0x08	; 8
 10a:	97 7f       	andi	r25, 0xF7	; 247
 10c:	98 b9       	out	0x08, r25	; 8
	}
	if (valor & 0b00000100)
 10e:	82 ff       	sbrs	r24, 2
 110:	04 c0       	rjmp	.+8      	; 0x11a <refreshPORT+0x66>
	{
		PORTC |= (1<<PORTC2);
 112:	98 b1       	in	r25, 0x08	; 8
 114:	94 60       	ori	r25, 0x04	; 4
 116:	98 b9       	out	0x08, r25	; 8
 118:	03 c0       	rjmp	.+6      	; 0x120 <refreshPORT+0x6c>
	} else {
		PORTC &= ~(1<<PORTC2);
 11a:	98 b1       	in	r25, 0x08	; 8
 11c:	9b 7f       	andi	r25, 0xFB	; 251
 11e:	98 b9       	out	0x08, r25	; 8
	}
	if (valor & 0b00000010)
 120:	81 ff       	sbrs	r24, 1
 122:	04 c0       	rjmp	.+8      	; 0x12c <refreshPORT+0x78>
	{
		PORTC |= (1<<PORTC1);
 124:	98 b1       	in	r25, 0x08	; 8
 126:	92 60       	ori	r25, 0x02	; 2
 128:	98 b9       	out	0x08, r25	; 8
 12a:	03 c0       	rjmp	.+6      	; 0x132 <refreshPORT+0x7e>
	} else {
		PORTC &= ~(1<<PORTC1);
 12c:	98 b1       	in	r25, 0x08	; 8
 12e:	9d 7f       	andi	r25, 0xFD	; 253
 130:	98 b9       	out	0x08, r25	; 8
	}
	if (valor & 0b00000001)
 132:	80 ff       	sbrs	r24, 0
 134:	04 c0       	rjmp	.+8      	; 0x13e <refreshPORT+0x8a>
	{
		PORTC |= (1<<PORTC0);
 136:	88 b1       	in	r24, 0x08	; 8
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	88 b9       	out	0x08, r24	; 8
 13c:	08 95       	ret
	} else {
		PORTC &= ~(1<<PORTC0);
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	8e 7f       	andi	r24, 0xFE	; 254
 142:	88 b9       	out	0x08, r24	; 8
 144:	08 95       	ret

00000146 <__vector_18>:

/*******************************************************************************
* Interrupts (ISR)
*******************************************************************************/
ISR(USART_RX_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	1f 93       	push	r17
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	static char lastCommand = '\0';  // Variable para almacenar el último comando recibido
	char receivedChar = UDR0;         // Leer el carácter recibido
 16e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	// Manejar el comando de visualización de potenciómetro
	if (receivedChar == '1')
 172:	81 33       	cpi	r24, 0x31	; 49
 174:	09 f0       	breq	.+2      	; 0x178 <__vector_18+0x32>
 176:	4c c0       	rjmp	.+152    	; 0x210 <__vector_18+0xca>
	{
		valorpot1 = valorspi1;//5;
 178:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <valorspi1>
 17c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <valorpot1>
		valorpot2 = valorspi2;//10;
 180:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <valorspi2>
 184:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <valorpot2>
		snprintf(buffer, sizeof(buffer), "POT1: %d", valorpot1);
 188:	1f 92       	push	r1
 18a:	8f 93       	push	r24
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	9f 93       	push	r25
 192:	8f 93       	push	r24
 194:	1f 92       	push	r1
 196:	10 e1       	ldi	r17, 0x10	; 16
 198:	1f 93       	push	r17
 19a:	c2 e9       	ldi	r28, 0x92	; 146
 19c:	d1 e0       	ldi	r29, 0x01	; 1
 19e:	df 93       	push	r29
 1a0:	cf 93       	push	r28
 1a2:	0e 94 b3 02 	call	0x566	; 0x566 <snprintf>
		stringUART(buffer);
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 9c 02 	call	0x538	; 0x538 <stringUART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	8f e1       	ldi	r24, 0x1F	; 31
 1ae:	9e e4       	ldi	r25, 0x4E	; 78
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <__vector_18+0x6a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <__vector_18+0x70>
 1b6:	00 00       	nop
		_delay_ms(5);
		writeUART(10);
 1b8:	8a e0       	ldi	r24, 0x0A	; 10
 1ba:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
		writeUART(13);
 1be:	8d e0       	ldi	r24, 0x0D	; 13
 1c0:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
		snprintf(buffer, sizeof(buffer), "POT2: %d", valorpot2);
 1c4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <valorpot2>
 1c8:	1f 92       	push	r1
 1ca:	8f 93       	push	r24
 1cc:	89 e0       	ldi	r24, 0x09	; 9
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	9f 93       	push	r25
 1d2:	8f 93       	push	r24
 1d4:	1f 92       	push	r1
 1d6:	1f 93       	push	r17
 1d8:	df 93       	push	r29
 1da:	cf 93       	push	r28
 1dc:	0e 94 b3 02 	call	0x566	; 0x566 <snprintf>
		stringUART(buffer);
 1e0:	ce 01       	movw	r24, r28
 1e2:	0e 94 9c 02 	call	0x538	; 0x538 <stringUART>
 1e6:	8f e1       	ldi	r24, 0x1F	; 31
 1e8:	9e e4       	ldi	r25, 0x4E	; 78
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <__vector_18+0xa4>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <__vector_18+0xaa>
 1f0:	00 00       	nop
		_delay_ms(5);
		writeUART(10);
 1f2:	8a e0       	ldi	r24, 0x0A	; 10
 1f4:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
		writeUART(13);
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
 1fe:	8d b7       	in	r24, 0x3d	; 61
 200:	9e b7       	in	r25, 0x3e	; 62
 202:	40 96       	adiw	r24, 0x10	; 16
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	9e bf       	out	0x3e, r25	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	8d bf       	out	0x3d, r24	; 61
 20e:	82 c0       	rjmp	.+260    	; 0x314 <__vector_18+0x1ce>
		//lastCommand = '\0';  // Resetear el último comando
	}
	// Manejar el comando de cambio de contador
	else if (receivedChar == '2')
 210:	82 33       	cpi	r24, 0x32	; 50
 212:	71 f4       	brne	.+28     	; 0x230 <__vector_18+0xea>
	{
		stringUART("Contador de Incremento/Decremento");
 214:	82 e1       	ldi	r24, 0x12	; 18
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 9c 02 	call	0x538	; 0x538 <stringUART>
		writeUART(10);
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
		writeUART(13);
 222:	8d e0       	ldi	r24, 0x0D	; 13
 224:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
		lastCommand = '2';  // Guardar el comando de cambio de contador
 228:	82 e3       	ldi	r24, 0x32	; 50
 22a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
 22e:	72 c0       	rjmp	.+228    	; 0x314 <__vector_18+0x1ce>
	}
	// Manejar los caracteres '+' y '-' si el comando anterior fue '2'
	else if ((receivedChar == '+' || receivedChar == '-') && lastCommand == '2')
 230:	8b 32       	cpi	r24, 0x2B	; 43
 232:	11 f0       	breq	.+4      	; 0x238 <__vector_18+0xf2>
 234:	8d 32       	cpi	r24, 0x2D	; 45
 236:	01 f5       	brne	.+64     	; 0x278 <__vector_18+0x132>
 238:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <__data_end>
 23c:	92 33       	cpi	r25, 0x32	; 50
 23e:	e1 f4       	brne	.+56     	; 0x278 <__vector_18+0x132>
	{
		if (receivedChar == '+') {
 240:	8b 32       	cpi	r24, 0x2B	; 43
 242:	51 f4       	brne	.+20     	; 0x258 <__vector_18+0x112>
			if (contador < 255) {
 244:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <contador>
 248:	8f 3f       	cpi	r24, 0xFF	; 255
 24a:	89 f0       	breq	.+34     	; 0x26e <__vector_18+0x128>
				contador++;
 24c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <contador>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <contador>
 256:	0b c0       	rjmp	.+22     	; 0x26e <__vector_18+0x128>
			}
		}
		else if (receivedChar == '-') {
 258:	8d 32       	cpi	r24, 0x2D	; 45
 25a:	49 f4       	brne	.+18     	; 0x26e <__vector_18+0x128>
			if (contador > 0) {
 25c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <contador>
 260:	88 23       	and	r24, r24
 262:	29 f0       	breq	.+10     	; 0x26e <__vector_18+0x128>
				contador--;
 264:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <contador>
 268:	81 50       	subi	r24, 0x01	; 1
 26a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <contador>
			}
		}

		refreshPORT(contador);  // Actualizar los LEDs según el valor del contador
 26e:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <contador>
 272:	0e 94 5a 00 	call	0xb4	; 0xb4 <refreshPORT>
 276:	4e c0       	rjmp	.+156    	; 0x314 <__vector_18+0x1ce>
		
	}
	
	// Nuevo comando para enviar los valores de los potenciómetros
	else if (receivedChar == 'p')
 278:	80 37       	cpi	r24, 0x70	; 112
 27a:	09 f0       	breq	.+2      	; 0x27e <__vector_18+0x138>
 27c:	4b c0       	rjmp	.+150    	; 0x314 <__vector_18+0x1ce>
	{
		valorpot1 = valorspi1;
 27e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <valorspi1>
 282:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <valorpot1>
		valorpot2 = valorspi2;
 286:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <valorspi2>
 28a:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <valorpot2>
		snprintf(buffer, sizeof(buffer), "P1:%d", valorpot1);
 28e:	1f 92       	push	r1
 290:	8f 93       	push	r24
 292:	84 e3       	ldi	r24, 0x34	; 52
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	9f 93       	push	r25
 298:	8f 93       	push	r24
 29a:	1f 92       	push	r1
 29c:	10 e1       	ldi	r17, 0x10	; 16
 29e:	1f 93       	push	r17
 2a0:	c2 e9       	ldi	r28, 0x92	; 146
 2a2:	d1 e0       	ldi	r29, 0x01	; 1
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	0e 94 b3 02 	call	0x566	; 0x566 <snprintf>
		stringUART(buffer);
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 9c 02 	call	0x538	; 0x538 <stringUART>
 2b2:	8f e1       	ldi	r24, 0x1F	; 31
 2b4:	9e e4       	ldi	r25, 0x4E	; 78
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <__vector_18+0x170>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <__vector_18+0x176>
 2bc:	00 00       	nop
		_delay_ms(5);
		writeUART(10);
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
		writeUART(13);
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
		snprintf(buffer, sizeof(buffer), "P2:%d", valorpot2);
 2ca:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <valorpot2>
 2ce:	1f 92       	push	r1
 2d0:	8f 93       	push	r24
 2d2:	8a e3       	ldi	r24, 0x3A	; 58
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	9f 93       	push	r25
 2d8:	8f 93       	push	r24
 2da:	1f 92       	push	r1
 2dc:	1f 93       	push	r17
 2de:	df 93       	push	r29
 2e0:	cf 93       	push	r28
 2e2:	0e 94 b3 02 	call	0x566	; 0x566 <snprintf>
		stringUART(buffer);
 2e6:	ce 01       	movw	r24, r28
 2e8:	0e 94 9c 02 	call	0x538	; 0x538 <stringUART>
 2ec:	8f e1       	ldi	r24, 0x1F	; 31
 2ee:	9e e4       	ldi	r25, 0x4E	; 78
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <__vector_18+0x1aa>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <__vector_18+0x1b0>
 2f6:	00 00       	nop
		_delay_ms(5);
		writeUART(10);
 2f8:	8a e0       	ldi	r24, 0x0A	; 10
 2fa:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
		writeUART(13);
 2fe:	8d e0       	ldi	r24, 0x0D	; 13
 300:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
 304:	8d b7       	in	r24, 0x3d	; 61
 306:	9e b7       	in	r25, 0x3e	; 62
 308:	40 96       	adiw	r24, 0x10	; 16
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	9e bf       	out	0x3e, r25	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	8d bf       	out	0x3d, r24	; 61
	}
	
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	1f 91       	pop	r17
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <menuUART>:
	}
}

void menuUART(void){
	// Muestra el mensaje de bienvenida
	stringUART("Elige una opcion:");
 33c:	80 e4       	ldi	r24, 0x40	; 64
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 9c 02 	call	0x538	; 0x538 <stringUART>
	writeUART(10);
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
	writeUART(13);
 34a:	8d e0       	ldi	r24, 0x0D	; 13
 34c:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
	writeUART(10);
 350:	8a e0       	ldi	r24, 0x0A	; 10
 352:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
	stringUART("1. Leer Potenciometros");
 356:	82 e5       	ldi	r24, 0x52	; 82
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 9c 02 	call	0x538	; 0x538 <stringUART>
	writeUART(10);
 35e:	8a e0       	ldi	r24, 0x0A	; 10
 360:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
	writeUART(13);
 364:	8d e0       	ldi	r24, 0x0D	; 13
 366:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
	writeUART(10);
 36a:	8a e0       	ldi	r24, 0x0A	; 10
 36c:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
	stringUART("2. Incremento/Decremento Contador");
 370:	89 e6       	ldi	r24, 0x69	; 105
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 9c 02 	call	0x538	; 0x538 <stringUART>
	writeUART(10);
 378:	8a e0       	ldi	r24, 0x0A	; 10
 37a:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
	writeUART(13);
 37e:	8d e0       	ldi	r24, 0x0D	; 13
 380:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
	writeUART(10);
 384:	8a e0       	ldi	r24, 0x0A	; 10
 386:	0e 94 95 02 	call	0x52a	; 0x52a <writeUART>
 38a:	08 95       	ret

0000038c <main>:
* Function Principal Program
*******************************************************************************/
int main(void)
{
	
	cli();
 38c:	f8 94       	cli
	
    // Leds como outputs
	DDRC |= (1<<DDC0)|(1<<DDC1)|(1<<DDC2)|(1<<DDC3)|(1<<DDC4)|(1<<DDC5);
 38e:	87 b1       	in	r24, 0x07	; 7
 390:	8f 63       	ori	r24, 0x3F	; 63
 392:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<DDD2)|(1<<DDD3);
 394:	8a b1       	in	r24, 0x0a	; 10
 396:	8c 60       	ori	r24, 0x0C	; 12
 398:	8a b9       	out	0x0a, r24	; 10
	
	PORTC &= ~((1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5));
 39a:	88 b1       	in	r24, 0x08	; 8
 39c:	80 7c       	andi	r24, 0xC0	; 192
 39e:	88 b9       	out	0x08, r24	; 8
	DDRD &= ~((1<<PORTD2)|(1<<PORTD3));
 3a0:	8a b1       	in	r24, 0x0a	; 10
 3a2:	83 7f       	andi	r24, 0xF3	; 243
 3a4:	8a b9       	out	0x0a, r24	; 10
	
	// Init SPI
	initSPI(SPI_MASTER_OSC_DIV16,SPI_DATA_MSB, SPI_CLOCK_LOW, SPI_CLOCK_FIRST_EDGE);
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	83 e5       	ldi	r24, 0x53	; 83
 3ae:	0e 94 0b 02 	call	0x416	; 0x416 <initSPI>
	
	// Iniciar UART
	initUART();
 3b2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <initUART>
	
	menuUART();
 3b6:	0e 94 9e 01 	call	0x33c	; 0x33c <menuUART>
	
	sei();
 3ba:	78 94       	sei
	
    while (1) 
    {
		PORTB &= ~(1<<PORTB2);	// Slave select low
 3bc:	85 b1       	in	r24, 0x05	; 5
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	85 b9       	out	0x05, r24	; 5
		writeSPI('c');	// Comando para valor de pot 1
 3c2:	83 e6       	ldi	r24, 0x63	; 99
 3c4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <writeSPI>
		valorspi1 = readSPI();
 3c8:	0e 94 75 02 	call	0x4ea	; 0x4ea <readSPI>
 3cc:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <valorspi1>
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	89 ef       	ldi	r24, 0xF9	; 249
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x4a>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x54>
 3e0:	00 00       	nop
		_delay_ms(20);
		PORTB |= (1<<PORTB2);	//Slave select high
 3e2:	85 b1       	in	r24, 0x05	; 5
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	85 b9       	out	0x05, r24	; 5
		
		PORTB &= ~(1<<PORTB2);
 3e8:	85 b1       	in	r24, 0x05	; 5
 3ea:	8b 7f       	andi	r24, 0xFB	; 251
 3ec:	85 b9       	out	0x05, r24	; 5
		writeSPI('d');	// Comando para valor de pot 2
 3ee:	84 e6       	ldi	r24, 0x64	; 100
 3f0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <writeSPI>
		valorspi2 = readSPI();
 3f4:	0e 94 75 02 	call	0x4ea	; 0x4ea <readSPI>
 3f8:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <valorspi2>
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	89 ef       	ldi	r24, 0xF9	; 249
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
		_delay_ms(20);
		PORTB |= (1<<PORTB2);	// Slave select high
 40e:	85 b1       	in	r24, 0x05	; 5
 410:	84 60       	ori	r24, 0x04	; 4
 412:	85 b9       	out	0x05, r24	; 5
 414:	d3 cf       	rjmp	.-90     	; 0x3bc <main+0x30>

00000416 <initSPI>:
	{
		return 1;
	} else {
		return 0;
	}
}
 416:	e8 2f       	mov	r30, r24
 418:	84 ff       	sbrs	r24, 4
 41a:	55 c0       	rjmp	.+170    	; 0x4c6 <initSPI+0xb0>
 41c:	84 b1       	in	r24, 0x04	; 4
 41e:	8c 62       	ori	r24, 0x2C	; 44
 420:	84 b9       	out	0x04, r24	; 4
 422:	84 b1       	in	r24, 0x04	; 4
 424:	8f 7e       	andi	r24, 0xEF	; 239
 426:	84 b9       	out	0x04, r24	; 4
 428:	8c b5       	in	r24, 0x2c	; 44
 42a:	80 61       	ori	r24, 0x10	; 16
 42c:	8c bd       	out	0x2c, r24	; 44
 42e:	e7 70       	andi	r30, 0x07	; 7
 430:	8e 2f       	mov	r24, r30
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	87 30       	cpi	r24, 0x07	; 7
 436:	91 05       	cpc	r25, r1
 438:	08 f0       	brcs	.+2      	; 0x43c <initSPI+0x26>
 43a:	4e c0       	rjmp	.+156    	; 0x4d8 <initSPI+0xc2>
 43c:	fc 01       	movw	r30, r24
 43e:	ec 5c       	subi	r30, 0xCC	; 204
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__tablejump2__>
 446:	8c b5       	in	r24, 0x2c	; 44
 448:	8c 7f       	andi	r24, 0xFC	; 252
 44a:	8c bd       	out	0x2c, r24	; 44
 44c:	8d b5       	in	r24, 0x2d	; 45
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	8d bd       	out	0x2d, r24	; 45
 452:	42 c0       	rjmp	.+132    	; 0x4d8 <initSPI+0xc2>
 454:	8c b5       	in	r24, 0x2c	; 44
 456:	8c 7f       	andi	r24, 0xFC	; 252
 458:	8c bd       	out	0x2c, r24	; 44
 45a:	8d b5       	in	r24, 0x2d	; 45
 45c:	8e 7f       	andi	r24, 0xFE	; 254
 45e:	8d bd       	out	0x2d, r24	; 45
 460:	3b c0       	rjmp	.+118    	; 0x4d8 <initSPI+0xc2>
 462:	8c b5       	in	r24, 0x2c	; 44
 464:	81 60       	ori	r24, 0x01	; 1
 466:	8c bd       	out	0x2c, r24	; 44
 468:	8c b5       	in	r24, 0x2c	; 44
 46a:	8d 7f       	andi	r24, 0xFD	; 253
 46c:	8c bd       	out	0x2c, r24	; 44
 46e:	8d b5       	in	r24, 0x2d	; 45
 470:	81 60       	ori	r24, 0x01	; 1
 472:	8d bd       	out	0x2d, r24	; 45
 474:	31 c0       	rjmp	.+98     	; 0x4d8 <initSPI+0xc2>
 476:	8c b5       	in	r24, 0x2c	; 44
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	8c bd       	out	0x2c, r24	; 44
 47c:	8c b5       	in	r24, 0x2c	; 44
 47e:	8d 7f       	andi	r24, 0xFD	; 253
 480:	8c bd       	out	0x2c, r24	; 44
 482:	8d b5       	in	r24, 0x2d	; 45
 484:	8e 7f       	andi	r24, 0xFE	; 254
 486:	8d bd       	out	0x2d, r24	; 45
 488:	27 c0       	rjmp	.+78     	; 0x4d8 <initSPI+0xc2>
 48a:	8c b5       	in	r24, 0x2c	; 44
 48c:	8e 7f       	andi	r24, 0xFE	; 254
 48e:	8c bd       	out	0x2c, r24	; 44
 490:	8c b5       	in	r24, 0x2c	; 44
 492:	82 60       	ori	r24, 0x02	; 2
 494:	8c bd       	out	0x2c, r24	; 44
 496:	8d b5       	in	r24, 0x2d	; 45
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	8d bd       	out	0x2d, r24	; 45
 49c:	1d c0       	rjmp	.+58     	; 0x4d8 <initSPI+0xc2>
 49e:	8c b5       	in	r24, 0x2c	; 44
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	8c bd       	out	0x2c, r24	; 44
 4a4:	8c b5       	in	r24, 0x2c	; 44
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	8c bd       	out	0x2c, r24	; 44
 4aa:	8d b5       	in	r24, 0x2d	; 45
 4ac:	8e 7f       	andi	r24, 0xFE	; 254
 4ae:	8d bd       	out	0x2d, r24	; 45
 4b0:	13 c0       	rjmp	.+38     	; 0x4d8 <initSPI+0xc2>
 4b2:	8c b5       	in	r24, 0x2c	; 44
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	8c bd       	out	0x2c, r24	; 44
 4b8:	8c b5       	in	r24, 0x2c	; 44
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	8c bd       	out	0x2c, r24	; 44
 4be:	8d b5       	in	r24, 0x2d	; 45
 4c0:	8e 7f       	andi	r24, 0xFE	; 254
 4c2:	8d bd       	out	0x2d, r24	; 45
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <initSPI+0xc2>
 4c6:	84 b1       	in	r24, 0x04	; 4
 4c8:	80 61       	ori	r24, 0x10	; 16
 4ca:	84 b9       	out	0x04, r24	; 4
 4cc:	84 b1       	in	r24, 0x04	; 4
 4ce:	83 7d       	andi	r24, 0xD3	; 211
 4d0:	84 b9       	out	0x04, r24	; 4
 4d2:	8c b5       	in	r24, 0x2c	; 44
 4d4:	8f 7e       	andi	r24, 0xEF	; 239
 4d6:	8c bd       	out	0x2c, r24	; 44
 4d8:	8c b5       	in	r24, 0x2c	; 44
 4da:	46 2b       	or	r20, r22
 4dc:	24 2b       	or	r18, r20
 4de:	28 2b       	or	r18, r24
 4e0:	20 64       	ori	r18, 0x40	; 64
 4e2:	2c bd       	out	0x2c, r18	; 44
 4e4:	08 95       	ret

000004e6 <writeSPI>:
 4e6:	8e bd       	out	0x2e, r24	; 46
 4e8:	08 95       	ret

000004ea <readSPI>:

uint8_t readSPI(){		// Read the received data
	while(!(SPSR & (1<<SPIF)));		// Wait for data receive complete
 4ea:	0d b4       	in	r0, 0x2d	; 45
 4ec:	07 fe       	sbrs	r0, 7
 4ee:	fd cf       	rjmp	.-6      	; 0x4ea <readSPI>
	return (SPDR);		// Read the received data from buffer
 4f0:	8e b5       	in	r24, 0x2e	; 46
 4f2:	08 95       	ret

000004f4 <initUART>:
#include "UART.h"

//Funcion para inicializar UART
void initUART(void){
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 4f4:	8a b1       	in	r24, 0x0a	; 10
 4f6:	8e 7f       	andi	r24, 0xFE	; 254
 4f8:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 4fa:	8a b1       	in	r24, 0x0a	; 10
 4fc:	82 60       	ori	r24, 0x02	; 2
 4fe:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 500:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 504:	e1 ec       	ldi	r30, 0xC1	; 193
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 50a:	80 81       	ld	r24, Z
 50c:	88 69       	ori	r24, 0x98	; 152
 50e:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 510:	e2 ec       	ldi	r30, 0xC2	; 194
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 516:	80 81       	ld	r24, Z
 518:	86 60       	ori	r24, 0x06	; 6
 51a:	80 83       	st	Z, r24
	
	//Paso 5: Configurar velocidad de baudrate a 9600
	UBRR0 = 103;
 51c:	87 e6       	ldi	r24, 0x67	; 103
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 524:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 528:	08 95       	ret

0000052a <writeUART>:
}

//Funcion para escribir un caracter
void writeUART(char caracter){
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 52a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 52e:	95 ff       	sbrs	r25, 5
 530:	fc cf       	rjmp	.-8      	; 0x52a <writeUART>
	UDR0 = caracter;
 532:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 536:	08 95       	ret

00000538 <stringUART>:
}

//Funcion para escribir una cadena de caracteres
void stringUART(char *texto){
 538:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i = 0; texto[i]!= '\0'; i++){
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	07 c0       	rjmp	.+14     	; 0x54c <stringUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 53e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 542:	95 ff       	sbrs	r25, 5
 544:	fc cf       	rjmp	.-8      	; 0x53e <stringUART+0x6>
		UDR0 = texto[i];
 546:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

//Funcion para escribir una cadena de caracteres
void stringUART(char *texto){
	uint8_t i;
	for(i = 0; texto[i]!= '\0'; i++){
 54a:	2f 5f       	subi	r18, 0xFF	; 255
 54c:	fa 01       	movw	r30, r20
 54e:	e2 0f       	add	r30, r18
 550:	f1 1d       	adc	r31, r1
 552:	30 81       	ld	r19, Z
 554:	31 11       	cpse	r19, r1
 556:	f3 cf       	rjmp	.-26     	; 0x53e <stringUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = texto[i];
	}
 558:	08 95       	ret

0000055a <__tablejump2__>:
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	05 90       	lpm	r0, Z+
 560:	f4 91       	lpm	r31, Z
 562:	e0 2d       	mov	r30, r0
 564:	09 94       	ijmp

00000566 <snprintf>:
 566:	ae e0       	ldi	r26, 0x0E	; 14
 568:	b0 e0       	ldi	r27, 0x00	; 0
 56a:	e9 eb       	ldi	r30, 0xB9	; 185
 56c:	f2 e0       	ldi	r31, 0x02	; 2
 56e:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__prologue_saves__+0x1c>
 572:	0d 89       	ldd	r16, Y+21	; 0x15
 574:	1e 89       	ldd	r17, Y+22	; 0x16
 576:	8f 89       	ldd	r24, Y+23	; 0x17
 578:	98 8d       	ldd	r25, Y+24	; 0x18
 57a:	26 e0       	ldi	r18, 0x06	; 6
 57c:	2c 83       	std	Y+4, r18	; 0x04
 57e:	1a 83       	std	Y+2, r17	; 0x02
 580:	09 83       	std	Y+1, r16	; 0x01
 582:	97 ff       	sbrs	r25, 7
 584:	02 c0       	rjmp	.+4      	; 0x58a <snprintf+0x24>
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	90 e8       	ldi	r25, 0x80	; 128
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	9e 83       	std	Y+6, r25	; 0x06
 58e:	8d 83       	std	Y+5, r24	; 0x05
 590:	ae 01       	movw	r20, r28
 592:	45 5e       	subi	r20, 0xE5	; 229
 594:	5f 4f       	sbci	r21, 0xFF	; 255
 596:	69 8d       	ldd	r22, Y+25	; 0x19
 598:	7a 8d       	ldd	r23, Y+26	; 0x1a
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vfprintf>
 5a2:	4d 81       	ldd	r20, Y+5	; 0x05
 5a4:	5e 81       	ldd	r21, Y+6	; 0x06
 5a6:	57 fd       	sbrc	r21, 7
 5a8:	0a c0       	rjmp	.+20     	; 0x5be <snprintf+0x58>
 5aa:	2f 81       	ldd	r18, Y+7	; 0x07
 5ac:	38 85       	ldd	r19, Y+8	; 0x08
 5ae:	42 17       	cp	r20, r18
 5b0:	53 07       	cpc	r21, r19
 5b2:	0c f4       	brge	.+2      	; 0x5b6 <snprintf+0x50>
 5b4:	9a 01       	movw	r18, r20
 5b6:	f8 01       	movw	r30, r16
 5b8:	e2 0f       	add	r30, r18
 5ba:	f3 1f       	adc	r31, r19
 5bc:	10 82       	st	Z, r1
 5be:	2e 96       	adiw	r28, 0x0e	; 14
 5c0:	e4 e0       	ldi	r30, 0x04	; 4
 5c2:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__epilogue_restores__+0x1c>

000005c6 <vfprintf>:
 5c6:	ab e0       	ldi	r26, 0x0B	; 11
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	e9 ee       	ldi	r30, 0xE9	; 233
 5cc:	f2 e0       	ldi	r31, 0x02	; 2
 5ce:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__prologue_saves__>
 5d2:	6c 01       	movw	r12, r24
 5d4:	7b 01       	movw	r14, r22
 5d6:	8a 01       	movw	r16, r20
 5d8:	fc 01       	movw	r30, r24
 5da:	17 82       	std	Z+7, r1	; 0x07
 5dc:	16 82       	std	Z+6, r1	; 0x06
 5de:	83 81       	ldd	r24, Z+3	; 0x03
 5e0:	81 ff       	sbrs	r24, 1
 5e2:	cc c1       	rjmp	.+920    	; 0x97c <__stack+0x7d>
 5e4:	ce 01       	movw	r24, r28
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	3c 01       	movw	r6, r24
 5ea:	f6 01       	movw	r30, r12
 5ec:	93 81       	ldd	r25, Z+3	; 0x03
 5ee:	f7 01       	movw	r30, r14
 5f0:	93 fd       	sbrc	r25, 3
 5f2:	85 91       	lpm	r24, Z+
 5f4:	93 ff       	sbrs	r25, 3
 5f6:	81 91       	ld	r24, Z+
 5f8:	7f 01       	movw	r14, r30
 5fa:	88 23       	and	r24, r24
 5fc:	09 f4       	brne	.+2      	; 0x600 <vfprintf+0x3a>
 5fe:	ba c1       	rjmp	.+884    	; 0x974 <__stack+0x75>
 600:	85 32       	cpi	r24, 0x25	; 37
 602:	39 f4       	brne	.+14     	; 0x612 <vfprintf+0x4c>
 604:	93 fd       	sbrc	r25, 3
 606:	85 91       	lpm	r24, Z+
 608:	93 ff       	sbrs	r25, 3
 60a:	81 91       	ld	r24, Z+
 60c:	7f 01       	movw	r14, r30
 60e:	85 32       	cpi	r24, 0x25	; 37
 610:	29 f4       	brne	.+10     	; 0x61c <vfprintf+0x56>
 612:	b6 01       	movw	r22, r12
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 61a:	e7 cf       	rjmp	.-50     	; 0x5ea <vfprintf+0x24>
 61c:	91 2c       	mov	r9, r1
 61e:	21 2c       	mov	r2, r1
 620:	31 2c       	mov	r3, r1
 622:	ff e1       	ldi	r31, 0x1F	; 31
 624:	f3 15       	cp	r31, r3
 626:	d8 f0       	brcs	.+54     	; 0x65e <vfprintf+0x98>
 628:	8b 32       	cpi	r24, 0x2B	; 43
 62a:	79 f0       	breq	.+30     	; 0x64a <vfprintf+0x84>
 62c:	38 f4       	brcc	.+14     	; 0x63c <vfprintf+0x76>
 62e:	80 32       	cpi	r24, 0x20	; 32
 630:	79 f0       	breq	.+30     	; 0x650 <vfprintf+0x8a>
 632:	83 32       	cpi	r24, 0x23	; 35
 634:	a1 f4       	brne	.+40     	; 0x65e <vfprintf+0x98>
 636:	23 2d       	mov	r18, r3
 638:	20 61       	ori	r18, 0x10	; 16
 63a:	1d c0       	rjmp	.+58     	; 0x676 <vfprintf+0xb0>
 63c:	8d 32       	cpi	r24, 0x2D	; 45
 63e:	61 f0       	breq	.+24     	; 0x658 <vfprintf+0x92>
 640:	80 33       	cpi	r24, 0x30	; 48
 642:	69 f4       	brne	.+26     	; 0x65e <vfprintf+0x98>
 644:	23 2d       	mov	r18, r3
 646:	21 60       	ori	r18, 0x01	; 1
 648:	16 c0       	rjmp	.+44     	; 0x676 <vfprintf+0xb0>
 64a:	83 2d       	mov	r24, r3
 64c:	82 60       	ori	r24, 0x02	; 2
 64e:	38 2e       	mov	r3, r24
 650:	e3 2d       	mov	r30, r3
 652:	e4 60       	ori	r30, 0x04	; 4
 654:	3e 2e       	mov	r3, r30
 656:	2a c0       	rjmp	.+84     	; 0x6ac <vfprintf+0xe6>
 658:	f3 2d       	mov	r31, r3
 65a:	f8 60       	ori	r31, 0x08	; 8
 65c:	1d c0       	rjmp	.+58     	; 0x698 <vfprintf+0xd2>
 65e:	37 fc       	sbrc	r3, 7
 660:	2d c0       	rjmp	.+90     	; 0x6bc <vfprintf+0xf6>
 662:	20 ed       	ldi	r18, 0xD0	; 208
 664:	28 0f       	add	r18, r24
 666:	2a 30       	cpi	r18, 0x0A	; 10
 668:	40 f0       	brcs	.+16     	; 0x67a <vfprintf+0xb4>
 66a:	8e 32       	cpi	r24, 0x2E	; 46
 66c:	b9 f4       	brne	.+46     	; 0x69c <vfprintf+0xd6>
 66e:	36 fc       	sbrc	r3, 6
 670:	81 c1       	rjmp	.+770    	; 0x974 <__stack+0x75>
 672:	23 2d       	mov	r18, r3
 674:	20 64       	ori	r18, 0x40	; 64
 676:	32 2e       	mov	r3, r18
 678:	19 c0       	rjmp	.+50     	; 0x6ac <vfprintf+0xe6>
 67a:	36 fe       	sbrs	r3, 6
 67c:	06 c0       	rjmp	.+12     	; 0x68a <vfprintf+0xc4>
 67e:	8a e0       	ldi	r24, 0x0A	; 10
 680:	98 9e       	mul	r9, r24
 682:	20 0d       	add	r18, r0
 684:	11 24       	eor	r1, r1
 686:	92 2e       	mov	r9, r18
 688:	11 c0       	rjmp	.+34     	; 0x6ac <vfprintf+0xe6>
 68a:	ea e0       	ldi	r30, 0x0A	; 10
 68c:	2e 9e       	mul	r2, r30
 68e:	20 0d       	add	r18, r0
 690:	11 24       	eor	r1, r1
 692:	22 2e       	mov	r2, r18
 694:	f3 2d       	mov	r31, r3
 696:	f0 62       	ori	r31, 0x20	; 32
 698:	3f 2e       	mov	r3, r31
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <vfprintf+0xe6>
 69c:	8c 36       	cpi	r24, 0x6C	; 108
 69e:	21 f4       	brne	.+8      	; 0x6a8 <vfprintf+0xe2>
 6a0:	83 2d       	mov	r24, r3
 6a2:	80 68       	ori	r24, 0x80	; 128
 6a4:	38 2e       	mov	r3, r24
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <vfprintf+0xe6>
 6a8:	88 36       	cpi	r24, 0x68	; 104
 6aa:	41 f4       	brne	.+16     	; 0x6bc <vfprintf+0xf6>
 6ac:	f7 01       	movw	r30, r14
 6ae:	93 fd       	sbrc	r25, 3
 6b0:	85 91       	lpm	r24, Z+
 6b2:	93 ff       	sbrs	r25, 3
 6b4:	81 91       	ld	r24, Z+
 6b6:	7f 01       	movw	r14, r30
 6b8:	81 11       	cpse	r24, r1
 6ba:	b3 cf       	rjmp	.-154    	; 0x622 <vfprintf+0x5c>
 6bc:	98 2f       	mov	r25, r24
 6be:	9f 7d       	andi	r25, 0xDF	; 223
 6c0:	95 54       	subi	r25, 0x45	; 69
 6c2:	93 30       	cpi	r25, 0x03	; 3
 6c4:	28 f4       	brcc	.+10     	; 0x6d0 <vfprintf+0x10a>
 6c6:	0c 5f       	subi	r16, 0xFC	; 252
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ca:	9f e3       	ldi	r25, 0x3F	; 63
 6cc:	99 83       	std	Y+1, r25	; 0x01
 6ce:	0d c0       	rjmp	.+26     	; 0x6ea <vfprintf+0x124>
 6d0:	83 36       	cpi	r24, 0x63	; 99
 6d2:	31 f0       	breq	.+12     	; 0x6e0 <vfprintf+0x11a>
 6d4:	83 37       	cpi	r24, 0x73	; 115
 6d6:	71 f0       	breq	.+28     	; 0x6f4 <vfprintf+0x12e>
 6d8:	83 35       	cpi	r24, 0x53	; 83
 6da:	09 f0       	breq	.+2      	; 0x6de <vfprintf+0x118>
 6dc:	59 c0       	rjmp	.+178    	; 0x790 <vfprintf+0x1ca>
 6de:	21 c0       	rjmp	.+66     	; 0x722 <vfprintf+0x15c>
 6e0:	f8 01       	movw	r30, r16
 6e2:	80 81       	ld	r24, Z
 6e4:	89 83       	std	Y+1, r24	; 0x01
 6e6:	0e 5f       	subi	r16, 0xFE	; 254
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	88 24       	eor	r8, r8
 6ec:	83 94       	inc	r8
 6ee:	91 2c       	mov	r9, r1
 6f0:	53 01       	movw	r10, r6
 6f2:	13 c0       	rjmp	.+38     	; 0x71a <vfprintf+0x154>
 6f4:	28 01       	movw	r4, r16
 6f6:	f2 e0       	ldi	r31, 0x02	; 2
 6f8:	4f 0e       	add	r4, r31
 6fa:	51 1c       	adc	r5, r1
 6fc:	f8 01       	movw	r30, r16
 6fe:	a0 80       	ld	r10, Z
 700:	b1 80       	ldd	r11, Z+1	; 0x01
 702:	36 fe       	sbrs	r3, 6
 704:	03 c0       	rjmp	.+6      	; 0x70c <vfprintf+0x146>
 706:	69 2d       	mov	r22, r9
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <vfprintf+0x14a>
 70c:	6f ef       	ldi	r22, 0xFF	; 255
 70e:	7f ef       	ldi	r23, 0xFF	; 255
 710:	c5 01       	movw	r24, r10
 712:	0e 94 cf 04 	call	0x99e	; 0x99e <strnlen>
 716:	4c 01       	movw	r8, r24
 718:	82 01       	movw	r16, r4
 71a:	f3 2d       	mov	r31, r3
 71c:	ff 77       	andi	r31, 0x7F	; 127
 71e:	3f 2e       	mov	r3, r31
 720:	16 c0       	rjmp	.+44     	; 0x74e <vfprintf+0x188>
 722:	28 01       	movw	r4, r16
 724:	22 e0       	ldi	r18, 0x02	; 2
 726:	42 0e       	add	r4, r18
 728:	51 1c       	adc	r5, r1
 72a:	f8 01       	movw	r30, r16
 72c:	a0 80       	ld	r10, Z
 72e:	b1 80       	ldd	r11, Z+1	; 0x01
 730:	36 fe       	sbrs	r3, 6
 732:	03 c0       	rjmp	.+6      	; 0x73a <vfprintf+0x174>
 734:	69 2d       	mov	r22, r9
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <vfprintf+0x178>
 73a:	6f ef       	ldi	r22, 0xFF	; 255
 73c:	7f ef       	ldi	r23, 0xFF	; 255
 73e:	c5 01       	movw	r24, r10
 740:	0e 94 c4 04 	call	0x988	; 0x988 <strnlen_P>
 744:	4c 01       	movw	r8, r24
 746:	f3 2d       	mov	r31, r3
 748:	f0 68       	ori	r31, 0x80	; 128
 74a:	3f 2e       	mov	r3, r31
 74c:	82 01       	movw	r16, r4
 74e:	33 fc       	sbrc	r3, 3
 750:	1b c0       	rjmp	.+54     	; 0x788 <vfprintf+0x1c2>
 752:	82 2d       	mov	r24, r2
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	88 16       	cp	r8, r24
 758:	99 06       	cpc	r9, r25
 75a:	b0 f4       	brcc	.+44     	; 0x788 <vfprintf+0x1c2>
 75c:	b6 01       	movw	r22, r12
 75e:	80 e2       	ldi	r24, 0x20	; 32
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 766:	2a 94       	dec	r2
 768:	f4 cf       	rjmp	.-24     	; 0x752 <vfprintf+0x18c>
 76a:	f5 01       	movw	r30, r10
 76c:	37 fc       	sbrc	r3, 7
 76e:	85 91       	lpm	r24, Z+
 770:	37 fe       	sbrs	r3, 7
 772:	81 91       	ld	r24, Z+
 774:	5f 01       	movw	r10, r30
 776:	b6 01       	movw	r22, r12
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 77e:	21 10       	cpse	r2, r1
 780:	2a 94       	dec	r2
 782:	21 e0       	ldi	r18, 0x01	; 1
 784:	82 1a       	sub	r8, r18
 786:	91 08       	sbc	r9, r1
 788:	81 14       	cp	r8, r1
 78a:	91 04       	cpc	r9, r1
 78c:	71 f7       	brne	.-36     	; 0x76a <vfprintf+0x1a4>
 78e:	e8 c0       	rjmp	.+464    	; 0x960 <__stack+0x61>
 790:	84 36       	cpi	r24, 0x64	; 100
 792:	11 f0       	breq	.+4      	; 0x798 <vfprintf+0x1d2>
 794:	89 36       	cpi	r24, 0x69	; 105
 796:	41 f5       	brne	.+80     	; 0x7e8 <vfprintf+0x222>
 798:	f8 01       	movw	r30, r16
 79a:	37 fe       	sbrs	r3, 7
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <vfprintf+0x1e6>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	0c 5f       	subi	r16, 0xFC	; 252
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	08 c0       	rjmp	.+16     	; 0x7bc <vfprintf+0x1f6>
 7ac:	60 81       	ld	r22, Z
 7ae:	71 81       	ldd	r23, Z+1	; 0x01
 7b0:	07 2e       	mov	r0, r23
 7b2:	00 0c       	add	r0, r0
 7b4:	88 0b       	sbc	r24, r24
 7b6:	99 0b       	sbc	r25, r25
 7b8:	0e 5f       	subi	r16, 0xFE	; 254
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	f3 2d       	mov	r31, r3
 7be:	ff 76       	andi	r31, 0x6F	; 111
 7c0:	3f 2e       	mov	r3, r31
 7c2:	97 ff       	sbrs	r25, 7
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <vfprintf+0x212>
 7c6:	90 95       	com	r25
 7c8:	80 95       	com	r24
 7ca:	70 95       	com	r23
 7cc:	61 95       	neg	r22
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	f0 68       	ori	r31, 0x80	; 128
 7d6:	3f 2e       	mov	r3, r31
 7d8:	2a e0       	ldi	r18, 0x0A	; 10
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	a3 01       	movw	r20, r6
 7de:	0e 94 16 05 	call	0xa2c	; 0xa2c <__ultoa_invert>
 7e2:	88 2e       	mov	r8, r24
 7e4:	86 18       	sub	r8, r6
 7e6:	45 c0       	rjmp	.+138    	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 7e8:	85 37       	cpi	r24, 0x75	; 117
 7ea:	31 f4       	brne	.+12     	; 0x7f8 <vfprintf+0x232>
 7ec:	23 2d       	mov	r18, r3
 7ee:	2f 7e       	andi	r18, 0xEF	; 239
 7f0:	b2 2e       	mov	r11, r18
 7f2:	2a e0       	ldi	r18, 0x0A	; 10
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	25 c0       	rjmp	.+74     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7f8:	93 2d       	mov	r25, r3
 7fa:	99 7f       	andi	r25, 0xF9	; 249
 7fc:	b9 2e       	mov	r11, r25
 7fe:	8f 36       	cpi	r24, 0x6F	; 111
 800:	c1 f0       	breq	.+48     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 802:	18 f4       	brcc	.+6      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 804:	88 35       	cpi	r24, 0x58	; 88
 806:	79 f0       	breq	.+30     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 808:	b5 c0       	rjmp	.+362    	; 0x974 <__stack+0x75>
 80a:	80 37       	cpi	r24, 0x70	; 112
 80c:	19 f0       	breq	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80e:	88 37       	cpi	r24, 0x78	; 120
 810:	21 f0       	breq	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	b0 c0       	rjmp	.+352    	; 0x974 <__stack+0x75>
 814:	e9 2f       	mov	r30, r25
 816:	e0 61       	ori	r30, 0x10	; 16
 818:	be 2e       	mov	r11, r30
 81a:	b4 fe       	sbrs	r11, 4
 81c:	0d c0       	rjmp	.+26     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 81e:	fb 2d       	mov	r31, r11
 820:	f4 60       	ori	r31, 0x04	; 4
 822:	bf 2e       	mov	r11, r31
 824:	09 c0       	rjmp	.+18     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 826:	34 fe       	sbrs	r3, 4
 828:	0a c0       	rjmp	.+20     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 82a:	29 2f       	mov	r18, r25
 82c:	26 60       	ori	r18, 0x06	; 6
 82e:	b2 2e       	mov	r11, r18
 830:	06 c0       	rjmp	.+12     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 832:	28 e0       	ldi	r18, 0x08	; 8
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	05 c0       	rjmp	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 838:	20 e1       	ldi	r18, 0x10	; 16
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	20 e1       	ldi	r18, 0x10	; 16
 840:	32 e0       	ldi	r19, 0x02	; 2
 842:	f8 01       	movw	r30, r16
 844:	b7 fe       	sbrs	r11, 7
 846:	07 c0       	rjmp	.+14     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	82 81       	ldd	r24, Z+2	; 0x02
 84e:	93 81       	ldd	r25, Z+3	; 0x03
 850:	0c 5f       	subi	r16, 0xFC	; 252
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	06 c0       	rjmp	.+12     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 5f       	subi	r16, 0xFE	; 254
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	a3 01       	movw	r20, r6
 864:	0e 94 16 05 	call	0xa2c	; 0xa2c <__ultoa_invert>
 868:	88 2e       	mov	r8, r24
 86a:	86 18       	sub	r8, r6
 86c:	fb 2d       	mov	r31, r11
 86e:	ff 77       	andi	r31, 0x7F	; 127
 870:	3f 2e       	mov	r3, r31
 872:	36 fe       	sbrs	r3, 6
 874:	0d c0       	rjmp	.+26     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 876:	23 2d       	mov	r18, r3
 878:	2e 7f       	andi	r18, 0xFE	; 254
 87a:	a2 2e       	mov	r10, r18
 87c:	89 14       	cp	r8, r9
 87e:	58 f4       	brcc	.+22     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 880:	34 fe       	sbrs	r3, 4
 882:	0b c0       	rjmp	.+22     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 884:	32 fc       	sbrc	r3, 2
 886:	09 c0       	rjmp	.+18     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 888:	83 2d       	mov	r24, r3
 88a:	8e 7e       	andi	r24, 0xEE	; 238
 88c:	a8 2e       	mov	r10, r24
 88e:	05 c0       	rjmp	.+10     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 890:	b8 2c       	mov	r11, r8
 892:	a3 2c       	mov	r10, r3
 894:	03 c0       	rjmp	.+6      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 896:	b8 2c       	mov	r11, r8
 898:	01 c0       	rjmp	.+2      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 89a:	b9 2c       	mov	r11, r9
 89c:	a4 fe       	sbrs	r10, 4
 89e:	0f c0       	rjmp	.+30     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8a0:	fe 01       	movw	r30, r28
 8a2:	e8 0d       	add	r30, r8
 8a4:	f1 1d       	adc	r31, r1
 8a6:	80 81       	ld	r24, Z
 8a8:	80 33       	cpi	r24, 0x30	; 48
 8aa:	21 f4       	brne	.+8      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8ac:	9a 2d       	mov	r25, r10
 8ae:	99 7e       	andi	r25, 0xE9	; 233
 8b0:	a9 2e       	mov	r10, r25
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8b4:	a2 fe       	sbrs	r10, 2
 8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8b8:	b3 94       	inc	r11
 8ba:	b3 94       	inc	r11
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8be:	8a 2d       	mov	r24, r10
 8c0:	86 78       	andi	r24, 0x86	; 134
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8c4:	b3 94       	inc	r11
 8c6:	a3 fc       	sbrc	r10, 3
 8c8:	11 c0       	rjmp	.+34     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8ca:	a0 fe       	sbrs	r10, 0
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8ce:	b2 14       	cp	r11, r2
 8d0:	88 f4       	brcc	.+34     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8d2:	28 0c       	add	r2, r8
 8d4:	92 2c       	mov	r9, r2
 8d6:	9b 18       	sub	r9, r11
 8d8:	0e c0       	rjmp	.+28     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8da:	b2 14       	cp	r11, r2
 8dc:	60 f4       	brcc	.+24     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8de:	b6 01       	movw	r22, r12
 8e0:	80 e2       	ldi	r24, 0x20	; 32
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 8e8:	b3 94       	inc	r11
 8ea:	f7 cf       	rjmp	.-18     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8ec:	b2 14       	cp	r11, r2
 8ee:	18 f4       	brcc	.+6      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8f0:	2b 18       	sub	r2, r11
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8f4:	98 2c       	mov	r9, r8
 8f6:	21 2c       	mov	r2, r1
 8f8:	a4 fe       	sbrs	r10, 4
 8fa:	10 c0       	rjmp	.+32     	; 0x91c <__stack+0x1d>
 8fc:	b6 01       	movw	r22, r12
 8fe:	80 e3       	ldi	r24, 0x30	; 48
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 906:	a2 fe       	sbrs	r10, 2
 908:	17 c0       	rjmp	.+46     	; 0x938 <__stack+0x39>
 90a:	a1 fc       	sbrc	r10, 1
 90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
 90e:	88 e7       	ldi	r24, 0x78	; 120
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
 914:	88 e5       	ldi	r24, 0x58	; 88
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	b6 01       	movw	r22, r12
 91a:	0c c0       	rjmp	.+24     	; 0x934 <__stack+0x35>
 91c:	8a 2d       	mov	r24, r10
 91e:	86 78       	andi	r24, 0x86	; 134
 920:	59 f0       	breq	.+22     	; 0x938 <__stack+0x39>
 922:	a1 fe       	sbrs	r10, 1
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
 926:	8b e2       	ldi	r24, 0x2B	; 43
 928:	01 c0       	rjmp	.+2      	; 0x92c <__stack+0x2d>
 92a:	80 e2       	ldi	r24, 0x20	; 32
 92c:	a7 fc       	sbrc	r10, 7
 92e:	8d e2       	ldi	r24, 0x2D	; 45
 930:	b6 01       	movw	r22, r12
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 938:	89 14       	cp	r8, r9
 93a:	38 f4       	brcc	.+14     	; 0x94a <__stack+0x4b>
 93c:	b6 01       	movw	r22, r12
 93e:	80 e3       	ldi	r24, 0x30	; 48
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 946:	9a 94       	dec	r9
 948:	f7 cf       	rjmp	.-18     	; 0x938 <__stack+0x39>
 94a:	8a 94       	dec	r8
 94c:	f3 01       	movw	r30, r6
 94e:	e8 0d       	add	r30, r8
 950:	f1 1d       	adc	r31, r1
 952:	80 81       	ld	r24, Z
 954:	b6 01       	movw	r22, r12
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 95c:	81 10       	cpse	r8, r1
 95e:	f5 cf       	rjmp	.-22     	; 0x94a <__stack+0x4b>
 960:	22 20       	and	r2, r2
 962:	09 f4       	brne	.+2      	; 0x966 <__stack+0x67>
 964:	42 ce       	rjmp	.-892    	; 0x5ea <vfprintf+0x24>
 966:	b6 01       	movw	r22, r12
 968:	80 e2       	ldi	r24, 0x20	; 32
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <fputc>
 970:	2a 94       	dec	r2
 972:	f6 cf       	rjmp	.-20     	; 0x960 <__stack+0x61>
 974:	f6 01       	movw	r30, r12
 976:	86 81       	ldd	r24, Z+6	; 0x06
 978:	97 81       	ldd	r25, Z+7	; 0x07
 97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	2b 96       	adiw	r28, 0x0b	; 11
 982:	e2 e1       	ldi	r30, 0x12	; 18
 984:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__epilogue_restores__>

00000988 <strnlen_P>:
 988:	fc 01       	movw	r30, r24
 98a:	05 90       	lpm	r0, Z+
 98c:	61 50       	subi	r22, 0x01	; 1
 98e:	70 40       	sbci	r23, 0x00	; 0
 990:	01 10       	cpse	r0, r1
 992:	d8 f7       	brcc	.-10     	; 0x98a <strnlen_P+0x2>
 994:	80 95       	com	r24
 996:	90 95       	com	r25
 998:	8e 0f       	add	r24, r30
 99a:	9f 1f       	adc	r25, r31
 99c:	08 95       	ret

0000099e <strnlen>:
 99e:	fc 01       	movw	r30, r24
 9a0:	61 50       	subi	r22, 0x01	; 1
 9a2:	70 40       	sbci	r23, 0x00	; 0
 9a4:	01 90       	ld	r0, Z+
 9a6:	01 10       	cpse	r0, r1
 9a8:	d8 f7       	brcc	.-10     	; 0x9a0 <strnlen+0x2>
 9aa:	80 95       	com	r24
 9ac:	90 95       	com	r25
 9ae:	8e 0f       	add	r24, r30
 9b0:	9f 1f       	adc	r25, r31
 9b2:	08 95       	ret

000009b4 <fputc>:
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	fb 01       	movw	r30, r22
 9be:	23 81       	ldd	r18, Z+3	; 0x03
 9c0:	21 fd       	sbrc	r18, 1
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <fputc+0x16>
 9c4:	8f ef       	ldi	r24, 0xFF	; 255
 9c6:	9f ef       	ldi	r25, 0xFF	; 255
 9c8:	2c c0       	rjmp	.+88     	; 0xa22 <fputc+0x6e>
 9ca:	22 ff       	sbrs	r18, 2
 9cc:	16 c0       	rjmp	.+44     	; 0x9fa <fputc+0x46>
 9ce:	46 81       	ldd	r20, Z+6	; 0x06
 9d0:	57 81       	ldd	r21, Z+7	; 0x07
 9d2:	24 81       	ldd	r18, Z+4	; 0x04
 9d4:	35 81       	ldd	r19, Z+5	; 0x05
 9d6:	42 17       	cp	r20, r18
 9d8:	53 07       	cpc	r21, r19
 9da:	44 f4       	brge	.+16     	; 0x9ec <fputc+0x38>
 9dc:	a0 81       	ld	r26, Z
 9de:	b1 81       	ldd	r27, Z+1	; 0x01
 9e0:	9d 01       	movw	r18, r26
 9e2:	2f 5f       	subi	r18, 0xFF	; 255
 9e4:	3f 4f       	sbci	r19, 0xFF	; 255
 9e6:	31 83       	std	Z+1, r19	; 0x01
 9e8:	20 83       	st	Z, r18
 9ea:	8c 93       	st	X, r24
 9ec:	26 81       	ldd	r18, Z+6	; 0x06
 9ee:	37 81       	ldd	r19, Z+7	; 0x07
 9f0:	2f 5f       	subi	r18, 0xFF	; 255
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	37 83       	std	Z+7, r19	; 0x07
 9f6:	26 83       	std	Z+6, r18	; 0x06
 9f8:	14 c0       	rjmp	.+40     	; 0xa22 <fputc+0x6e>
 9fa:	8b 01       	movw	r16, r22
 9fc:	ec 01       	movw	r28, r24
 9fe:	fb 01       	movw	r30, r22
 a00:	00 84       	ldd	r0, Z+8	; 0x08
 a02:	f1 85       	ldd	r31, Z+9	; 0x09
 a04:	e0 2d       	mov	r30, r0
 a06:	09 95       	icall
 a08:	89 2b       	or	r24, r25
 a0a:	e1 f6       	brne	.-72     	; 0x9c4 <fputc+0x10>
 a0c:	d8 01       	movw	r26, r16
 a0e:	16 96       	adiw	r26, 0x06	; 6
 a10:	8d 91       	ld	r24, X+
 a12:	9c 91       	ld	r25, X
 a14:	17 97       	sbiw	r26, 0x07	; 7
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	17 96       	adiw	r26, 0x07	; 7
 a1a:	9c 93       	st	X, r25
 a1c:	8e 93       	st	-X, r24
 a1e:	16 97       	sbiw	r26, 0x06	; 6
 a20:	ce 01       	movw	r24, r28
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	08 95       	ret

00000a2c <__ultoa_invert>:
 a2c:	fa 01       	movw	r30, r20
 a2e:	aa 27       	eor	r26, r26
 a30:	28 30       	cpi	r18, 0x08	; 8
 a32:	51 f1       	breq	.+84     	; 0xa88 <__ultoa_invert+0x5c>
 a34:	20 31       	cpi	r18, 0x10	; 16
 a36:	81 f1       	breq	.+96     	; 0xa98 <__ultoa_invert+0x6c>
 a38:	e8 94       	clt
 a3a:	6f 93       	push	r22
 a3c:	6e 7f       	andi	r22, 0xFE	; 254
 a3e:	6e 5f       	subi	r22, 0xFE	; 254
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	af 4f       	sbci	r26, 0xFF	; 255
 a48:	b1 e0       	ldi	r27, 0x01	; 1
 a4a:	3e d0       	rcall	.+124    	; 0xac8 <__ultoa_invert+0x9c>
 a4c:	b4 e0       	ldi	r27, 0x04	; 4
 a4e:	3c d0       	rcall	.+120    	; 0xac8 <__ultoa_invert+0x9c>
 a50:	67 0f       	add	r22, r23
 a52:	78 1f       	adc	r23, r24
 a54:	89 1f       	adc	r24, r25
 a56:	9a 1f       	adc	r25, r26
 a58:	a1 1d       	adc	r26, r1
 a5a:	68 0f       	add	r22, r24
 a5c:	79 1f       	adc	r23, r25
 a5e:	8a 1f       	adc	r24, r26
 a60:	91 1d       	adc	r25, r1
 a62:	a1 1d       	adc	r26, r1
 a64:	6a 0f       	add	r22, r26
 a66:	71 1d       	adc	r23, r1
 a68:	81 1d       	adc	r24, r1
 a6a:	91 1d       	adc	r25, r1
 a6c:	a1 1d       	adc	r26, r1
 a6e:	20 d0       	rcall	.+64     	; 0xab0 <__ultoa_invert+0x84>
 a70:	09 f4       	brne	.+2      	; 0xa74 <__ultoa_invert+0x48>
 a72:	68 94       	set
 a74:	3f 91       	pop	r19
 a76:	2a e0       	ldi	r18, 0x0A	; 10
 a78:	26 9f       	mul	r18, r22
 a7a:	11 24       	eor	r1, r1
 a7c:	30 19       	sub	r19, r0
 a7e:	30 5d       	subi	r19, 0xD0	; 208
 a80:	31 93       	st	Z+, r19
 a82:	de f6       	brtc	.-74     	; 0xa3a <__ultoa_invert+0xe>
 a84:	cf 01       	movw	r24, r30
 a86:	08 95       	ret
 a88:	46 2f       	mov	r20, r22
 a8a:	47 70       	andi	r20, 0x07	; 7
 a8c:	40 5d       	subi	r20, 0xD0	; 208
 a8e:	41 93       	st	Z+, r20
 a90:	b3 e0       	ldi	r27, 0x03	; 3
 a92:	0f d0       	rcall	.+30     	; 0xab2 <__ultoa_invert+0x86>
 a94:	c9 f7       	brne	.-14     	; 0xa88 <__ultoa_invert+0x5c>
 a96:	f6 cf       	rjmp	.-20     	; 0xa84 <__ultoa_invert+0x58>
 a98:	46 2f       	mov	r20, r22
 a9a:	4f 70       	andi	r20, 0x0F	; 15
 a9c:	40 5d       	subi	r20, 0xD0	; 208
 a9e:	4a 33       	cpi	r20, 0x3A	; 58
 aa0:	18 f0       	brcs	.+6      	; 0xaa8 <__ultoa_invert+0x7c>
 aa2:	49 5d       	subi	r20, 0xD9	; 217
 aa4:	31 fd       	sbrc	r19, 1
 aa6:	40 52       	subi	r20, 0x20	; 32
 aa8:	41 93       	st	Z+, r20
 aaa:	02 d0       	rcall	.+4      	; 0xab0 <__ultoa_invert+0x84>
 aac:	a9 f7       	brne	.-22     	; 0xa98 <__ultoa_invert+0x6c>
 aae:	ea cf       	rjmp	.-44     	; 0xa84 <__ultoa_invert+0x58>
 ab0:	b4 e0       	ldi	r27, 0x04	; 4
 ab2:	a6 95       	lsr	r26
 ab4:	97 95       	ror	r25
 ab6:	87 95       	ror	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	ba 95       	dec	r27
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__ultoa_invert+0x86>
 ac0:	00 97       	sbiw	r24, 0x00	; 0
 ac2:	61 05       	cpc	r22, r1
 ac4:	71 05       	cpc	r23, r1
 ac6:	08 95       	ret
 ac8:	9b 01       	movw	r18, r22
 aca:	ac 01       	movw	r20, r24
 acc:	0a 2e       	mov	r0, r26
 ace:	06 94       	lsr	r0
 ad0:	57 95       	ror	r21
 ad2:	47 95       	ror	r20
 ad4:	37 95       	ror	r19
 ad6:	27 95       	ror	r18
 ad8:	ba 95       	dec	r27
 ada:	c9 f7       	brne	.-14     	; 0xace <__ultoa_invert+0xa2>
 adc:	62 0f       	add	r22, r18
 ade:	73 1f       	adc	r23, r19
 ae0:	84 1f       	adc	r24, r20
 ae2:	95 1f       	adc	r25, r21
 ae4:	a0 1d       	adc	r26, r0
 ae6:	08 95       	ret

00000ae8 <__prologue_saves__>:
 ae8:	2f 92       	push	r2
 aea:	3f 92       	push	r3
 aec:	4f 92       	push	r4
 aee:	5f 92       	push	r5
 af0:	6f 92       	push	r6
 af2:	7f 92       	push	r7
 af4:	8f 92       	push	r8
 af6:	9f 92       	push	r9
 af8:	af 92       	push	r10
 afa:	bf 92       	push	r11
 afc:	cf 92       	push	r12
 afe:	df 92       	push	r13
 b00:	ef 92       	push	r14
 b02:	ff 92       	push	r15
 b04:	0f 93       	push	r16
 b06:	1f 93       	push	r17
 b08:	cf 93       	push	r28
 b0a:	df 93       	push	r29
 b0c:	cd b7       	in	r28, 0x3d	; 61
 b0e:	de b7       	in	r29, 0x3e	; 62
 b10:	ca 1b       	sub	r28, r26
 b12:	db 0b       	sbc	r29, r27
 b14:	0f b6       	in	r0, 0x3f	; 63
 b16:	f8 94       	cli
 b18:	de bf       	out	0x3e, r29	; 62
 b1a:	0f be       	out	0x3f, r0	; 63
 b1c:	cd bf       	out	0x3d, r28	; 61
 b1e:	09 94       	ijmp

00000b20 <__epilogue_restores__>:
 b20:	2a 88       	ldd	r2, Y+18	; 0x12
 b22:	39 88       	ldd	r3, Y+17	; 0x11
 b24:	48 88       	ldd	r4, Y+16	; 0x10
 b26:	5f 84       	ldd	r5, Y+15	; 0x0f
 b28:	6e 84       	ldd	r6, Y+14	; 0x0e
 b2a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b2c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b2e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b30:	aa 84       	ldd	r10, Y+10	; 0x0a
 b32:	b9 84       	ldd	r11, Y+9	; 0x09
 b34:	c8 84       	ldd	r12, Y+8	; 0x08
 b36:	df 80       	ldd	r13, Y+7	; 0x07
 b38:	ee 80       	ldd	r14, Y+6	; 0x06
 b3a:	fd 80       	ldd	r15, Y+5	; 0x05
 b3c:	0c 81       	ldd	r16, Y+4	; 0x04
 b3e:	1b 81       	ldd	r17, Y+3	; 0x03
 b40:	aa 81       	ldd	r26, Y+2	; 0x02
 b42:	b9 81       	ldd	r27, Y+1	; 0x01
 b44:	ce 0f       	add	r28, r30
 b46:	d1 1d       	adc	r29, r1
 b48:	0f b6       	in	r0, 0x3f	; 63
 b4a:	f8 94       	cli
 b4c:	de bf       	out	0x3e, r29	; 62
 b4e:	0f be       	out	0x3f, r0	; 63
 b50:	cd bf       	out	0x3d, r28	; 61
 b52:	ed 01       	movw	r28, r26
 b54:	08 95       	ret

00000b56 <_exit>:
 b56:	f8 94       	cli

00000b58 <__stop_program>:
 b58:	ff cf       	rjmp	.-2      	; 0xb58 <__stop_program>
